#include <array>

#include <string>

#include <codegen.hh>
class Record47 {
 public:
  Record47(unsigned __sym__0___45_532509241117904863, fluidb_string<15> __sym__0__6879476602096058762, unsigned __sym__0__6336215024333455337) : sym__0___45_532509241117904863(__sym__0___45_532509241117904863), sym__0__6879476602096058762(__sym__0__6879476602096058762), sym__0__6336215024333455337(__sym__0__6336215024333455337)
  {
  }
  Record47() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_532509241117904863 << " | " << arrToString(sym__0__6879476602096058762) << " | " << sym__0__6336215024333455337;
    return o.str();
  }
  bool operator <(const Record47& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 < sym__0___45_532509241117904863 && (otherRec.sym__0__6879476602096058762 < sym__0__6879476602096058762 && otherRec.sym__0__6336215024333455337 < sym__0__6336215024333455337));
  }
  bool operator ==(const Record47& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 == sym__0___45_532509241117904863 && (otherRec.sym__0__6879476602096058762 == sym__0__6879476602096058762 && otherRec.sym__0__6336215024333455337 == sym__0__6336215024333455337));
  }
  bool operator !=(const Record47& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 != sym__0___45_532509241117904863 || (otherRec.sym__0__6879476602096058762 != sym__0__6879476602096058762 || otherRec.sym__0__6336215024333455337 != sym__0__6336215024333455337));
  }
  unsigned sym__0___45_532509241117904863;
  fluidb_string<15> sym__0__6879476602096058762;
  unsigned sym__0__6336215024333455337;
 private:
};


class Record49 {
 public:
  Record49(unsigned __sym__0__751349491586783291, fluidb_string<18> __sym__0__354510891937955499, fluidb_string<9> __sym__0__8685870419913255269, fluidb_string<9> __sym__0___45_1685896364158718066, unsigned __sym__0___45_5677596107407519400, unsigned __sym__0__861815074445021598, fluidb_string<7> __sym__0___45_3872891870093673981, unsigned __sym__0___45_6241898377327069772, unsigned __sym__0__642504737957706403, unsigned __sym__0___45_1374976708771691557, unsigned __sym__0__2339057656064903933, unsigned __sym__0__89048769271346350, fluidb_string<15> __sym__0__6426708041019551759, fluidb_string<2> __sym__0__7008835179244010327, fluidb_string<2> __sym__0___45_4323628884972846406, fluidb_string<2> __sym__0__7828159490610995250, fluidb_string<2> __sym__0__2257718864796675488, unsigned __sym__0__730109080165272259, fluidb_string<18> __sym__0___45_8476449300885475093, fluidb_string<40> __sym__0___45_991149214691090239, fluidb_string<11> __sym__0___45_2212122284055066105, fluidb_string<15> __sym__0___45_2044948362686327715, fluidb_string<13> __sym__0__3321043677072918300, fluidb_string<15> __sym__0___45_226399795464070293, fluidb_string<21> __sym__0__7848733459393176335, unsigned __sym__0___45_4488020782418924777, int __sym__0___45_6919306960004101059, unsigned __sym__0__6018430784935315013, unsigned __sym__0___45_140673424384154541, unsigned __sym__0___45_6038639548629345048, unsigned __sym__0__1559790869847058897, fluidb_string<21> __sym__0___45_4352805721407037080, unsigned __sym__0__4062351712071543146, fluidb_string<10> __sym__0___45_6018880488104713787, unsigned __sym__0___45_6835853099986992139, double __sym__0___45_8089668391442329833, unsigned __sym__0___45_8717135147929398223, double __sym__0___45_7475819144393673057, unsigned __sym__0__9142595129731966875, unsigned __sym__0__2065559644984295980, double __sym__0__2460723449183532278, fluidb_string<13> __sym__0__470592171585028734, unsigned __sym__0__4356580487975201936, fluidb_string<25> __sym__0___45_9184441323043515765, fluidb_string<40> __sym__0__6618707433631942345, fluidb_string<16> __sym__0___45_6275907539891917001, fluidb_string<16> __sym__0___45_2055641227140571803, fluidb_string<13> __sym__0__2004584544714042516, fluidb_string<15> __sym__0__4525776177764059147, unsigned __sym__0__8256595161360863541, fluidb_string<55> __sym__0__2419198459165298437, fluidb_string<25> __sym__0___45_5966236615078693830, fluidb_string<7> __sym__0___45_1194673352705657408, fluidb_string<10> __sym__0__1650700319641029258, fluidb_string<11> __sym__0___45_5413060736990914554, fluidb_string<25> __sym__0__5395318601550732180, unsigned __sym__0___45_4041750310509064417, fluidb_string<10> __sym__0___45_6998494795726951254) : sym__0__751349491586783291(__sym__0__751349491586783291), sym__0__354510891937955499(__sym__0__354510891937955499), sym__0__8685870419913255269(__sym__0__8685870419913255269), sym__0___45_1685896364158718066(__sym__0___45_1685896364158718066), sym__0___45_5677596107407519400(__sym__0___45_5677596107407519400), sym__0__861815074445021598(__sym__0__861815074445021598), sym__0___45_3872891870093673981(__sym__0___45_3872891870093673981), sym__0___45_6241898377327069772(__sym__0___45_6241898377327069772), sym__0__642504737957706403(__sym__0__642504737957706403), sym__0___45_1374976708771691557(__sym__0___45_1374976708771691557), sym__0__2339057656064903933(__sym__0__2339057656064903933), sym__0__89048769271346350(__sym__0__89048769271346350), sym__0__6426708041019551759(__sym__0__6426708041019551759), sym__0__7008835179244010327(__sym__0__7008835179244010327), sym__0___45_4323628884972846406(__sym__0___45_4323628884972846406), sym__0__7828159490610995250(__sym__0__7828159490610995250), sym__0__2257718864796675488(__sym__0__2257718864796675488), sym__0__730109080165272259(__sym__0__730109080165272259), sym__0___45_8476449300885475093(__sym__0___45_8476449300885475093), sym__0___45_991149214691090239(__sym__0___45_991149214691090239), sym__0___45_2212122284055066105(__sym__0___45_2212122284055066105), sym__0___45_2044948362686327715(__sym__0___45_2044948362686327715), sym__0__3321043677072918300(__sym__0__3321043677072918300), sym__0___45_226399795464070293(__sym__0___45_226399795464070293), sym__0__7848733459393176335(__sym__0__7848733459393176335), sym__0___45_4488020782418924777(__sym__0___45_4488020782418924777), sym__0___45_6919306960004101059(__sym__0___45_6919306960004101059), sym__0__6018430784935315013(__sym__0__6018430784935315013), sym__0___45_140673424384154541(__sym__0___45_140673424384154541), sym__0___45_6038639548629345048(__sym__0___45_6038639548629345048), sym__0__1559790869847058897(__sym__0__1559790869847058897), sym__0___45_4352805721407037080(__sym__0___45_4352805721407037080), sym__0__4062351712071543146(__sym__0__4062351712071543146), sym__0___45_6018880488104713787(__sym__0___45_6018880488104713787), sym__0___45_6835853099986992139(__sym__0___45_6835853099986992139), sym__0___45_8089668391442329833(__sym__0___45_8089668391442329833), sym__0___45_8717135147929398223(__sym__0___45_8717135147929398223), sym__0___45_7475819144393673057(__sym__0___45_7475819144393673057), sym__0__9142595129731966875(__sym__0__9142595129731966875), sym__0__2065559644984295980(__sym__0__2065559644984295980), sym__0__2460723449183532278(__sym__0__2460723449183532278), sym__0__470592171585028734(__sym__0__470592171585028734), sym__0__4356580487975201936(__sym__0__4356580487975201936), sym__0___45_9184441323043515765(__sym__0___45_9184441323043515765), sym__0__6618707433631942345(__sym__0__6618707433631942345), sym__0___45_6275907539891917001(__sym__0___45_6275907539891917001), sym__0___45_2055641227140571803(__sym__0___45_2055641227140571803), sym__0__2004584544714042516(__sym__0__2004584544714042516), sym__0__4525776177764059147(__sym__0__4525776177764059147), sym__0__8256595161360863541(__sym__0__8256595161360863541), sym__0__2419198459165298437(__sym__0__2419198459165298437), sym__0___45_5966236615078693830(__sym__0___45_5966236615078693830), sym__0___45_1194673352705657408(__sym__0___45_1194673352705657408), sym__0__1650700319641029258(__sym__0__1650700319641029258), sym__0___45_5413060736990914554(__sym__0___45_5413060736990914554), sym__0__5395318601550732180(__sym__0__5395318601550732180), sym__0___45_4041750310509064417(__sym__0___45_4041750310509064417), sym__0___45_6998494795726951254(__sym__0___45_6998494795726951254)
  {
  }
  Record49() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__751349491586783291 << " | " << arrToString(sym__0__354510891937955499) << " | " << arrToString(sym__0__8685870419913255269) << " | " << arrToString(sym__0___45_1685896364158718066) << " | " << sym__0___45_5677596107407519400 << " | " << sym__0__861815074445021598 << " | " << arrToString(sym__0___45_3872891870093673981) << " | " << sym__0___45_6241898377327069772 << " | " << sym__0__642504737957706403 << " | " << sym__0___45_1374976708771691557 << " | " << sym__0__2339057656064903933 << " | " << sym__0__89048769271346350 << " | " << arrToString(sym__0__6426708041019551759) << " | " << arrToString(sym__0__7008835179244010327) << " | " << arrToString(sym__0___45_4323628884972846406) << " | " << arrToString(sym__0__7828159490610995250) << " | " << arrToString(sym__0__2257718864796675488) << " | " << sym__0__730109080165272259 << " | " << arrToString(sym__0___45_8476449300885475093) << " | " << arrToString(sym__0___45_991149214691090239) << " | " << arrToString(sym__0___45_2212122284055066105) << " | " << arrToString(sym__0___45_2044948362686327715) << " | " << arrToString(sym__0__3321043677072918300) << " | " << arrToString(sym__0___45_226399795464070293) << " | " << arrToString(sym__0__7848733459393176335) << " | " << sym__0___45_4488020782418924777 << " | " << sym__0___45_6919306960004101059 << " | " << sym__0__6018430784935315013 << " | " << sym__0___45_140673424384154541 << " | " << sym__0___45_6038639548629345048 << " | " << sym__0__1559790869847058897 << " | " << arrToString(sym__0___45_4352805721407037080) << " | " << sym__0__4062351712071543146 << " | " << arrToString(sym__0___45_6018880488104713787) << " | " << sym__0___45_6835853099986992139 << " | " << sym__0___45_8089668391442329833 << " | " << sym__0___45_8717135147929398223 << " | " << sym__0___45_7475819144393673057 << " | " << sym__0__9142595129731966875 << " | " << sym__0__2065559644984295980 << " | " << sym__0__2460723449183532278 << " | " << arrToString(sym__0__470592171585028734) << " | " << sym__0__4356580487975201936 << " | " << arrToString(sym__0___45_9184441323043515765) << " | " << arrToString(sym__0__6618707433631942345) << " | " << arrToString(sym__0___45_6275907539891917001) << " | " << arrToString(sym__0___45_2055641227140571803) << " | " << arrToString(sym__0__2004584544714042516) << " | " << arrToString(sym__0__4525776177764059147) << " | " << sym__0__8256595161360863541 << " | " << arrToString(sym__0__2419198459165298437) << " | " << arrToString(sym__0___45_5966236615078693830) << " | " << arrToString(sym__0___45_1194673352705657408) << " | " << arrToString(sym__0__1650700319641029258) << " | " << arrToString(sym__0___45_5413060736990914554) << " | " << arrToString(sym__0__5395318601550732180) << " | " << sym__0___45_4041750310509064417 << " | " << arrToString(sym__0___45_6998494795726951254);
    return o.str();
  }
  bool operator <(const Record49& otherRec) const{
    return (otherRec.sym__0__751349491586783291 < sym__0__751349491586783291 && (otherRec.sym__0__354510891937955499 < sym__0__354510891937955499 && (otherRec.sym__0__8685870419913255269 < sym__0__8685870419913255269 && (otherRec.sym__0___45_1685896364158718066 < sym__0___45_1685896364158718066 && (otherRec.sym__0___45_5677596107407519400 < sym__0___45_5677596107407519400 && (otherRec.sym__0__861815074445021598 < sym__0__861815074445021598 && (otherRec.sym__0___45_3872891870093673981 < sym__0___45_3872891870093673981 && (otherRec.sym__0___45_6241898377327069772 < sym__0___45_6241898377327069772 && (otherRec.sym__0__642504737957706403 < sym__0__642504737957706403 && (otherRec.sym__0___45_1374976708771691557 < sym__0___45_1374976708771691557 && (otherRec.sym__0__2339057656064903933 < sym__0__2339057656064903933 && (otherRec.sym__0__89048769271346350 < sym__0__89048769271346350 && (otherRec.sym__0__6426708041019551759 < sym__0__6426708041019551759 && (otherRec.sym__0__7008835179244010327 < sym__0__7008835179244010327 && (otherRec.sym__0___45_4323628884972846406 < sym__0___45_4323628884972846406 && (otherRec.sym__0__7828159490610995250 < sym__0__7828159490610995250 && (otherRec.sym__0__2257718864796675488 < sym__0__2257718864796675488 && (otherRec.sym__0__730109080165272259 < sym__0__730109080165272259 && (otherRec.sym__0___45_8476449300885475093 < sym__0___45_8476449300885475093 && (otherRec.sym__0___45_991149214691090239 < sym__0___45_991149214691090239 && (otherRec.sym__0___45_2212122284055066105 < sym__0___45_2212122284055066105 && (otherRec.sym__0___45_2044948362686327715 < sym__0___45_2044948362686327715 && (otherRec.sym__0__3321043677072918300 < sym__0__3321043677072918300 && (otherRec.sym__0___45_226399795464070293 < sym__0___45_226399795464070293 && (otherRec.sym__0__7848733459393176335 < sym__0__7848733459393176335 && (otherRec.sym__0___45_4488020782418924777 < sym__0___45_4488020782418924777 && (otherRec.sym__0___45_6919306960004101059 < sym__0___45_6919306960004101059 && (otherRec.sym__0__6018430784935315013 < sym__0__6018430784935315013 && (otherRec.sym__0___45_140673424384154541 < sym__0___45_140673424384154541 && (otherRec.sym__0___45_6038639548629345048 < sym__0___45_6038639548629345048 && (otherRec.sym__0__1559790869847058897 < sym__0__1559790869847058897 && (otherRec.sym__0___45_4352805721407037080 < sym__0___45_4352805721407037080 && (otherRec.sym__0__4062351712071543146 < sym__0__4062351712071543146 && (otherRec.sym__0___45_6018880488104713787 < sym__0___45_6018880488104713787 && (otherRec.sym__0___45_6835853099986992139 < sym__0___45_6835853099986992139 && (otherRec.sym__0___45_8089668391442329833 < sym__0___45_8089668391442329833 && (otherRec.sym__0___45_8717135147929398223 < sym__0___45_8717135147929398223 && (otherRec.sym__0___45_7475819144393673057 < sym__0___45_7475819144393673057 && (otherRec.sym__0__9142595129731966875 < sym__0__9142595129731966875 && (otherRec.sym__0__2065559644984295980 < sym__0__2065559644984295980 && (otherRec.sym__0__2460723449183532278 < sym__0__2460723449183532278 && (otherRec.sym__0__470592171585028734 < sym__0__470592171585028734 && (otherRec.sym__0__4356580487975201936 < sym__0__4356580487975201936 && (otherRec.sym__0___45_9184441323043515765 < sym__0___45_9184441323043515765 && (otherRec.sym__0__6618707433631942345 < sym__0__6618707433631942345 && (otherRec.sym__0___45_6275907539891917001 < sym__0___45_6275907539891917001 && (otherRec.sym__0___45_2055641227140571803 < sym__0___45_2055641227140571803 && (otherRec.sym__0__2004584544714042516 < sym__0__2004584544714042516 && (otherRec.sym__0__4525776177764059147 < sym__0__4525776177764059147 && (otherRec.sym__0__8256595161360863541 < sym__0__8256595161360863541 && (otherRec.sym__0__2419198459165298437 < sym__0__2419198459165298437 && (otherRec.sym__0___45_5966236615078693830 < sym__0___45_5966236615078693830 && (otherRec.sym__0___45_1194673352705657408 < sym__0___45_1194673352705657408 && (otherRec.sym__0__1650700319641029258 < sym__0__1650700319641029258 && (otherRec.sym__0___45_5413060736990914554 < sym__0___45_5413060736990914554 && (otherRec.sym__0__5395318601550732180 < sym__0__5395318601550732180 && (otherRec.sym__0___45_4041750310509064417 < sym__0___45_4041750310509064417 && otherRec.sym__0___45_6998494795726951254 < sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record49& otherRec) const{
    return (otherRec.sym__0__751349491586783291 == sym__0__751349491586783291 && (otherRec.sym__0__354510891937955499 == sym__0__354510891937955499 && (otherRec.sym__0__8685870419913255269 == sym__0__8685870419913255269 && (otherRec.sym__0___45_1685896364158718066 == sym__0___45_1685896364158718066 && (otherRec.sym__0___45_5677596107407519400 == sym__0___45_5677596107407519400 && (otherRec.sym__0__861815074445021598 == sym__0__861815074445021598 && (otherRec.sym__0___45_3872891870093673981 == sym__0___45_3872891870093673981 && (otherRec.sym__0___45_6241898377327069772 == sym__0___45_6241898377327069772 && (otherRec.sym__0__642504737957706403 == sym__0__642504737957706403 && (otherRec.sym__0___45_1374976708771691557 == sym__0___45_1374976708771691557 && (otherRec.sym__0__2339057656064903933 == sym__0__2339057656064903933 && (otherRec.sym__0__89048769271346350 == sym__0__89048769271346350 && (otherRec.sym__0__6426708041019551759 == sym__0__6426708041019551759 && (otherRec.sym__0__7008835179244010327 == sym__0__7008835179244010327 && (otherRec.sym__0___45_4323628884972846406 == sym__0___45_4323628884972846406 && (otherRec.sym__0__7828159490610995250 == sym__0__7828159490610995250 && (otherRec.sym__0__2257718864796675488 == sym__0__2257718864796675488 && (otherRec.sym__0__730109080165272259 == sym__0__730109080165272259 && (otherRec.sym__0___45_8476449300885475093 == sym__0___45_8476449300885475093 && (otherRec.sym__0___45_991149214691090239 == sym__0___45_991149214691090239 && (otherRec.sym__0___45_2212122284055066105 == sym__0___45_2212122284055066105 && (otherRec.sym__0___45_2044948362686327715 == sym__0___45_2044948362686327715 && (otherRec.sym__0__3321043677072918300 == sym__0__3321043677072918300 && (otherRec.sym__0___45_226399795464070293 == sym__0___45_226399795464070293 && (otherRec.sym__0__7848733459393176335 == sym__0__7848733459393176335 && (otherRec.sym__0___45_4488020782418924777 == sym__0___45_4488020782418924777 && (otherRec.sym__0___45_6919306960004101059 == sym__0___45_6919306960004101059 && (otherRec.sym__0__6018430784935315013 == sym__0__6018430784935315013 && (otherRec.sym__0___45_140673424384154541 == sym__0___45_140673424384154541 && (otherRec.sym__0___45_6038639548629345048 == sym__0___45_6038639548629345048 && (otherRec.sym__0__1559790869847058897 == sym__0__1559790869847058897 && (otherRec.sym__0___45_4352805721407037080 == sym__0___45_4352805721407037080 && (otherRec.sym__0__4062351712071543146 == sym__0__4062351712071543146 && (otherRec.sym__0___45_6018880488104713787 == sym__0___45_6018880488104713787 && (otherRec.sym__0___45_6835853099986992139 == sym__0___45_6835853099986992139 && (otherRec.sym__0___45_8089668391442329833 == sym__0___45_8089668391442329833 && (otherRec.sym__0___45_8717135147929398223 == sym__0___45_8717135147929398223 && (otherRec.sym__0___45_7475819144393673057 == sym__0___45_7475819144393673057 && (otherRec.sym__0__9142595129731966875 == sym__0__9142595129731966875 && (otherRec.sym__0__2065559644984295980 == sym__0__2065559644984295980 && (otherRec.sym__0__2460723449183532278 == sym__0__2460723449183532278 && (otherRec.sym__0__470592171585028734 == sym__0__470592171585028734 && (otherRec.sym__0__4356580487975201936 == sym__0__4356580487975201936 && (otherRec.sym__0___45_9184441323043515765 == sym__0___45_9184441323043515765 && (otherRec.sym__0__6618707433631942345 == sym__0__6618707433631942345 && (otherRec.sym__0___45_6275907539891917001 == sym__0___45_6275907539891917001 && (otherRec.sym__0___45_2055641227140571803 == sym__0___45_2055641227140571803 && (otherRec.sym__0__2004584544714042516 == sym__0__2004584544714042516 && (otherRec.sym__0__4525776177764059147 == sym__0__4525776177764059147 && (otherRec.sym__0__8256595161360863541 == sym__0__8256595161360863541 && (otherRec.sym__0__2419198459165298437 == sym__0__2419198459165298437 && (otherRec.sym__0___45_5966236615078693830 == sym__0___45_5966236615078693830 && (otherRec.sym__0___45_1194673352705657408 == sym__0___45_1194673352705657408 && (otherRec.sym__0__1650700319641029258 == sym__0__1650700319641029258 && (otherRec.sym__0___45_5413060736990914554 == sym__0___45_5413060736990914554 && (otherRec.sym__0__5395318601550732180 == sym__0__5395318601550732180 && (otherRec.sym__0___45_4041750310509064417 == sym__0___45_4041750310509064417 && otherRec.sym__0___45_6998494795726951254 == sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record49& otherRec) const{
    return (otherRec.sym__0__751349491586783291 != sym__0__751349491586783291 || (otherRec.sym__0__354510891937955499 != sym__0__354510891937955499 || (otherRec.sym__0__8685870419913255269 != sym__0__8685870419913255269 || (otherRec.sym__0___45_1685896364158718066 != sym__0___45_1685896364158718066 || (otherRec.sym__0___45_5677596107407519400 != sym__0___45_5677596107407519400 || (otherRec.sym__0__861815074445021598 != sym__0__861815074445021598 || (otherRec.sym__0___45_3872891870093673981 != sym__0___45_3872891870093673981 || (otherRec.sym__0___45_6241898377327069772 != sym__0___45_6241898377327069772 || (otherRec.sym__0__642504737957706403 != sym__0__642504737957706403 || (otherRec.sym__0___45_1374976708771691557 != sym__0___45_1374976708771691557 || (otherRec.sym__0__2339057656064903933 != sym__0__2339057656064903933 || (otherRec.sym__0__89048769271346350 != sym__0__89048769271346350 || (otherRec.sym__0__6426708041019551759 != sym__0__6426708041019551759 || (otherRec.sym__0__7008835179244010327 != sym__0__7008835179244010327 || (otherRec.sym__0___45_4323628884972846406 != sym__0___45_4323628884972846406 || (otherRec.sym__0__7828159490610995250 != sym__0__7828159490610995250 || (otherRec.sym__0__2257718864796675488 != sym__0__2257718864796675488 || (otherRec.sym__0__730109080165272259 != sym__0__730109080165272259 || (otherRec.sym__0___45_8476449300885475093 != sym__0___45_8476449300885475093 || (otherRec.sym__0___45_991149214691090239 != sym__0___45_991149214691090239 || (otherRec.sym__0___45_2212122284055066105 != sym__0___45_2212122284055066105 || (otherRec.sym__0___45_2044948362686327715 != sym__0___45_2044948362686327715 || (otherRec.sym__0__3321043677072918300 != sym__0__3321043677072918300 || (otherRec.sym__0___45_226399795464070293 != sym__0___45_226399795464070293 || (otherRec.sym__0__7848733459393176335 != sym__0__7848733459393176335 || (otherRec.sym__0___45_4488020782418924777 != sym__0___45_4488020782418924777 || (otherRec.sym__0___45_6919306960004101059 != sym__0___45_6919306960004101059 || (otherRec.sym__0__6018430784935315013 != sym__0__6018430784935315013 || (otherRec.sym__0___45_140673424384154541 != sym__0___45_140673424384154541 || (otherRec.sym__0___45_6038639548629345048 != sym__0___45_6038639548629345048 || (otherRec.sym__0__1559790869847058897 != sym__0__1559790869847058897 || (otherRec.sym__0___45_4352805721407037080 != sym__0___45_4352805721407037080 || (otherRec.sym__0__4062351712071543146 != sym__0__4062351712071543146 || (otherRec.sym__0___45_6018880488104713787 != sym__0___45_6018880488104713787 || (otherRec.sym__0___45_6835853099986992139 != sym__0___45_6835853099986992139 || (otherRec.sym__0___45_8089668391442329833 != sym__0___45_8089668391442329833 || (otherRec.sym__0___45_8717135147929398223 != sym__0___45_8717135147929398223 || (otherRec.sym__0___45_7475819144393673057 != sym__0___45_7475819144393673057 || (otherRec.sym__0__9142595129731966875 != sym__0__9142595129731966875 || (otherRec.sym__0__2065559644984295980 != sym__0__2065559644984295980 || (otherRec.sym__0__2460723449183532278 != sym__0__2460723449183532278 || (otherRec.sym__0__470592171585028734 != sym__0__470592171585028734 || (otherRec.sym__0__4356580487975201936 != sym__0__4356580487975201936 || (otherRec.sym__0___45_9184441323043515765 != sym__0___45_9184441323043515765 || (otherRec.sym__0__6618707433631942345 != sym__0__6618707433631942345 || (otherRec.sym__0___45_6275907539891917001 != sym__0___45_6275907539891917001 || (otherRec.sym__0___45_2055641227140571803 != sym__0___45_2055641227140571803 || (otherRec.sym__0__2004584544714042516 != sym__0__2004584544714042516 || (otherRec.sym__0__4525776177764059147 != sym__0__4525776177764059147 || (otherRec.sym__0__8256595161360863541 != sym__0__8256595161360863541 || (otherRec.sym__0__2419198459165298437 != sym__0__2419198459165298437 || (otherRec.sym__0___45_5966236615078693830 != sym__0___45_5966236615078693830 || (otherRec.sym__0___45_1194673352705657408 != sym__0___45_1194673352705657408 || (otherRec.sym__0__1650700319641029258 != sym__0__1650700319641029258 || (otherRec.sym__0___45_5413060736990914554 != sym__0___45_5413060736990914554 || (otherRec.sym__0__5395318601550732180 != sym__0__5395318601550732180 || (otherRec.sym__0___45_4041750310509064417 != sym__0___45_4041750310509064417 || otherRec.sym__0___45_6998494795726951254 != sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__751349491586783291;
  fluidb_string<18> sym__0__354510891937955499;
  fluidb_string<9> sym__0__8685870419913255269;
  fluidb_string<9> sym__0___45_1685896364158718066;
  unsigned sym__0___45_5677596107407519400;
  unsigned sym__0__861815074445021598;
  fluidb_string<7> sym__0___45_3872891870093673981;
  unsigned sym__0___45_6241898377327069772;
  unsigned sym__0__642504737957706403;
  unsigned sym__0___45_1374976708771691557;
  unsigned sym__0__2339057656064903933;
  unsigned sym__0__89048769271346350;
  fluidb_string<15> sym__0__6426708041019551759;
  fluidb_string<2> sym__0__7008835179244010327;
  fluidb_string<2> sym__0___45_4323628884972846406;
  fluidb_string<2> sym__0__7828159490610995250;
  fluidb_string<2> sym__0__2257718864796675488;
  unsigned sym__0__730109080165272259;
  fluidb_string<18> sym__0___45_8476449300885475093;
  fluidb_string<40> sym__0___45_991149214691090239;
  fluidb_string<11> sym__0___45_2212122284055066105;
  fluidb_string<15> sym__0___45_2044948362686327715;
  fluidb_string<13> sym__0__3321043677072918300;
  fluidb_string<15> sym__0___45_226399795464070293;
  fluidb_string<21> sym__0__7848733459393176335;
  unsigned sym__0___45_4488020782418924777;
  int sym__0___45_6919306960004101059;
  unsigned sym__0__6018430784935315013;
  unsigned sym__0___45_140673424384154541;
  unsigned sym__0___45_6038639548629345048;
  unsigned sym__0__1559790869847058897;
  fluidb_string<21> sym__0___45_4352805721407037080;
  unsigned sym__0__4062351712071543146;
  fluidb_string<10> sym__0___45_6018880488104713787;
  unsigned sym__0___45_6835853099986992139;
  double sym__0___45_8089668391442329833;
  unsigned sym__0___45_8717135147929398223;
  double sym__0___45_7475819144393673057;
  unsigned sym__0__9142595129731966875;
  unsigned sym__0__2065559644984295980;
  double sym__0__2460723449183532278;
  fluidb_string<13> sym__0__470592171585028734;
  unsigned sym__0__4356580487975201936;
  fluidb_string<25> sym__0___45_9184441323043515765;
  fluidb_string<40> sym__0__6618707433631942345;
  fluidb_string<16> sym__0___45_6275907539891917001;
  fluidb_string<16> sym__0___45_2055641227140571803;
  fluidb_string<13> sym__0__2004584544714042516;
  fluidb_string<15> sym__0__4525776177764059147;
  unsigned sym__0__8256595161360863541;
  fluidb_string<55> sym__0__2419198459165298437;
  fluidb_string<25> sym__0___45_5966236615078693830;
  fluidb_string<7> sym__0___45_1194673352705657408;
  fluidb_string<10> sym__0__1650700319641029258;
  fluidb_string<11> sym__0___45_5413060736990914554;
  fluidb_string<25> sym__0__5395318601550732180;
  unsigned sym__0___45_4041750310509064417;
  fluidb_string<10> sym__0___45_6998494795726951254;
 private:
};


class Record29 {
 public:
  Record29(unsigned __sym__0___45_8906884911160954364, fluidb_string<18> __sym__0__2799000292371979828, fluidb_string<9> __sym__0__8867920250735627162, fluidb_string<9> __sym__0___45_7576867150402000331, unsigned __sym__0___45_9125225545914939837, unsigned __sym__0__4589167397936411269, fluidb_string<7> __sym__0__8920142377705747532, unsigned __sym__0___45_4196858516486091897, unsigned __sym__0__1195773552714325740, unsigned __sym__0___45_38686532604732124, unsigned __sym__0__1274631840214437554, unsigned __sym__0__8445040522489018709, fluidb_string<15> __sym__0__2331348265799254080, fluidb_string<2> __sym__0___45_1510963300986711992, fluidb_string<2> __sym__0__5289830658136776009, fluidb_string<2> __sym__0__7499328126409916481, fluidb_string<2> __sym__0__7533033195406205003, unsigned __sym__0___45_6428147039213761908, fluidb_string<18> __sym__0__871736690247302132, fluidb_string<40> __sym__0___45_8362046498826819058, fluidb_string<11> __sym__0___45_7133132985918421512, fluidb_string<15> __sym__0___45_3959357838844936686, fluidb_string<13> __sym__0___45_7197031512662271633, fluidb_string<15> __sym__0__8583356070728849524, fluidb_string<21> __sym__0__1967597999057704256, unsigned __sym__0__5132421367677851272, int __sym__0__5071922315287763570, unsigned __sym__0___45_3637991104308692870, unsigned __sym__0__4948888373840408220, unsigned __sym__0___45_7808961130681314221, unsigned __sym__0__1746575405116951454, fluidb_string<21> __sym__0__2153939297276247251, unsigned __sym__0__5199185301403060729, fluidb_string<10> __sym__0__1712959636608595962, unsigned __sym__0___45_1741951889491243926, double __sym__0__227891603776809608, unsigned __sym__0__6207099447983295614, double __sym__0__335880342687986000, unsigned __sym__0__2784917890152007524, unsigned __sym__0___45_5840348331744817409, double __sym__0__3675426241071643741, fluidb_string<13> __sym__0___45_1268803172874807067, unsigned __sym__0__3110451695433832699, fluidb_string<25> __sym__0__5854013247755242004, fluidb_string<40> __sym__0___45_1478737863530599082, fluidb_string<16> __sym__0___45_6827442181954889560, fluidb_string<16> __sym__0__6943297173895896986, fluidb_string<13> __sym__0__5526031557462726759, fluidb_string<15> __sym__0__2016251883409854356) : sym__0___45_8906884911160954364(__sym__0___45_8906884911160954364), sym__0__2799000292371979828(__sym__0__2799000292371979828), sym__0__8867920250735627162(__sym__0__8867920250735627162), sym__0___45_7576867150402000331(__sym__0___45_7576867150402000331), sym__0___45_9125225545914939837(__sym__0___45_9125225545914939837), sym__0__4589167397936411269(__sym__0__4589167397936411269), sym__0__8920142377705747532(__sym__0__8920142377705747532), sym__0___45_4196858516486091897(__sym__0___45_4196858516486091897), sym__0__1195773552714325740(__sym__0__1195773552714325740), sym__0___45_38686532604732124(__sym__0___45_38686532604732124), sym__0__1274631840214437554(__sym__0__1274631840214437554), sym__0__8445040522489018709(__sym__0__8445040522489018709), sym__0__2331348265799254080(__sym__0__2331348265799254080), sym__0___45_1510963300986711992(__sym__0___45_1510963300986711992), sym__0__5289830658136776009(__sym__0__5289830658136776009), sym__0__7499328126409916481(__sym__0__7499328126409916481), sym__0__7533033195406205003(__sym__0__7533033195406205003), sym__0___45_6428147039213761908(__sym__0___45_6428147039213761908), sym__0__871736690247302132(__sym__0__871736690247302132), sym__0___45_8362046498826819058(__sym__0___45_8362046498826819058), sym__0___45_7133132985918421512(__sym__0___45_7133132985918421512), sym__0___45_3959357838844936686(__sym__0___45_3959357838844936686), sym__0___45_7197031512662271633(__sym__0___45_7197031512662271633), sym__0__8583356070728849524(__sym__0__8583356070728849524), sym__0__1967597999057704256(__sym__0__1967597999057704256), sym__0__5132421367677851272(__sym__0__5132421367677851272), sym__0__5071922315287763570(__sym__0__5071922315287763570), sym__0___45_3637991104308692870(__sym__0___45_3637991104308692870), sym__0__4948888373840408220(__sym__0__4948888373840408220), sym__0___45_7808961130681314221(__sym__0___45_7808961130681314221), sym__0__1746575405116951454(__sym__0__1746575405116951454), sym__0__2153939297276247251(__sym__0__2153939297276247251), sym__0__5199185301403060729(__sym__0__5199185301403060729), sym__0__1712959636608595962(__sym__0__1712959636608595962), sym__0___45_1741951889491243926(__sym__0___45_1741951889491243926), sym__0__227891603776809608(__sym__0__227891603776809608), sym__0__6207099447983295614(__sym__0__6207099447983295614), sym__0__335880342687986000(__sym__0__335880342687986000), sym__0__2784917890152007524(__sym__0__2784917890152007524), sym__0___45_5840348331744817409(__sym__0___45_5840348331744817409), sym__0__3675426241071643741(__sym__0__3675426241071643741), sym__0___45_1268803172874807067(__sym__0___45_1268803172874807067), sym__0__3110451695433832699(__sym__0__3110451695433832699), sym__0__5854013247755242004(__sym__0__5854013247755242004), sym__0___45_1478737863530599082(__sym__0___45_1478737863530599082), sym__0___45_6827442181954889560(__sym__0___45_6827442181954889560), sym__0__6943297173895896986(__sym__0__6943297173895896986), sym__0__5526031557462726759(__sym__0__5526031557462726759), sym__0__2016251883409854356(__sym__0__2016251883409854356)
  {
  }
  Record29() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_8906884911160954364 << " | " << arrToString(sym__0__2799000292371979828) << " | " << arrToString(sym__0__8867920250735627162) << " | " << arrToString(sym__0___45_7576867150402000331) << " | " << sym__0___45_9125225545914939837 << " | " << sym__0__4589167397936411269 << " | " << arrToString(sym__0__8920142377705747532) << " | " << sym__0___45_4196858516486091897 << " | " << sym__0__1195773552714325740 << " | " << sym__0___45_38686532604732124 << " | " << sym__0__1274631840214437554 << " | " << sym__0__8445040522489018709 << " | " << arrToString(sym__0__2331348265799254080) << " | " << arrToString(sym__0___45_1510963300986711992) << " | " << arrToString(sym__0__5289830658136776009) << " | " << arrToString(sym__0__7499328126409916481) << " | " << arrToString(sym__0__7533033195406205003) << " | " << sym__0___45_6428147039213761908 << " | " << arrToString(sym__0__871736690247302132) << " | " << arrToString(sym__0___45_8362046498826819058) << " | " << arrToString(sym__0___45_7133132985918421512) << " | " << arrToString(sym__0___45_3959357838844936686) << " | " << arrToString(sym__0___45_7197031512662271633) << " | " << arrToString(sym__0__8583356070728849524) << " | " << arrToString(sym__0__1967597999057704256) << " | " << sym__0__5132421367677851272 << " | " << sym__0__5071922315287763570 << " | " << sym__0___45_3637991104308692870 << " | " << sym__0__4948888373840408220 << " | " << sym__0___45_7808961130681314221 << " | " << sym__0__1746575405116951454 << " | " << arrToString(sym__0__2153939297276247251) << " | " << sym__0__5199185301403060729 << " | " << arrToString(sym__0__1712959636608595962) << " | " << sym__0___45_1741951889491243926 << " | " << sym__0__227891603776809608 << " | " << sym__0__6207099447983295614 << " | " << sym__0__335880342687986000 << " | " << sym__0__2784917890152007524 << " | " << sym__0___45_5840348331744817409 << " | " << sym__0__3675426241071643741 << " | " << arrToString(sym__0___45_1268803172874807067) << " | " << sym__0__3110451695433832699 << " | " << arrToString(sym__0__5854013247755242004) << " | " << arrToString(sym__0___45_1478737863530599082) << " | " << arrToString(sym__0___45_6827442181954889560) << " | " << arrToString(sym__0__6943297173895896986) << " | " << arrToString(sym__0__5526031557462726759) << " | " << arrToString(sym__0__2016251883409854356);
    return o.str();
  }
  bool operator <(const Record29& otherRec) const{
    return (otherRec.sym__0___45_8906884911160954364 < sym__0___45_8906884911160954364 && (otherRec.sym__0__2799000292371979828 < sym__0__2799000292371979828 && (otherRec.sym__0__8867920250735627162 < sym__0__8867920250735627162 && (otherRec.sym__0___45_7576867150402000331 < sym__0___45_7576867150402000331 && (otherRec.sym__0___45_9125225545914939837 < sym__0___45_9125225545914939837 && (otherRec.sym__0__4589167397936411269 < sym__0__4589167397936411269 && (otherRec.sym__0__8920142377705747532 < sym__0__8920142377705747532 && (otherRec.sym__0___45_4196858516486091897 < sym__0___45_4196858516486091897 && (otherRec.sym__0__1195773552714325740 < sym__0__1195773552714325740 && (otherRec.sym__0___45_38686532604732124 < sym__0___45_38686532604732124 && (otherRec.sym__0__1274631840214437554 < sym__0__1274631840214437554 && (otherRec.sym__0__8445040522489018709 < sym__0__8445040522489018709 && (otherRec.sym__0__2331348265799254080 < sym__0__2331348265799254080 && (otherRec.sym__0___45_1510963300986711992 < sym__0___45_1510963300986711992 && (otherRec.sym__0__5289830658136776009 < sym__0__5289830658136776009 && (otherRec.sym__0__7499328126409916481 < sym__0__7499328126409916481 && (otherRec.sym__0__7533033195406205003 < sym__0__7533033195406205003 && (otherRec.sym__0___45_6428147039213761908 < sym__0___45_6428147039213761908 && (otherRec.sym__0__871736690247302132 < sym__0__871736690247302132 && (otherRec.sym__0___45_8362046498826819058 < sym__0___45_8362046498826819058 && (otherRec.sym__0___45_7133132985918421512 < sym__0___45_7133132985918421512 && (otherRec.sym__0___45_3959357838844936686 < sym__0___45_3959357838844936686 && (otherRec.sym__0___45_7197031512662271633 < sym__0___45_7197031512662271633 && (otherRec.sym__0__8583356070728849524 < sym__0__8583356070728849524 && (otherRec.sym__0__1967597999057704256 < sym__0__1967597999057704256 && (otherRec.sym__0__5132421367677851272 < sym__0__5132421367677851272 && (otherRec.sym__0__5071922315287763570 < sym__0__5071922315287763570 && (otherRec.sym__0___45_3637991104308692870 < sym__0___45_3637991104308692870 && (otherRec.sym__0__4948888373840408220 < sym__0__4948888373840408220 && (otherRec.sym__0___45_7808961130681314221 < sym__0___45_7808961130681314221 && (otherRec.sym__0__1746575405116951454 < sym__0__1746575405116951454 && (otherRec.sym__0__2153939297276247251 < sym__0__2153939297276247251 && (otherRec.sym__0__5199185301403060729 < sym__0__5199185301403060729 && (otherRec.sym__0__1712959636608595962 < sym__0__1712959636608595962 && (otherRec.sym__0___45_1741951889491243926 < sym__0___45_1741951889491243926 && (otherRec.sym__0__227891603776809608 < sym__0__227891603776809608 && (otherRec.sym__0__6207099447983295614 < sym__0__6207099447983295614 && (otherRec.sym__0__335880342687986000 < sym__0__335880342687986000 && (otherRec.sym__0__2784917890152007524 < sym__0__2784917890152007524 && (otherRec.sym__0___45_5840348331744817409 < sym__0___45_5840348331744817409 && (otherRec.sym__0__3675426241071643741 < sym__0__3675426241071643741 && (otherRec.sym__0___45_1268803172874807067 < sym__0___45_1268803172874807067 && (otherRec.sym__0__3110451695433832699 < sym__0__3110451695433832699 && (otherRec.sym__0__5854013247755242004 < sym__0__5854013247755242004 && (otherRec.sym__0___45_1478737863530599082 < sym__0___45_1478737863530599082 && (otherRec.sym__0___45_6827442181954889560 < sym__0___45_6827442181954889560 && (otherRec.sym__0__6943297173895896986 < sym__0__6943297173895896986 && (otherRec.sym__0__5526031557462726759 < sym__0__5526031557462726759 && otherRec.sym__0__2016251883409854356 < sym__0__2016251883409854356))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record29& otherRec) const{
    return (otherRec.sym__0___45_8906884911160954364 == sym__0___45_8906884911160954364 && (otherRec.sym__0__2799000292371979828 == sym__0__2799000292371979828 && (otherRec.sym__0__8867920250735627162 == sym__0__8867920250735627162 && (otherRec.sym__0___45_7576867150402000331 == sym__0___45_7576867150402000331 && (otherRec.sym__0___45_9125225545914939837 == sym__0___45_9125225545914939837 && (otherRec.sym__0__4589167397936411269 == sym__0__4589167397936411269 && (otherRec.sym__0__8920142377705747532 == sym__0__8920142377705747532 && (otherRec.sym__0___45_4196858516486091897 == sym__0___45_4196858516486091897 && (otherRec.sym__0__1195773552714325740 == sym__0__1195773552714325740 && (otherRec.sym__0___45_38686532604732124 == sym__0___45_38686532604732124 && (otherRec.sym__0__1274631840214437554 == sym__0__1274631840214437554 && (otherRec.sym__0__8445040522489018709 == sym__0__8445040522489018709 && (otherRec.sym__0__2331348265799254080 == sym__0__2331348265799254080 && (otherRec.sym__0___45_1510963300986711992 == sym__0___45_1510963300986711992 && (otherRec.sym__0__5289830658136776009 == sym__0__5289830658136776009 && (otherRec.sym__0__7499328126409916481 == sym__0__7499328126409916481 && (otherRec.sym__0__7533033195406205003 == sym__0__7533033195406205003 && (otherRec.sym__0___45_6428147039213761908 == sym__0___45_6428147039213761908 && (otherRec.sym__0__871736690247302132 == sym__0__871736690247302132 && (otherRec.sym__0___45_8362046498826819058 == sym__0___45_8362046498826819058 && (otherRec.sym__0___45_7133132985918421512 == sym__0___45_7133132985918421512 && (otherRec.sym__0___45_3959357838844936686 == sym__0___45_3959357838844936686 && (otherRec.sym__0___45_7197031512662271633 == sym__0___45_7197031512662271633 && (otherRec.sym__0__8583356070728849524 == sym__0__8583356070728849524 && (otherRec.sym__0__1967597999057704256 == sym__0__1967597999057704256 && (otherRec.sym__0__5132421367677851272 == sym__0__5132421367677851272 && (otherRec.sym__0__5071922315287763570 == sym__0__5071922315287763570 && (otherRec.sym__0___45_3637991104308692870 == sym__0___45_3637991104308692870 && (otherRec.sym__0__4948888373840408220 == sym__0__4948888373840408220 && (otherRec.sym__0___45_7808961130681314221 == sym__0___45_7808961130681314221 && (otherRec.sym__0__1746575405116951454 == sym__0__1746575405116951454 && (otherRec.sym__0__2153939297276247251 == sym__0__2153939297276247251 && (otherRec.sym__0__5199185301403060729 == sym__0__5199185301403060729 && (otherRec.sym__0__1712959636608595962 == sym__0__1712959636608595962 && (otherRec.sym__0___45_1741951889491243926 == sym__0___45_1741951889491243926 && (otherRec.sym__0__227891603776809608 == sym__0__227891603776809608 && (otherRec.sym__0__6207099447983295614 == sym__0__6207099447983295614 && (otherRec.sym__0__335880342687986000 == sym__0__335880342687986000 && (otherRec.sym__0__2784917890152007524 == sym__0__2784917890152007524 && (otherRec.sym__0___45_5840348331744817409 == sym__0___45_5840348331744817409 && (otherRec.sym__0__3675426241071643741 == sym__0__3675426241071643741 && (otherRec.sym__0___45_1268803172874807067 == sym__0___45_1268803172874807067 && (otherRec.sym__0__3110451695433832699 == sym__0__3110451695433832699 && (otherRec.sym__0__5854013247755242004 == sym__0__5854013247755242004 && (otherRec.sym__0___45_1478737863530599082 == sym__0___45_1478737863530599082 && (otherRec.sym__0___45_6827442181954889560 == sym__0___45_6827442181954889560 && (otherRec.sym__0__6943297173895896986 == sym__0__6943297173895896986 && (otherRec.sym__0__5526031557462726759 == sym__0__5526031557462726759 && otherRec.sym__0__2016251883409854356 == sym__0__2016251883409854356))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record29& otherRec) const{
    return (otherRec.sym__0___45_8906884911160954364 != sym__0___45_8906884911160954364 || (otherRec.sym__0__2799000292371979828 != sym__0__2799000292371979828 || (otherRec.sym__0__8867920250735627162 != sym__0__8867920250735627162 || (otherRec.sym__0___45_7576867150402000331 != sym__0___45_7576867150402000331 || (otherRec.sym__0___45_9125225545914939837 != sym__0___45_9125225545914939837 || (otherRec.sym__0__4589167397936411269 != sym__0__4589167397936411269 || (otherRec.sym__0__8920142377705747532 != sym__0__8920142377705747532 || (otherRec.sym__0___45_4196858516486091897 != sym__0___45_4196858516486091897 || (otherRec.sym__0__1195773552714325740 != sym__0__1195773552714325740 || (otherRec.sym__0___45_38686532604732124 != sym__0___45_38686532604732124 || (otherRec.sym__0__1274631840214437554 != sym__0__1274631840214437554 || (otherRec.sym__0__8445040522489018709 != sym__0__8445040522489018709 || (otherRec.sym__0__2331348265799254080 != sym__0__2331348265799254080 || (otherRec.sym__0___45_1510963300986711992 != sym__0___45_1510963300986711992 || (otherRec.sym__0__5289830658136776009 != sym__0__5289830658136776009 || (otherRec.sym__0__7499328126409916481 != sym__0__7499328126409916481 || (otherRec.sym__0__7533033195406205003 != sym__0__7533033195406205003 || (otherRec.sym__0___45_6428147039213761908 != sym__0___45_6428147039213761908 || (otherRec.sym__0__871736690247302132 != sym__0__871736690247302132 || (otherRec.sym__0___45_8362046498826819058 != sym__0___45_8362046498826819058 || (otherRec.sym__0___45_7133132985918421512 != sym__0___45_7133132985918421512 || (otherRec.sym__0___45_3959357838844936686 != sym__0___45_3959357838844936686 || (otherRec.sym__0___45_7197031512662271633 != sym__0___45_7197031512662271633 || (otherRec.sym__0__8583356070728849524 != sym__0__8583356070728849524 || (otherRec.sym__0__1967597999057704256 != sym__0__1967597999057704256 || (otherRec.sym__0__5132421367677851272 != sym__0__5132421367677851272 || (otherRec.sym__0__5071922315287763570 != sym__0__5071922315287763570 || (otherRec.sym__0___45_3637991104308692870 != sym__0___45_3637991104308692870 || (otherRec.sym__0__4948888373840408220 != sym__0__4948888373840408220 || (otherRec.sym__0___45_7808961130681314221 != sym__0___45_7808961130681314221 || (otherRec.sym__0__1746575405116951454 != sym__0__1746575405116951454 || (otherRec.sym__0__2153939297276247251 != sym__0__2153939297276247251 || (otherRec.sym__0__5199185301403060729 != sym__0__5199185301403060729 || (otherRec.sym__0__1712959636608595962 != sym__0__1712959636608595962 || (otherRec.sym__0___45_1741951889491243926 != sym__0___45_1741951889491243926 || (otherRec.sym__0__227891603776809608 != sym__0__227891603776809608 || (otherRec.sym__0__6207099447983295614 != sym__0__6207099447983295614 || (otherRec.sym__0__335880342687986000 != sym__0__335880342687986000 || (otherRec.sym__0__2784917890152007524 != sym__0__2784917890152007524 || (otherRec.sym__0___45_5840348331744817409 != sym__0___45_5840348331744817409 || (otherRec.sym__0__3675426241071643741 != sym__0__3675426241071643741 || (otherRec.sym__0___45_1268803172874807067 != sym__0___45_1268803172874807067 || (otherRec.sym__0__3110451695433832699 != sym__0__3110451695433832699 || (otherRec.sym__0__5854013247755242004 != sym__0__5854013247755242004 || (otherRec.sym__0___45_1478737863530599082 != sym__0___45_1478737863530599082 || (otherRec.sym__0___45_6827442181954889560 != sym__0___45_6827442181954889560 || (otherRec.sym__0__6943297173895896986 != sym__0__6943297173895896986 || (otherRec.sym__0__5526031557462726759 != sym__0__5526031557462726759 || otherRec.sym__0__2016251883409854356 != sym__0__2016251883409854356))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_8906884911160954364;
  fluidb_string<18> sym__0__2799000292371979828;
  fluidb_string<9> sym__0__8867920250735627162;
  fluidb_string<9> sym__0___45_7576867150402000331;
  unsigned sym__0___45_9125225545914939837;
  unsigned sym__0__4589167397936411269;
  fluidb_string<7> sym__0__8920142377705747532;
  unsigned sym__0___45_4196858516486091897;
  unsigned sym__0__1195773552714325740;
  unsigned sym__0___45_38686532604732124;
  unsigned sym__0__1274631840214437554;
  unsigned sym__0__8445040522489018709;
  fluidb_string<15> sym__0__2331348265799254080;
  fluidb_string<2> sym__0___45_1510963300986711992;
  fluidb_string<2> sym__0__5289830658136776009;
  fluidb_string<2> sym__0__7499328126409916481;
  fluidb_string<2> sym__0__7533033195406205003;
  unsigned sym__0___45_6428147039213761908;
  fluidb_string<18> sym__0__871736690247302132;
  fluidb_string<40> sym__0___45_8362046498826819058;
  fluidb_string<11> sym__0___45_7133132985918421512;
  fluidb_string<15> sym__0___45_3959357838844936686;
  fluidb_string<13> sym__0___45_7197031512662271633;
  fluidb_string<15> sym__0__8583356070728849524;
  fluidb_string<21> sym__0__1967597999057704256;
  unsigned sym__0__5132421367677851272;
  int sym__0__5071922315287763570;
  unsigned sym__0___45_3637991104308692870;
  unsigned sym__0__4948888373840408220;
  unsigned sym__0___45_7808961130681314221;
  unsigned sym__0__1746575405116951454;
  fluidb_string<21> sym__0__2153939297276247251;
  unsigned sym__0__5199185301403060729;
  fluidb_string<10> sym__0__1712959636608595962;
  unsigned sym__0___45_1741951889491243926;
  double sym__0__227891603776809608;
  unsigned sym__0__6207099447983295614;
  double sym__0__335880342687986000;
  unsigned sym__0__2784917890152007524;
  unsigned sym__0___45_5840348331744817409;
  double sym__0__3675426241071643741;
  fluidb_string<13> sym__0___45_1268803172874807067;
  unsigned sym__0__3110451695433832699;
  fluidb_string<25> sym__0__5854013247755242004;
  fluidb_string<40> sym__0___45_1478737863530599082;
  fluidb_string<16> sym__0___45_6827442181954889560;
  fluidb_string<16> sym__0__6943297173895896986;
  fluidb_string<13> sym__0__5526031557462726759;
  fluidb_string<15> sym__0__2016251883409854356;
 private:
};


class Record38 {
 public:
  Record38(unsigned __sym__0___45_2544647080140891779, fluidb_string<18> __sym__0___45_4581931629044260499, fluidb_string<9> __sym__0__3511844764913402723, fluidb_string<9> __sym__0__2581750769096843740, unsigned __sym__0___45_6031048599860414622, unsigned __sym__0__8084343433543173228, fluidb_string<7> __sym__0___45_3664881058840515771, unsigned __sym__0___45_1924199962958349658, unsigned __sym__0__7769469128992998949, unsigned __sym__0__7818554603565865821, unsigned __sym__0__4360634980582143419, unsigned __sym__0___45_7492593539880285892, fluidb_string<15> __sym__0__1706094538935295417, fluidb_string<2> __sym__0__6114638120282452033, fluidb_string<2> __sym__0___45_78261027814563536, fluidb_string<2> __sym__0__2648420561950371368, fluidb_string<2> __sym__0__3807806894063626346, unsigned __sym__0__3010211381236373125, fluidb_string<18> __sym__0__3300613616795216173, fluidb_string<40> __sym__0___45_3130123223234281513, fluidb_string<11> __sym__0__8189415442579395633, fluidb_string<15> __sym__0__3248231192614790363, fluidb_string<13> __sym__0__1734593865430170446, fluidb_string<15> __sym__0___45_8167422549222682195, fluidb_string<21> __sym__0__2936268515493900473, unsigned __sym__0__2661490882974477953, int __sym__0___45_6833151998909895557, unsigned __sym__0___45_6379152824683587325, unsigned __sym__0__3389381886574775957, unsigned __sym__0___45_3006394417042584462, unsigned __sym__0__5708853396861436519, fluidb_string<21> __sym__0__2510302245253987058, unsigned __sym__0___45_8268616720440236384, fluidb_string<10> __sym__0___45_2145747097567105917, unsigned __sym__0___45_6747202196090936717, double __sym__0___45_980129616638612863, unsigned __sym__0__7935787287177824775, double __sym__0___45_1765426731373793463, unsigned __sym__0__2312911666975909277, unsigned __sym__0__8713898721580785886, double __sym__0__5274362417922015940, fluidb_string<13> __sym__0___45_5950462958936866676, unsigned __sym__0__5599391359954735578, fluidb_string<25> __sym__0__4014184007857207821, fluidb_string<40> __sym__0___45_7146441527183610849, fluidb_string<16> __sym__0___45_8891100078062559775, fluidb_string<16> __sym__0___45_5365202057839317149, fluidb_string<13> __sym__0__5177313860806756678, fluidb_string<15> __sym__0___45_6139660049171508851, unsigned __sym__0__5600261570499839795, fluidb_string<55> __sym__0__7033726162709406531, fluidb_string<25> __sym__0___45_2028921051824210768, fluidb_string<7> __sym__0__1510822012344354762, fluidb_string<10> __sym__0___45_2462553484168592128, fluidb_string<11> __sym__0__6826615390864986324, fluidb_string<25> __sym__0__1653057618405204038, unsigned __sym__0__1042393484014954953, fluidb_string<10> __sym__0___45_4797345940361177504) : sym__0___45_2544647080140891779(__sym__0___45_2544647080140891779), sym__0___45_4581931629044260499(__sym__0___45_4581931629044260499), sym__0__3511844764913402723(__sym__0__3511844764913402723), sym__0__2581750769096843740(__sym__0__2581750769096843740), sym__0___45_6031048599860414622(__sym__0___45_6031048599860414622), sym__0__8084343433543173228(__sym__0__8084343433543173228), sym__0___45_3664881058840515771(__sym__0___45_3664881058840515771), sym__0___45_1924199962958349658(__sym__0___45_1924199962958349658), sym__0__7769469128992998949(__sym__0__7769469128992998949), sym__0__7818554603565865821(__sym__0__7818554603565865821), sym__0__4360634980582143419(__sym__0__4360634980582143419), sym__0___45_7492593539880285892(__sym__0___45_7492593539880285892), sym__0__1706094538935295417(__sym__0__1706094538935295417), sym__0__6114638120282452033(__sym__0__6114638120282452033), sym__0___45_78261027814563536(__sym__0___45_78261027814563536), sym__0__2648420561950371368(__sym__0__2648420561950371368), sym__0__3807806894063626346(__sym__0__3807806894063626346), sym__0__3010211381236373125(__sym__0__3010211381236373125), sym__0__3300613616795216173(__sym__0__3300613616795216173), sym__0___45_3130123223234281513(__sym__0___45_3130123223234281513), sym__0__8189415442579395633(__sym__0__8189415442579395633), sym__0__3248231192614790363(__sym__0__3248231192614790363), sym__0__1734593865430170446(__sym__0__1734593865430170446), sym__0___45_8167422549222682195(__sym__0___45_8167422549222682195), sym__0__2936268515493900473(__sym__0__2936268515493900473), sym__0__2661490882974477953(__sym__0__2661490882974477953), sym__0___45_6833151998909895557(__sym__0___45_6833151998909895557), sym__0___45_6379152824683587325(__sym__0___45_6379152824683587325), sym__0__3389381886574775957(__sym__0__3389381886574775957), sym__0___45_3006394417042584462(__sym__0___45_3006394417042584462), sym__0__5708853396861436519(__sym__0__5708853396861436519), sym__0__2510302245253987058(__sym__0__2510302245253987058), sym__0___45_8268616720440236384(__sym__0___45_8268616720440236384), sym__0___45_2145747097567105917(__sym__0___45_2145747097567105917), sym__0___45_6747202196090936717(__sym__0___45_6747202196090936717), sym__0___45_980129616638612863(__sym__0___45_980129616638612863), sym__0__7935787287177824775(__sym__0__7935787287177824775), sym__0___45_1765426731373793463(__sym__0___45_1765426731373793463), sym__0__2312911666975909277(__sym__0__2312911666975909277), sym__0__8713898721580785886(__sym__0__8713898721580785886), sym__0__5274362417922015940(__sym__0__5274362417922015940), sym__0___45_5950462958936866676(__sym__0___45_5950462958936866676), sym__0__5599391359954735578(__sym__0__5599391359954735578), sym__0__4014184007857207821(__sym__0__4014184007857207821), sym__0___45_7146441527183610849(__sym__0___45_7146441527183610849), sym__0___45_8891100078062559775(__sym__0___45_8891100078062559775), sym__0___45_5365202057839317149(__sym__0___45_5365202057839317149), sym__0__5177313860806756678(__sym__0__5177313860806756678), sym__0___45_6139660049171508851(__sym__0___45_6139660049171508851), sym__0__5600261570499839795(__sym__0__5600261570499839795), sym__0__7033726162709406531(__sym__0__7033726162709406531), sym__0___45_2028921051824210768(__sym__0___45_2028921051824210768), sym__0__1510822012344354762(__sym__0__1510822012344354762), sym__0___45_2462553484168592128(__sym__0___45_2462553484168592128), sym__0__6826615390864986324(__sym__0__6826615390864986324), sym__0__1653057618405204038(__sym__0__1653057618405204038), sym__0__1042393484014954953(__sym__0__1042393484014954953), sym__0___45_4797345940361177504(__sym__0___45_4797345940361177504)
  {
  }
  Record38() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_2544647080140891779 << " | " << arrToString(sym__0___45_4581931629044260499) << " | " << arrToString(sym__0__3511844764913402723) << " | " << arrToString(sym__0__2581750769096843740) << " | " << sym__0___45_6031048599860414622 << " | " << sym__0__8084343433543173228 << " | " << arrToString(sym__0___45_3664881058840515771) << " | " << sym__0___45_1924199962958349658 << " | " << sym__0__7769469128992998949 << " | " << sym__0__7818554603565865821 << " | " << sym__0__4360634980582143419 << " | " << sym__0___45_7492593539880285892 << " | " << arrToString(sym__0__1706094538935295417) << " | " << arrToString(sym__0__6114638120282452033) << " | " << arrToString(sym__0___45_78261027814563536) << " | " << arrToString(sym__0__2648420561950371368) << " | " << arrToString(sym__0__3807806894063626346) << " | " << sym__0__3010211381236373125 << " | " << arrToString(sym__0__3300613616795216173) << " | " << arrToString(sym__0___45_3130123223234281513) << " | " << arrToString(sym__0__8189415442579395633) << " | " << arrToString(sym__0__3248231192614790363) << " | " << arrToString(sym__0__1734593865430170446) << " | " << arrToString(sym__0___45_8167422549222682195) << " | " << arrToString(sym__0__2936268515493900473) << " | " << sym__0__2661490882974477953 << " | " << sym__0___45_6833151998909895557 << " | " << sym__0___45_6379152824683587325 << " | " << sym__0__3389381886574775957 << " | " << sym__0___45_3006394417042584462 << " | " << sym__0__5708853396861436519 << " | " << arrToString(sym__0__2510302245253987058) << " | " << sym__0___45_8268616720440236384 << " | " << arrToString(sym__0___45_2145747097567105917) << " | " << sym__0___45_6747202196090936717 << " | " << sym__0___45_980129616638612863 << " | " << sym__0__7935787287177824775 << " | " << sym__0___45_1765426731373793463 << " | " << sym__0__2312911666975909277 << " | " << sym__0__8713898721580785886 << " | " << sym__0__5274362417922015940 << " | " << arrToString(sym__0___45_5950462958936866676) << " | " << sym__0__5599391359954735578 << " | " << arrToString(sym__0__4014184007857207821) << " | " << arrToString(sym__0___45_7146441527183610849) << " | " << arrToString(sym__0___45_8891100078062559775) << " | " << arrToString(sym__0___45_5365202057839317149) << " | " << arrToString(sym__0__5177313860806756678) << " | " << arrToString(sym__0___45_6139660049171508851) << " | " << sym__0__5600261570499839795 << " | " << arrToString(sym__0__7033726162709406531) << " | " << arrToString(sym__0___45_2028921051824210768) << " | " << arrToString(sym__0__1510822012344354762) << " | " << arrToString(sym__0___45_2462553484168592128) << " | " << arrToString(sym__0__6826615390864986324) << " | " << arrToString(sym__0__1653057618405204038) << " | " << sym__0__1042393484014954953 << " | " << arrToString(sym__0___45_4797345940361177504);
    return o.str();
  }
  bool operator <(const Record38& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 < sym__0___45_2544647080140891779 && (otherRec.sym__0___45_4581931629044260499 < sym__0___45_4581931629044260499 && (otherRec.sym__0__3511844764913402723 < sym__0__3511844764913402723 && (otherRec.sym__0__2581750769096843740 < sym__0__2581750769096843740 && (otherRec.sym__0___45_6031048599860414622 < sym__0___45_6031048599860414622 && (otherRec.sym__0__8084343433543173228 < sym__0__8084343433543173228 && (otherRec.sym__0___45_3664881058840515771 < sym__0___45_3664881058840515771 && (otherRec.sym__0___45_1924199962958349658 < sym__0___45_1924199962958349658 && (otherRec.sym__0__7769469128992998949 < sym__0__7769469128992998949 && (otherRec.sym__0__7818554603565865821 < sym__0__7818554603565865821 && (otherRec.sym__0__4360634980582143419 < sym__0__4360634980582143419 && (otherRec.sym__0___45_7492593539880285892 < sym__0___45_7492593539880285892 && (otherRec.sym__0__1706094538935295417 < sym__0__1706094538935295417 && (otherRec.sym__0__6114638120282452033 < sym__0__6114638120282452033 && (otherRec.sym__0___45_78261027814563536 < sym__0___45_78261027814563536 && (otherRec.sym__0__2648420561950371368 < sym__0__2648420561950371368 && (otherRec.sym__0__3807806894063626346 < sym__0__3807806894063626346 && (otherRec.sym__0__3010211381236373125 < sym__0__3010211381236373125 && (otherRec.sym__0__3300613616795216173 < sym__0__3300613616795216173 && (otherRec.sym__0___45_3130123223234281513 < sym__0___45_3130123223234281513 && (otherRec.sym__0__8189415442579395633 < sym__0__8189415442579395633 && (otherRec.sym__0__3248231192614790363 < sym__0__3248231192614790363 && (otherRec.sym__0__1734593865430170446 < sym__0__1734593865430170446 && (otherRec.sym__0___45_8167422549222682195 < sym__0___45_8167422549222682195 && (otherRec.sym__0__2936268515493900473 < sym__0__2936268515493900473 && (otherRec.sym__0__2661490882974477953 < sym__0__2661490882974477953 && (otherRec.sym__0___45_6833151998909895557 < sym__0___45_6833151998909895557 && (otherRec.sym__0___45_6379152824683587325 < sym__0___45_6379152824683587325 && (otherRec.sym__0__3389381886574775957 < sym__0__3389381886574775957 && (otherRec.sym__0___45_3006394417042584462 < sym__0___45_3006394417042584462 && (otherRec.sym__0__5708853396861436519 < sym__0__5708853396861436519 && (otherRec.sym__0__2510302245253987058 < sym__0__2510302245253987058 && (otherRec.sym__0___45_8268616720440236384 < sym__0___45_8268616720440236384 && (otherRec.sym__0___45_2145747097567105917 < sym__0___45_2145747097567105917 && (otherRec.sym__0___45_6747202196090936717 < sym__0___45_6747202196090936717 && (otherRec.sym__0___45_980129616638612863 < sym__0___45_980129616638612863 && (otherRec.sym__0__7935787287177824775 < sym__0__7935787287177824775 && (otherRec.sym__0___45_1765426731373793463 < sym__0___45_1765426731373793463 && (otherRec.sym__0__2312911666975909277 < sym__0__2312911666975909277 && (otherRec.sym__0__8713898721580785886 < sym__0__8713898721580785886 && (otherRec.sym__0__5274362417922015940 < sym__0__5274362417922015940 && (otherRec.sym__0___45_5950462958936866676 < sym__0___45_5950462958936866676 && (otherRec.sym__0__5599391359954735578 < sym__0__5599391359954735578 && (otherRec.sym__0__4014184007857207821 < sym__0__4014184007857207821 && (otherRec.sym__0___45_7146441527183610849 < sym__0___45_7146441527183610849 && (otherRec.sym__0___45_8891100078062559775 < sym__0___45_8891100078062559775 && (otherRec.sym__0___45_5365202057839317149 < sym__0___45_5365202057839317149 && (otherRec.sym__0__5177313860806756678 < sym__0__5177313860806756678 && (otherRec.sym__0___45_6139660049171508851 < sym__0___45_6139660049171508851 && (otherRec.sym__0__5600261570499839795 < sym__0__5600261570499839795 && (otherRec.sym__0__7033726162709406531 < sym__0__7033726162709406531 && (otherRec.sym__0___45_2028921051824210768 < sym__0___45_2028921051824210768 && (otherRec.sym__0__1510822012344354762 < sym__0__1510822012344354762 && (otherRec.sym__0___45_2462553484168592128 < sym__0___45_2462553484168592128 && (otherRec.sym__0__6826615390864986324 < sym__0__6826615390864986324 && (otherRec.sym__0__1653057618405204038 < sym__0__1653057618405204038 && (otherRec.sym__0__1042393484014954953 < sym__0__1042393484014954953 && otherRec.sym__0___45_4797345940361177504 < sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record38& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 == sym__0___45_2544647080140891779 && (otherRec.sym__0___45_4581931629044260499 == sym__0___45_4581931629044260499 && (otherRec.sym__0__3511844764913402723 == sym__0__3511844764913402723 && (otherRec.sym__0__2581750769096843740 == sym__0__2581750769096843740 && (otherRec.sym__0___45_6031048599860414622 == sym__0___45_6031048599860414622 && (otherRec.sym__0__8084343433543173228 == sym__0__8084343433543173228 && (otherRec.sym__0___45_3664881058840515771 == sym__0___45_3664881058840515771 && (otherRec.sym__0___45_1924199962958349658 == sym__0___45_1924199962958349658 && (otherRec.sym__0__7769469128992998949 == sym__0__7769469128992998949 && (otherRec.sym__0__7818554603565865821 == sym__0__7818554603565865821 && (otherRec.sym__0__4360634980582143419 == sym__0__4360634980582143419 && (otherRec.sym__0___45_7492593539880285892 == sym__0___45_7492593539880285892 && (otherRec.sym__0__1706094538935295417 == sym__0__1706094538935295417 && (otherRec.sym__0__6114638120282452033 == sym__0__6114638120282452033 && (otherRec.sym__0___45_78261027814563536 == sym__0___45_78261027814563536 && (otherRec.sym__0__2648420561950371368 == sym__0__2648420561950371368 && (otherRec.sym__0__3807806894063626346 == sym__0__3807806894063626346 && (otherRec.sym__0__3010211381236373125 == sym__0__3010211381236373125 && (otherRec.sym__0__3300613616795216173 == sym__0__3300613616795216173 && (otherRec.sym__0___45_3130123223234281513 == sym__0___45_3130123223234281513 && (otherRec.sym__0__8189415442579395633 == sym__0__8189415442579395633 && (otherRec.sym__0__3248231192614790363 == sym__0__3248231192614790363 && (otherRec.sym__0__1734593865430170446 == sym__0__1734593865430170446 && (otherRec.sym__0___45_8167422549222682195 == sym__0___45_8167422549222682195 && (otherRec.sym__0__2936268515493900473 == sym__0__2936268515493900473 && (otherRec.sym__0__2661490882974477953 == sym__0__2661490882974477953 && (otherRec.sym__0___45_6833151998909895557 == sym__0___45_6833151998909895557 && (otherRec.sym__0___45_6379152824683587325 == sym__0___45_6379152824683587325 && (otherRec.sym__0__3389381886574775957 == sym__0__3389381886574775957 && (otherRec.sym__0___45_3006394417042584462 == sym__0___45_3006394417042584462 && (otherRec.sym__0__5708853396861436519 == sym__0__5708853396861436519 && (otherRec.sym__0__2510302245253987058 == sym__0__2510302245253987058 && (otherRec.sym__0___45_8268616720440236384 == sym__0___45_8268616720440236384 && (otherRec.sym__0___45_2145747097567105917 == sym__0___45_2145747097567105917 && (otherRec.sym__0___45_6747202196090936717 == sym__0___45_6747202196090936717 && (otherRec.sym__0___45_980129616638612863 == sym__0___45_980129616638612863 && (otherRec.sym__0__7935787287177824775 == sym__0__7935787287177824775 && (otherRec.sym__0___45_1765426731373793463 == sym__0___45_1765426731373793463 && (otherRec.sym__0__2312911666975909277 == sym__0__2312911666975909277 && (otherRec.sym__0__8713898721580785886 == sym__0__8713898721580785886 && (otherRec.sym__0__5274362417922015940 == sym__0__5274362417922015940 && (otherRec.sym__0___45_5950462958936866676 == sym__0___45_5950462958936866676 && (otherRec.sym__0__5599391359954735578 == sym__0__5599391359954735578 && (otherRec.sym__0__4014184007857207821 == sym__0__4014184007857207821 && (otherRec.sym__0___45_7146441527183610849 == sym__0___45_7146441527183610849 && (otherRec.sym__0___45_8891100078062559775 == sym__0___45_8891100078062559775 && (otherRec.sym__0___45_5365202057839317149 == sym__0___45_5365202057839317149 && (otherRec.sym__0__5177313860806756678 == sym__0__5177313860806756678 && (otherRec.sym__0___45_6139660049171508851 == sym__0___45_6139660049171508851 && (otherRec.sym__0__5600261570499839795 == sym__0__5600261570499839795 && (otherRec.sym__0__7033726162709406531 == sym__0__7033726162709406531 && (otherRec.sym__0___45_2028921051824210768 == sym__0___45_2028921051824210768 && (otherRec.sym__0__1510822012344354762 == sym__0__1510822012344354762 && (otherRec.sym__0___45_2462553484168592128 == sym__0___45_2462553484168592128 && (otherRec.sym__0__6826615390864986324 == sym__0__6826615390864986324 && (otherRec.sym__0__1653057618405204038 == sym__0__1653057618405204038 && (otherRec.sym__0__1042393484014954953 == sym__0__1042393484014954953 && otherRec.sym__0___45_4797345940361177504 == sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record38& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 != sym__0___45_2544647080140891779 || (otherRec.sym__0___45_4581931629044260499 != sym__0___45_4581931629044260499 || (otherRec.sym__0__3511844764913402723 != sym__0__3511844764913402723 || (otherRec.sym__0__2581750769096843740 != sym__0__2581750769096843740 || (otherRec.sym__0___45_6031048599860414622 != sym__0___45_6031048599860414622 || (otherRec.sym__0__8084343433543173228 != sym__0__8084343433543173228 || (otherRec.sym__0___45_3664881058840515771 != sym__0___45_3664881058840515771 || (otherRec.sym__0___45_1924199962958349658 != sym__0___45_1924199962958349658 || (otherRec.sym__0__7769469128992998949 != sym__0__7769469128992998949 || (otherRec.sym__0__7818554603565865821 != sym__0__7818554603565865821 || (otherRec.sym__0__4360634980582143419 != sym__0__4360634980582143419 || (otherRec.sym__0___45_7492593539880285892 != sym__0___45_7492593539880285892 || (otherRec.sym__0__1706094538935295417 != sym__0__1706094538935295417 || (otherRec.sym__0__6114638120282452033 != sym__0__6114638120282452033 || (otherRec.sym__0___45_78261027814563536 != sym__0___45_78261027814563536 || (otherRec.sym__0__2648420561950371368 != sym__0__2648420561950371368 || (otherRec.sym__0__3807806894063626346 != sym__0__3807806894063626346 || (otherRec.sym__0__3010211381236373125 != sym__0__3010211381236373125 || (otherRec.sym__0__3300613616795216173 != sym__0__3300613616795216173 || (otherRec.sym__0___45_3130123223234281513 != sym__0___45_3130123223234281513 || (otherRec.sym__0__8189415442579395633 != sym__0__8189415442579395633 || (otherRec.sym__0__3248231192614790363 != sym__0__3248231192614790363 || (otherRec.sym__0__1734593865430170446 != sym__0__1734593865430170446 || (otherRec.sym__0___45_8167422549222682195 != sym__0___45_8167422549222682195 || (otherRec.sym__0__2936268515493900473 != sym__0__2936268515493900473 || (otherRec.sym__0__2661490882974477953 != sym__0__2661490882974477953 || (otherRec.sym__0___45_6833151998909895557 != sym__0___45_6833151998909895557 || (otherRec.sym__0___45_6379152824683587325 != sym__0___45_6379152824683587325 || (otherRec.sym__0__3389381886574775957 != sym__0__3389381886574775957 || (otherRec.sym__0___45_3006394417042584462 != sym__0___45_3006394417042584462 || (otherRec.sym__0__5708853396861436519 != sym__0__5708853396861436519 || (otherRec.sym__0__2510302245253987058 != sym__0__2510302245253987058 || (otherRec.sym__0___45_8268616720440236384 != sym__0___45_8268616720440236384 || (otherRec.sym__0___45_2145747097567105917 != sym__0___45_2145747097567105917 || (otherRec.sym__0___45_6747202196090936717 != sym__0___45_6747202196090936717 || (otherRec.sym__0___45_980129616638612863 != sym__0___45_980129616638612863 || (otherRec.sym__0__7935787287177824775 != sym__0__7935787287177824775 || (otherRec.sym__0___45_1765426731373793463 != sym__0___45_1765426731373793463 || (otherRec.sym__0__2312911666975909277 != sym__0__2312911666975909277 || (otherRec.sym__0__8713898721580785886 != sym__0__8713898721580785886 || (otherRec.sym__0__5274362417922015940 != sym__0__5274362417922015940 || (otherRec.sym__0___45_5950462958936866676 != sym__0___45_5950462958936866676 || (otherRec.sym__0__5599391359954735578 != sym__0__5599391359954735578 || (otherRec.sym__0__4014184007857207821 != sym__0__4014184007857207821 || (otherRec.sym__0___45_7146441527183610849 != sym__0___45_7146441527183610849 || (otherRec.sym__0___45_8891100078062559775 != sym__0___45_8891100078062559775 || (otherRec.sym__0___45_5365202057839317149 != sym__0___45_5365202057839317149 || (otherRec.sym__0__5177313860806756678 != sym__0__5177313860806756678 || (otherRec.sym__0___45_6139660049171508851 != sym__0___45_6139660049171508851 || (otherRec.sym__0__5600261570499839795 != sym__0__5600261570499839795 || (otherRec.sym__0__7033726162709406531 != sym__0__7033726162709406531 || (otherRec.sym__0___45_2028921051824210768 != sym__0___45_2028921051824210768 || (otherRec.sym__0__1510822012344354762 != sym__0__1510822012344354762 || (otherRec.sym__0___45_2462553484168592128 != sym__0___45_2462553484168592128 || (otherRec.sym__0__6826615390864986324 != sym__0__6826615390864986324 || (otherRec.sym__0__1653057618405204038 != sym__0__1653057618405204038 || (otherRec.sym__0__1042393484014954953 != sym__0__1042393484014954953 || otherRec.sym__0___45_4797345940361177504 != sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_2544647080140891779;
  fluidb_string<18> sym__0___45_4581931629044260499;
  fluidb_string<9> sym__0__3511844764913402723;
  fluidb_string<9> sym__0__2581750769096843740;
  unsigned sym__0___45_6031048599860414622;
  unsigned sym__0__8084343433543173228;
  fluidb_string<7> sym__0___45_3664881058840515771;
  unsigned sym__0___45_1924199962958349658;
  unsigned sym__0__7769469128992998949;
  unsigned sym__0__7818554603565865821;
  unsigned sym__0__4360634980582143419;
  unsigned sym__0___45_7492593539880285892;
  fluidb_string<15> sym__0__1706094538935295417;
  fluidb_string<2> sym__0__6114638120282452033;
  fluidb_string<2> sym__0___45_78261027814563536;
  fluidb_string<2> sym__0__2648420561950371368;
  fluidb_string<2> sym__0__3807806894063626346;
  unsigned sym__0__3010211381236373125;
  fluidb_string<18> sym__0__3300613616795216173;
  fluidb_string<40> sym__0___45_3130123223234281513;
  fluidb_string<11> sym__0__8189415442579395633;
  fluidb_string<15> sym__0__3248231192614790363;
  fluidb_string<13> sym__0__1734593865430170446;
  fluidb_string<15> sym__0___45_8167422549222682195;
  fluidb_string<21> sym__0__2936268515493900473;
  unsigned sym__0__2661490882974477953;
  int sym__0___45_6833151998909895557;
  unsigned sym__0___45_6379152824683587325;
  unsigned sym__0__3389381886574775957;
  unsigned sym__0___45_3006394417042584462;
  unsigned sym__0__5708853396861436519;
  fluidb_string<21> sym__0__2510302245253987058;
  unsigned sym__0___45_8268616720440236384;
  fluidb_string<10> sym__0___45_2145747097567105917;
  unsigned sym__0___45_6747202196090936717;
  double sym__0___45_980129616638612863;
  unsigned sym__0__7935787287177824775;
  double sym__0___45_1765426731373793463;
  unsigned sym__0__2312911666975909277;
  unsigned sym__0__8713898721580785886;
  double sym__0__5274362417922015940;
  fluidb_string<13> sym__0___45_5950462958936866676;
  unsigned sym__0__5599391359954735578;
  fluidb_string<25> sym__0__4014184007857207821;
  fluidb_string<40> sym__0___45_7146441527183610849;
  fluidb_string<16> sym__0___45_8891100078062559775;
  fluidb_string<16> sym__0___45_5365202057839317149;
  fluidb_string<13> sym__0__5177313860806756678;
  fluidb_string<15> sym__0___45_6139660049171508851;
  unsigned sym__0__5600261570499839795;
  fluidb_string<55> sym__0__7033726162709406531;
  fluidb_string<25> sym__0___45_2028921051824210768;
  fluidb_string<7> sym__0__1510822012344354762;
  fluidb_string<10> sym__0___45_2462553484168592128;
  fluidb_string<11> sym__0__6826615390864986324;
  fluidb_string<25> sym__0__1653057618405204038;
  unsigned sym__0__1042393484014954953;
  fluidb_string<10> sym__0___45_4797345940361177504;
 private:
};


class Record28 {
 public:
  Record28(unsigned __sym__0__4247566339799878220, fluidb_string<18> __sym__0__8697040551489347700, fluidb_string<40> __sym__0___45_7787142226876343730, fluidb_string<11> __sym__0___45_1187552991791953032, fluidb_string<15> __sym__0__1390452642584850258, fluidb_string<13> __sym__0___45_9005760273850656913, fluidb_string<15> __sym__0___45_2907459254687711244, fluidb_string<21> __sym__0__2480334725598013312, unsigned __sym__0___45_5187823801620786808, int __sym__0__1037002594809429170, unsigned __sym__0__7872086240202880314, unsigned __sym__0___45_4763399617750053668, unsigned __sym__0___45_6403921572028951213, unsigned __sym__0___45_2109502109963253922, fluidb_string<21> __sym__0__4067677362432605907, unsigned __sym__0__8756028414243606329, fluidb_string<10> __sym__0__2042385930457662394, unsigned __sym__0___45_3970547087826794518, double __sym__0___45_6073766774154422904, unsigned __sym__0__5018708771628399166, double __sym__0__1930717928488534032, unsigned __sym__0__7639906542053526180, unsigned __sym__0___45_4996791897670673281, double __sym__0__1294111265768266077, fluidb_string<13> __sym__0__7580815044475313637, unsigned __sym__0__3267254903307740539, fluidb_string<25> __sym__0__1571155805396300180, fluidb_string<40> __sym__0___45_2363211583366348202, fluidb_string<16> __sym__0___45_7067988849542679640, fluidb_string<16> __sym__0___45_3941433122784605606, fluidb_string<13> __sym__0___45_355406171959865881, fluidb_string<15> __sym__0___45_9090722436365569004) : sym__0__4247566339799878220(__sym__0__4247566339799878220), sym__0__8697040551489347700(__sym__0__8697040551489347700), sym__0___45_7787142226876343730(__sym__0___45_7787142226876343730), sym__0___45_1187552991791953032(__sym__0___45_1187552991791953032), sym__0__1390452642584850258(__sym__0__1390452642584850258), sym__0___45_9005760273850656913(__sym__0___45_9005760273850656913), sym__0___45_2907459254687711244(__sym__0___45_2907459254687711244), sym__0__2480334725598013312(__sym__0__2480334725598013312), sym__0___45_5187823801620786808(__sym__0___45_5187823801620786808), sym__0__1037002594809429170(__sym__0__1037002594809429170), sym__0__7872086240202880314(__sym__0__7872086240202880314), sym__0___45_4763399617750053668(__sym__0___45_4763399617750053668), sym__0___45_6403921572028951213(__sym__0___45_6403921572028951213), sym__0___45_2109502109963253922(__sym__0___45_2109502109963253922), sym__0__4067677362432605907(__sym__0__4067677362432605907), sym__0__8756028414243606329(__sym__0__8756028414243606329), sym__0__2042385930457662394(__sym__0__2042385930457662394), sym__0___45_3970547087826794518(__sym__0___45_3970547087826794518), sym__0___45_6073766774154422904(__sym__0___45_6073766774154422904), sym__0__5018708771628399166(__sym__0__5018708771628399166), sym__0__1930717928488534032(__sym__0__1930717928488534032), sym__0__7639906542053526180(__sym__0__7639906542053526180), sym__0___45_4996791897670673281(__sym__0___45_4996791897670673281), sym__0__1294111265768266077(__sym__0__1294111265768266077), sym__0__7580815044475313637(__sym__0__7580815044475313637), sym__0__3267254903307740539(__sym__0__3267254903307740539), sym__0__1571155805396300180(__sym__0__1571155805396300180), sym__0___45_2363211583366348202(__sym__0___45_2363211583366348202), sym__0___45_7067988849542679640(__sym__0___45_7067988849542679640), sym__0___45_3941433122784605606(__sym__0___45_3941433122784605606), sym__0___45_355406171959865881(__sym__0___45_355406171959865881), sym__0___45_9090722436365569004(__sym__0___45_9090722436365569004)
  {
  }
  Record28() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__4247566339799878220 << " | " << arrToString(sym__0__8697040551489347700) << " | " << arrToString(sym__0___45_7787142226876343730) << " | " << arrToString(sym__0___45_1187552991791953032) << " | " << arrToString(sym__0__1390452642584850258) << " | " << arrToString(sym__0___45_9005760273850656913) << " | " << arrToString(sym__0___45_2907459254687711244) << " | " << arrToString(sym__0__2480334725598013312) << " | " << sym__0___45_5187823801620786808 << " | " << sym__0__1037002594809429170 << " | " << sym__0__7872086240202880314 << " | " << sym__0___45_4763399617750053668 << " | " << sym__0___45_6403921572028951213 << " | " << sym__0___45_2109502109963253922 << " | " << arrToString(sym__0__4067677362432605907) << " | " << sym__0__8756028414243606329 << " | " << arrToString(sym__0__2042385930457662394) << " | " << sym__0___45_3970547087826794518 << " | " << sym__0___45_6073766774154422904 << " | " << sym__0__5018708771628399166 << " | " << sym__0__1930717928488534032 << " | " << sym__0__7639906542053526180 << " | " << sym__0___45_4996791897670673281 << " | " << sym__0__1294111265768266077 << " | " << arrToString(sym__0__7580815044475313637) << " | " << sym__0__3267254903307740539 << " | " << arrToString(sym__0__1571155805396300180) << " | " << arrToString(sym__0___45_2363211583366348202) << " | " << arrToString(sym__0___45_7067988849542679640) << " | " << arrToString(sym__0___45_3941433122784605606) << " | " << arrToString(sym__0___45_355406171959865881) << " | " << arrToString(sym__0___45_9090722436365569004);
    return o.str();
  }
  bool operator <(const Record28& otherRec) const{
    return (otherRec.sym__0__4247566339799878220 < sym__0__4247566339799878220 && (otherRec.sym__0__8697040551489347700 < sym__0__8697040551489347700 && (otherRec.sym__0___45_7787142226876343730 < sym__0___45_7787142226876343730 && (otherRec.sym__0___45_1187552991791953032 < sym__0___45_1187552991791953032 && (otherRec.sym__0__1390452642584850258 < sym__0__1390452642584850258 && (otherRec.sym__0___45_9005760273850656913 < sym__0___45_9005760273850656913 && (otherRec.sym__0___45_2907459254687711244 < sym__0___45_2907459254687711244 && (otherRec.sym__0__2480334725598013312 < sym__0__2480334725598013312 && (otherRec.sym__0___45_5187823801620786808 < sym__0___45_5187823801620786808 && (otherRec.sym__0__1037002594809429170 < sym__0__1037002594809429170 && (otherRec.sym__0__7872086240202880314 < sym__0__7872086240202880314 && (otherRec.sym__0___45_4763399617750053668 < sym__0___45_4763399617750053668 && (otherRec.sym__0___45_6403921572028951213 < sym__0___45_6403921572028951213 && (otherRec.sym__0___45_2109502109963253922 < sym__0___45_2109502109963253922 && (otherRec.sym__0__4067677362432605907 < sym__0__4067677362432605907 && (otherRec.sym__0__8756028414243606329 < sym__0__8756028414243606329 && (otherRec.sym__0__2042385930457662394 < sym__0__2042385930457662394 && (otherRec.sym__0___45_3970547087826794518 < sym__0___45_3970547087826794518 && (otherRec.sym__0___45_6073766774154422904 < sym__0___45_6073766774154422904 && (otherRec.sym__0__5018708771628399166 < sym__0__5018708771628399166 && (otherRec.sym__0__1930717928488534032 < sym__0__1930717928488534032 && (otherRec.sym__0__7639906542053526180 < sym__0__7639906542053526180 && (otherRec.sym__0___45_4996791897670673281 < sym__0___45_4996791897670673281 && (otherRec.sym__0__1294111265768266077 < sym__0__1294111265768266077 && (otherRec.sym__0__7580815044475313637 < sym__0__7580815044475313637 && (otherRec.sym__0__3267254903307740539 < sym__0__3267254903307740539 && (otherRec.sym__0__1571155805396300180 < sym__0__1571155805396300180 && (otherRec.sym__0___45_2363211583366348202 < sym__0___45_2363211583366348202 && (otherRec.sym__0___45_7067988849542679640 < sym__0___45_7067988849542679640 && (otherRec.sym__0___45_3941433122784605606 < sym__0___45_3941433122784605606 && (otherRec.sym__0___45_355406171959865881 < sym__0___45_355406171959865881 && otherRec.sym__0___45_9090722436365569004 < sym__0___45_9090722436365569004)))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record28& otherRec) const{
    return (otherRec.sym__0__4247566339799878220 == sym__0__4247566339799878220 && (otherRec.sym__0__8697040551489347700 == sym__0__8697040551489347700 && (otherRec.sym__0___45_7787142226876343730 == sym__0___45_7787142226876343730 && (otherRec.sym__0___45_1187552991791953032 == sym__0___45_1187552991791953032 && (otherRec.sym__0__1390452642584850258 == sym__0__1390452642584850258 && (otherRec.sym__0___45_9005760273850656913 == sym__0___45_9005760273850656913 && (otherRec.sym__0___45_2907459254687711244 == sym__0___45_2907459254687711244 && (otherRec.sym__0__2480334725598013312 == sym__0__2480334725598013312 && (otherRec.sym__0___45_5187823801620786808 == sym__0___45_5187823801620786808 && (otherRec.sym__0__1037002594809429170 == sym__0__1037002594809429170 && (otherRec.sym__0__7872086240202880314 == sym__0__7872086240202880314 && (otherRec.sym__0___45_4763399617750053668 == sym__0___45_4763399617750053668 && (otherRec.sym__0___45_6403921572028951213 == sym__0___45_6403921572028951213 && (otherRec.sym__0___45_2109502109963253922 == sym__0___45_2109502109963253922 && (otherRec.sym__0__4067677362432605907 == sym__0__4067677362432605907 && (otherRec.sym__0__8756028414243606329 == sym__0__8756028414243606329 && (otherRec.sym__0__2042385930457662394 == sym__0__2042385930457662394 && (otherRec.sym__0___45_3970547087826794518 == sym__0___45_3970547087826794518 && (otherRec.sym__0___45_6073766774154422904 == sym__0___45_6073766774154422904 && (otherRec.sym__0__5018708771628399166 == sym__0__5018708771628399166 && (otherRec.sym__0__1930717928488534032 == sym__0__1930717928488534032 && (otherRec.sym__0__7639906542053526180 == sym__0__7639906542053526180 && (otherRec.sym__0___45_4996791897670673281 == sym__0___45_4996791897670673281 && (otherRec.sym__0__1294111265768266077 == sym__0__1294111265768266077 && (otherRec.sym__0__7580815044475313637 == sym__0__7580815044475313637 && (otherRec.sym__0__3267254903307740539 == sym__0__3267254903307740539 && (otherRec.sym__0__1571155805396300180 == sym__0__1571155805396300180 && (otherRec.sym__0___45_2363211583366348202 == sym__0___45_2363211583366348202 && (otherRec.sym__0___45_7067988849542679640 == sym__0___45_7067988849542679640 && (otherRec.sym__0___45_3941433122784605606 == sym__0___45_3941433122784605606 && (otherRec.sym__0___45_355406171959865881 == sym__0___45_355406171959865881 && otherRec.sym__0___45_9090722436365569004 == sym__0___45_9090722436365569004)))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record28& otherRec) const{
    return (otherRec.sym__0__4247566339799878220 != sym__0__4247566339799878220 || (otherRec.sym__0__8697040551489347700 != sym__0__8697040551489347700 || (otherRec.sym__0___45_7787142226876343730 != sym__0___45_7787142226876343730 || (otherRec.sym__0___45_1187552991791953032 != sym__0___45_1187552991791953032 || (otherRec.sym__0__1390452642584850258 != sym__0__1390452642584850258 || (otherRec.sym__0___45_9005760273850656913 != sym__0___45_9005760273850656913 || (otherRec.sym__0___45_2907459254687711244 != sym__0___45_2907459254687711244 || (otherRec.sym__0__2480334725598013312 != sym__0__2480334725598013312 || (otherRec.sym__0___45_5187823801620786808 != sym__0___45_5187823801620786808 || (otherRec.sym__0__1037002594809429170 != sym__0__1037002594809429170 || (otherRec.sym__0__7872086240202880314 != sym__0__7872086240202880314 || (otherRec.sym__0___45_4763399617750053668 != sym__0___45_4763399617750053668 || (otherRec.sym__0___45_6403921572028951213 != sym__0___45_6403921572028951213 || (otherRec.sym__0___45_2109502109963253922 != sym__0___45_2109502109963253922 || (otherRec.sym__0__4067677362432605907 != sym__0__4067677362432605907 || (otherRec.sym__0__8756028414243606329 != sym__0__8756028414243606329 || (otherRec.sym__0__2042385930457662394 != sym__0__2042385930457662394 || (otherRec.sym__0___45_3970547087826794518 != sym__0___45_3970547087826794518 || (otherRec.sym__0___45_6073766774154422904 != sym__0___45_6073766774154422904 || (otherRec.sym__0__5018708771628399166 != sym__0__5018708771628399166 || (otherRec.sym__0__1930717928488534032 != sym__0__1930717928488534032 || (otherRec.sym__0__7639906542053526180 != sym__0__7639906542053526180 || (otherRec.sym__0___45_4996791897670673281 != sym__0___45_4996791897670673281 || (otherRec.sym__0__1294111265768266077 != sym__0__1294111265768266077 || (otherRec.sym__0__7580815044475313637 != sym__0__7580815044475313637 || (otherRec.sym__0__3267254903307740539 != sym__0__3267254903307740539 || (otherRec.sym__0__1571155805396300180 != sym__0__1571155805396300180 || (otherRec.sym__0___45_2363211583366348202 != sym__0___45_2363211583366348202 || (otherRec.sym__0___45_7067988849542679640 != sym__0___45_7067988849542679640 || (otherRec.sym__0___45_3941433122784605606 != sym__0___45_3941433122784605606 || (otherRec.sym__0___45_355406171959865881 != sym__0___45_355406171959865881 || otherRec.sym__0___45_9090722436365569004 != sym__0___45_9090722436365569004)))))))))))))))))))))))))))))));
  }
  unsigned sym__0__4247566339799878220;
  fluidb_string<18> sym__0__8697040551489347700;
  fluidb_string<40> sym__0___45_7787142226876343730;
  fluidb_string<11> sym__0___45_1187552991791953032;
  fluidb_string<15> sym__0__1390452642584850258;
  fluidb_string<13> sym__0___45_9005760273850656913;
  fluidb_string<15> sym__0___45_2907459254687711244;
  fluidb_string<21> sym__0__2480334725598013312;
  unsigned sym__0___45_5187823801620786808;
  int sym__0__1037002594809429170;
  unsigned sym__0__7872086240202880314;
  unsigned sym__0___45_4763399617750053668;
  unsigned sym__0___45_6403921572028951213;
  unsigned sym__0___45_2109502109963253922;
  fluidb_string<21> sym__0__4067677362432605907;
  unsigned sym__0__8756028414243606329;
  fluidb_string<10> sym__0__2042385930457662394;
  unsigned sym__0___45_3970547087826794518;
  double sym__0___45_6073766774154422904;
  unsigned sym__0__5018708771628399166;
  double sym__0__1930717928488534032;
  unsigned sym__0__7639906542053526180;
  unsigned sym__0___45_4996791897670673281;
  double sym__0__1294111265768266077;
  fluidb_string<13> sym__0__7580815044475313637;
  unsigned sym__0__3267254903307740539;
  fluidb_string<25> sym__0__1571155805396300180;
  fluidb_string<40> sym__0___45_2363211583366348202;
  fluidb_string<16> sym__0___45_7067988849542679640;
  fluidb_string<16> sym__0___45_3941433122784605606;
  fluidb_string<13> sym__0___45_355406171959865881;
  fluidb_string<15> sym__0___45_9090722436365569004;
 private:
};


class Record37 {
 public:
  Record37(unsigned __sym__0__7178003535380331304, fluidb_string<55> __sym__0___45_7020257275696364520, fluidb_string<25> __sym__0___45_6307179734719967033, fluidb_string<7> __sym__0__4568304886257136061, fluidb_string<10> __sym__0___45_6291097039630000265, fluidb_string<11> __sym__0__551327770031967739, fluidb_string<25> __sym__0__3827696365022297353, unsigned __sym__0___45_1779543743759935870, fluidb_string<10> __sym__0__3752090135924368535) : sym__0__7178003535380331304(__sym__0__7178003535380331304), sym__0___45_7020257275696364520(__sym__0___45_7020257275696364520), sym__0___45_6307179734719967033(__sym__0___45_6307179734719967033), sym__0__4568304886257136061(__sym__0__4568304886257136061), sym__0___45_6291097039630000265(__sym__0___45_6291097039630000265), sym__0__551327770031967739(__sym__0__551327770031967739), sym__0__3827696365022297353(__sym__0__3827696365022297353), sym__0___45_1779543743759935870(__sym__0___45_1779543743759935870), sym__0__3752090135924368535(__sym__0__3752090135924368535)
  {
  }
  Record37() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__7178003535380331304 << " | " << arrToString(sym__0___45_7020257275696364520) << " | " << arrToString(sym__0___45_6307179734719967033) << " | " << arrToString(sym__0__4568304886257136061) << " | " << arrToString(sym__0___45_6291097039630000265) << " | " << arrToString(sym__0__551327770031967739) << " | " << arrToString(sym__0__3827696365022297353) << " | " << sym__0___45_1779543743759935870 << " | " << arrToString(sym__0__3752090135924368535);
    return o.str();
  }
  bool operator <(const Record37& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 < sym__0__7178003535380331304 && (otherRec.sym__0___45_7020257275696364520 < sym__0___45_7020257275696364520 && (otherRec.sym__0___45_6307179734719967033 < sym__0___45_6307179734719967033 && (otherRec.sym__0__4568304886257136061 < sym__0__4568304886257136061 && (otherRec.sym__0___45_6291097039630000265 < sym__0___45_6291097039630000265 && (otherRec.sym__0__551327770031967739 < sym__0__551327770031967739 && (otherRec.sym__0__3827696365022297353 < sym__0__3827696365022297353 && (otherRec.sym__0___45_1779543743759935870 < sym__0___45_1779543743759935870 && otherRec.sym__0__3752090135924368535 < sym__0__3752090135924368535))))))));
  }
  bool operator ==(const Record37& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 == sym__0__7178003535380331304 && (otherRec.sym__0___45_7020257275696364520 == sym__0___45_7020257275696364520 && (otherRec.sym__0___45_6307179734719967033 == sym__0___45_6307179734719967033 && (otherRec.sym__0__4568304886257136061 == sym__0__4568304886257136061 && (otherRec.sym__0___45_6291097039630000265 == sym__0___45_6291097039630000265 && (otherRec.sym__0__551327770031967739 == sym__0__551327770031967739 && (otherRec.sym__0__3827696365022297353 == sym__0__3827696365022297353 && (otherRec.sym__0___45_1779543743759935870 == sym__0___45_1779543743759935870 && otherRec.sym__0__3752090135924368535 == sym__0__3752090135924368535))))))));
  }
  bool operator !=(const Record37& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 != sym__0__7178003535380331304 || (otherRec.sym__0___45_7020257275696364520 != sym__0___45_7020257275696364520 || (otherRec.sym__0___45_6307179734719967033 != sym__0___45_6307179734719967033 || (otherRec.sym__0__4568304886257136061 != sym__0__4568304886257136061 || (otherRec.sym__0___45_6291097039630000265 != sym__0___45_6291097039630000265 || (otherRec.sym__0__551327770031967739 != sym__0__551327770031967739 || (otherRec.sym__0__3827696365022297353 != sym__0__3827696365022297353 || (otherRec.sym__0___45_1779543743759935870 != sym__0___45_1779543743759935870 || otherRec.sym__0__3752090135924368535 != sym__0__3752090135924368535))))))));
  }
  unsigned sym__0__7178003535380331304;
  fluidb_string<55> sym__0___45_7020257275696364520;
  fluidb_string<25> sym__0___45_6307179734719967033;
  fluidb_string<7> sym__0__4568304886257136061;
  fluidb_string<10> sym__0___45_6291097039630000265;
  fluidb_string<11> sym__0__551327770031967739;
  fluidb_string<25> sym__0__3827696365022297353;
  unsigned sym__0___45_1779543743759935870;
  fluidb_string<10> sym__0__3752090135924368535;
 private:
};


class Record3 {
 public:
  Record3(unsigned __sym__0___45_7574074018531922998, int __sym__0__1125464382786937920, unsigned __sym__0___45_8257174981563598792, unsigned __sym__0__957746932829998382, unsigned __sym__0__934137931677987637, unsigned __sym__0___45_7332894783442362324, fluidb_string<21> __sym__0__8974811218372806325, unsigned __sym__0___45_5217562530132451785, fluidb_string<10> __sym__0__7851147553396318904, unsigned __sym__0___45_4975505511391694456, double __sym__0___45_7249986409969561654, unsigned __sym__0__4671626969570181580, double __sym__0___45_3666121704283105054, unsigned __sym__0__5495011930072844518, unsigned __sym__0___45_4423447118092167055, double __sym__0___45_1608082021099887893, fluidb_string<13> __sym__0__1584187396639360899) : sym__0___45_7574074018531922998(__sym__0___45_7574074018531922998), sym__0__1125464382786937920(__sym__0__1125464382786937920), sym__0___45_8257174981563598792(__sym__0___45_8257174981563598792), sym__0__957746932829998382(__sym__0__957746932829998382), sym__0__934137931677987637(__sym__0__934137931677987637), sym__0___45_7332894783442362324(__sym__0___45_7332894783442362324), sym__0__8974811218372806325(__sym__0__8974811218372806325), sym__0___45_5217562530132451785(__sym__0___45_5217562530132451785), sym__0__7851147553396318904(__sym__0__7851147553396318904), sym__0___45_4975505511391694456(__sym__0___45_4975505511391694456), sym__0___45_7249986409969561654(__sym__0___45_7249986409969561654), sym__0__4671626969570181580(__sym__0__4671626969570181580), sym__0___45_3666121704283105054(__sym__0___45_3666121704283105054), sym__0__5495011930072844518(__sym__0__5495011930072844518), sym__0___45_4423447118092167055(__sym__0___45_4423447118092167055), sym__0___45_1608082021099887893(__sym__0___45_1608082021099887893), sym__0__1584187396639360899(__sym__0__1584187396639360899)
  {
  }
  Record3() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_7574074018531922998 << " | " << sym__0__1125464382786937920 << " | " << sym__0___45_8257174981563598792 << " | " << sym__0__957746932829998382 << " | " << sym__0__934137931677987637 << " | " << sym__0___45_7332894783442362324 << " | " << arrToString(sym__0__8974811218372806325) << " | " << sym__0___45_5217562530132451785 << " | " << arrToString(sym__0__7851147553396318904) << " | " << sym__0___45_4975505511391694456 << " | " << sym__0___45_7249986409969561654 << " | " << sym__0__4671626969570181580 << " | " << sym__0___45_3666121704283105054 << " | " << sym__0__5495011930072844518 << " | " << sym__0___45_4423447118092167055 << " | " << sym__0___45_1608082021099887893 << " | " << arrToString(sym__0__1584187396639360899);
    return o.str();
  }
  bool operator <(const Record3& otherRec) const{
    return (otherRec.sym__0___45_7574074018531922998 < sym__0___45_7574074018531922998 && (otherRec.sym__0__1125464382786937920 < sym__0__1125464382786937920 && (otherRec.sym__0___45_8257174981563598792 < sym__0___45_8257174981563598792 && (otherRec.sym__0__957746932829998382 < sym__0__957746932829998382 && (otherRec.sym__0__934137931677987637 < sym__0__934137931677987637 && (otherRec.sym__0___45_7332894783442362324 < sym__0___45_7332894783442362324 && (otherRec.sym__0__8974811218372806325 < sym__0__8974811218372806325 && (otherRec.sym__0___45_5217562530132451785 < sym__0___45_5217562530132451785 && (otherRec.sym__0__7851147553396318904 < sym__0__7851147553396318904 && (otherRec.sym__0___45_4975505511391694456 < sym__0___45_4975505511391694456 && (otherRec.sym__0___45_7249986409969561654 < sym__0___45_7249986409969561654 && (otherRec.sym__0__4671626969570181580 < sym__0__4671626969570181580 && (otherRec.sym__0___45_3666121704283105054 < sym__0___45_3666121704283105054 && (otherRec.sym__0__5495011930072844518 < sym__0__5495011930072844518 && (otherRec.sym__0___45_4423447118092167055 < sym__0___45_4423447118092167055 && (otherRec.sym__0___45_1608082021099887893 < sym__0___45_1608082021099887893 && otherRec.sym__0__1584187396639360899 < sym__0__1584187396639360899))))))))))))))));
  }
  bool operator ==(const Record3& otherRec) const{
    return (otherRec.sym__0___45_7574074018531922998 == sym__0___45_7574074018531922998 && (otherRec.sym__0__1125464382786937920 == sym__0__1125464382786937920 && (otherRec.sym__0___45_8257174981563598792 == sym__0___45_8257174981563598792 && (otherRec.sym__0__957746932829998382 == sym__0__957746932829998382 && (otherRec.sym__0__934137931677987637 == sym__0__934137931677987637 && (otherRec.sym__0___45_7332894783442362324 == sym__0___45_7332894783442362324 && (otherRec.sym__0__8974811218372806325 == sym__0__8974811218372806325 && (otherRec.sym__0___45_5217562530132451785 == sym__0___45_5217562530132451785 && (otherRec.sym__0__7851147553396318904 == sym__0__7851147553396318904 && (otherRec.sym__0___45_4975505511391694456 == sym__0___45_4975505511391694456 && (otherRec.sym__0___45_7249986409969561654 == sym__0___45_7249986409969561654 && (otherRec.sym__0__4671626969570181580 == sym__0__4671626969570181580 && (otherRec.sym__0___45_3666121704283105054 == sym__0___45_3666121704283105054 && (otherRec.sym__0__5495011930072844518 == sym__0__5495011930072844518 && (otherRec.sym__0___45_4423447118092167055 == sym__0___45_4423447118092167055 && (otherRec.sym__0___45_1608082021099887893 == sym__0___45_1608082021099887893 && otherRec.sym__0__1584187396639360899 == sym__0__1584187396639360899))))))))))))))));
  }
  bool operator !=(const Record3& otherRec) const{
    return (otherRec.sym__0___45_7574074018531922998 != sym__0___45_7574074018531922998 || (otherRec.sym__0__1125464382786937920 != sym__0__1125464382786937920 || (otherRec.sym__0___45_8257174981563598792 != sym__0___45_8257174981563598792 || (otherRec.sym__0__957746932829998382 != sym__0__957746932829998382 || (otherRec.sym__0__934137931677987637 != sym__0__934137931677987637 || (otherRec.sym__0___45_7332894783442362324 != sym__0___45_7332894783442362324 || (otherRec.sym__0__8974811218372806325 != sym__0__8974811218372806325 || (otherRec.sym__0___45_5217562530132451785 != sym__0___45_5217562530132451785 || (otherRec.sym__0__7851147553396318904 != sym__0__7851147553396318904 || (otherRec.sym__0___45_4975505511391694456 != sym__0___45_4975505511391694456 || (otherRec.sym__0___45_7249986409969561654 != sym__0___45_7249986409969561654 || (otherRec.sym__0__4671626969570181580 != sym__0__4671626969570181580 || (otherRec.sym__0___45_3666121704283105054 != sym__0___45_3666121704283105054 || (otherRec.sym__0__5495011930072844518 != sym__0__5495011930072844518 || (otherRec.sym__0___45_4423447118092167055 != sym__0___45_4423447118092167055 || (otherRec.sym__0___45_1608082021099887893 != sym__0___45_1608082021099887893 || otherRec.sym__0__1584187396639360899 != sym__0__1584187396639360899))))))))))))))));
  }
  unsigned sym__0___45_7574074018531922998;
  int sym__0__1125464382786937920;
  unsigned sym__0___45_8257174981563598792;
  unsigned sym__0__957746932829998382;
  unsigned sym__0__934137931677987637;
  unsigned sym__0___45_7332894783442362324;
  fluidb_string<21> sym__0__8974811218372806325;
  unsigned sym__0___45_5217562530132451785;
  fluidb_string<10> sym__0__7851147553396318904;
  unsigned sym__0___45_4975505511391694456;
  double sym__0___45_7249986409969561654;
  unsigned sym__0__4671626969570181580;
  double sym__0___45_3666121704283105054;
  unsigned sym__0__5495011930072844518;
  unsigned sym__0___45_4423447118092167055;
  double sym__0___45_1608082021099887893;
  fluidb_string<13> sym__0__1584187396639360899;
 private:
};


class Record6 {
 public:
  Record6(unsigned __sortElem0) : sortElem0(__sortElem0)
  {
  }
  Record6() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0;
    return o.str();
  }
  bool operator <(const Record6& otherRec) const{
    return otherRec.sortElem0 < sortElem0;
  }
  bool operator ==(const Record6& otherRec) const{
    return otherRec.sortElem0 == sortElem0;
  }
  bool operator !=(const Record6& otherRec) const{
    return otherRec.sortElem0 != sortElem0;
  }
  unsigned sortElem0;
 private:
};


class Record53 {
 public:
  Record53(unsigned __sortElem0, fluidb_string<15> __sortElem1) : sortElem0(__sortElem0), sortElem1(__sortElem1)
  {
  }
  Record53() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0 << " | " << arrToString(sortElem1);
    return o.str();
  }
  bool operator <(const Record53& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && otherRec.sortElem1 < sortElem1);
  }
  bool operator ==(const Record53& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && otherRec.sortElem1 == sortElem1);
  }
  bool operator !=(const Record53& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || otherRec.sortElem1 != sortElem1);
  }
  unsigned sortElem0;
  fluidb_string<15> sortElem1;
 private:
};


class Record27 {
 public:
  Record27(unsigned __sym__0__2037864888707786451, fluidb_string<18> __sym__0__8533656712666151747, fluidb_string<9> __sym__0__646314041574508429, fluidb_string<9> __sym__0__6064137978327902054, unsigned __sym__0__3754157776500852496, unsigned __sym__0__6284345160241949046, fluidb_string<7> __sym__0___45_773692805971570325, unsigned __sym__0___45_8399474032083007524, unsigned __sym__0___45_2038947427357444789, unsigned __sym__0__6071994954612827827, unsigned __sym__0__7742515703067448213, unsigned __sym__0__5201219213304227654, fluidb_string<15> __sym__0___45_5896625796158057241, fluidb_string<2> __sym__0___45_1108504872221226081, fluidb_string<2> __sym__0__1055103969674359346, fluidb_string<2> __sym__0__9115626546918942554, fluidb_string<2> __sym__0___45_6850413444013389848) : sym__0__2037864888707786451(__sym__0__2037864888707786451), sym__0__8533656712666151747(__sym__0__8533656712666151747), sym__0__646314041574508429(__sym__0__646314041574508429), sym__0__6064137978327902054(__sym__0__6064137978327902054), sym__0__3754157776500852496(__sym__0__3754157776500852496), sym__0__6284345160241949046(__sym__0__6284345160241949046), sym__0___45_773692805971570325(__sym__0___45_773692805971570325), sym__0___45_8399474032083007524(__sym__0___45_8399474032083007524), sym__0___45_2038947427357444789(__sym__0___45_2038947427357444789), sym__0__6071994954612827827(__sym__0__6071994954612827827), sym__0__7742515703067448213(__sym__0__7742515703067448213), sym__0__5201219213304227654(__sym__0__5201219213304227654), sym__0___45_5896625796158057241(__sym__0___45_5896625796158057241), sym__0___45_1108504872221226081(__sym__0___45_1108504872221226081), sym__0__1055103969674359346(__sym__0__1055103969674359346), sym__0__9115626546918942554(__sym__0__9115626546918942554), sym__0___45_6850413444013389848(__sym__0___45_6850413444013389848)
  {
  }
  Record27() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__2037864888707786451 << " | " << arrToString(sym__0__8533656712666151747) << " | " << arrToString(sym__0__646314041574508429) << " | " << arrToString(sym__0__6064137978327902054) << " | " << sym__0__3754157776500852496 << " | " << sym__0__6284345160241949046 << " | " << arrToString(sym__0___45_773692805971570325) << " | " << sym__0___45_8399474032083007524 << " | " << sym__0___45_2038947427357444789 << " | " << sym__0__6071994954612827827 << " | " << sym__0__7742515703067448213 << " | " << sym__0__5201219213304227654 << " | " << arrToString(sym__0___45_5896625796158057241) << " | " << arrToString(sym__0___45_1108504872221226081) << " | " << arrToString(sym__0__1055103969674359346) << " | " << arrToString(sym__0__9115626546918942554) << " | " << arrToString(sym__0___45_6850413444013389848);
    return o.str();
  }
  bool operator <(const Record27& otherRec) const{
    return (otherRec.sym__0__2037864888707786451 < sym__0__2037864888707786451 && (otherRec.sym__0__8533656712666151747 < sym__0__8533656712666151747 && (otherRec.sym__0__646314041574508429 < sym__0__646314041574508429 && (otherRec.sym__0__6064137978327902054 < sym__0__6064137978327902054 && (otherRec.sym__0__3754157776500852496 < sym__0__3754157776500852496 && (otherRec.sym__0__6284345160241949046 < sym__0__6284345160241949046 && (otherRec.sym__0___45_773692805971570325 < sym__0___45_773692805971570325 && (otherRec.sym__0___45_8399474032083007524 < sym__0___45_8399474032083007524 && (otherRec.sym__0___45_2038947427357444789 < sym__0___45_2038947427357444789 && (otherRec.sym__0__6071994954612827827 < sym__0__6071994954612827827 && (otherRec.sym__0__7742515703067448213 < sym__0__7742515703067448213 && (otherRec.sym__0__5201219213304227654 < sym__0__5201219213304227654 && (otherRec.sym__0___45_5896625796158057241 < sym__0___45_5896625796158057241 && (otherRec.sym__0___45_1108504872221226081 < sym__0___45_1108504872221226081 && (otherRec.sym__0__1055103969674359346 < sym__0__1055103969674359346 && (otherRec.sym__0__9115626546918942554 < sym__0__9115626546918942554 && otherRec.sym__0___45_6850413444013389848 < sym__0___45_6850413444013389848))))))))))))))));
  }
  bool operator ==(const Record27& otherRec) const{
    return (otherRec.sym__0__2037864888707786451 == sym__0__2037864888707786451 && (otherRec.sym__0__8533656712666151747 == sym__0__8533656712666151747 && (otherRec.sym__0__646314041574508429 == sym__0__646314041574508429 && (otherRec.sym__0__6064137978327902054 == sym__0__6064137978327902054 && (otherRec.sym__0__3754157776500852496 == sym__0__3754157776500852496 && (otherRec.sym__0__6284345160241949046 == sym__0__6284345160241949046 && (otherRec.sym__0___45_773692805971570325 == sym__0___45_773692805971570325 && (otherRec.sym__0___45_8399474032083007524 == sym__0___45_8399474032083007524 && (otherRec.sym__0___45_2038947427357444789 == sym__0___45_2038947427357444789 && (otherRec.sym__0__6071994954612827827 == sym__0__6071994954612827827 && (otherRec.sym__0__7742515703067448213 == sym__0__7742515703067448213 && (otherRec.sym__0__5201219213304227654 == sym__0__5201219213304227654 && (otherRec.sym__0___45_5896625796158057241 == sym__0___45_5896625796158057241 && (otherRec.sym__0___45_1108504872221226081 == sym__0___45_1108504872221226081 && (otherRec.sym__0__1055103969674359346 == sym__0__1055103969674359346 && (otherRec.sym__0__9115626546918942554 == sym__0__9115626546918942554 && otherRec.sym__0___45_6850413444013389848 == sym__0___45_6850413444013389848))))))))))))))));
  }
  bool operator !=(const Record27& otherRec) const{
    return (otherRec.sym__0__2037864888707786451 != sym__0__2037864888707786451 || (otherRec.sym__0__8533656712666151747 != sym__0__8533656712666151747 || (otherRec.sym__0__646314041574508429 != sym__0__646314041574508429 || (otherRec.sym__0__6064137978327902054 != sym__0__6064137978327902054 || (otherRec.sym__0__3754157776500852496 != sym__0__3754157776500852496 || (otherRec.sym__0__6284345160241949046 != sym__0__6284345160241949046 || (otherRec.sym__0___45_773692805971570325 != sym__0___45_773692805971570325 || (otherRec.sym__0___45_8399474032083007524 != sym__0___45_8399474032083007524 || (otherRec.sym__0___45_2038947427357444789 != sym__0___45_2038947427357444789 || (otherRec.sym__0__6071994954612827827 != sym__0__6071994954612827827 || (otherRec.sym__0__7742515703067448213 != sym__0__7742515703067448213 || (otherRec.sym__0__5201219213304227654 != sym__0__5201219213304227654 || (otherRec.sym__0___45_5896625796158057241 != sym__0___45_5896625796158057241 || (otherRec.sym__0___45_1108504872221226081 != sym__0___45_1108504872221226081 || (otherRec.sym__0__1055103969674359346 != sym__0__1055103969674359346 || (otherRec.sym__0__9115626546918942554 != sym__0__9115626546918942554 || otherRec.sym__0___45_6850413444013389848 != sym__0___45_6850413444013389848))))))))))))))));
  }
  unsigned sym__0__2037864888707786451;
  fluidb_string<18> sym__0__8533656712666151747;
  fluidb_string<9> sym__0__646314041574508429;
  fluidb_string<9> sym__0__6064137978327902054;
  unsigned sym__0__3754157776500852496;
  unsigned sym__0__6284345160241949046;
  fluidb_string<7> sym__0___45_773692805971570325;
  unsigned sym__0___45_8399474032083007524;
  unsigned sym__0___45_2038947427357444789;
  unsigned sym__0__6071994954612827827;
  unsigned sym__0__7742515703067448213;
  unsigned sym__0__5201219213304227654;
  fluidb_string<15> sym__0___45_5896625796158057241;
  fluidb_string<2> sym__0___45_1108504872221226081;
  fluidb_string<2> sym__0__1055103969674359346;
  fluidb_string<2> sym__0__9115626546918942554;
  fluidb_string<2> sym__0___45_6850413444013389848;
 private:
};


class Record17 {
 public:
  Record17(unsigned __sym__0__2833764152503888409, fluidb_string<18> __sym__0__6938021140779677761, fluidb_string<40> __sym__0___45_4700201805806600089, fluidb_string<11> __sym__0__3362667619044778557, fluidb_string<15> __sym__0__2679827580767046755, fluidb_string<13> __sym__0___45_4186304031693649930, fluidb_string<15> __sym__0__8596564865999609793, fluidb_string<21> __sym__0___45_1671053890158572571, unsigned __sym__0__2256924431415148013, int __sym__0__347872876320563651, unsigned __sym__0___45_7666447219434903317, unsigned __sym__0__1272718151591622153, unsigned __sym__0__4584633926271658914, unsigned __sym__0___45_4610773208091240233, fluidb_string<21> __sym__0___45_5766638191766435038, unsigned __sym__0___45_5211223358204127380, fluidb_string<10> __sym__0__8435431464460332395, unsigned __sym__0___45_6450191115912157957, double __sym__0__7921907673157171693, unsigned __sym__0___45_1699747741436218441, double __sym__0___45_2985562469054236715, unsigned __sym__0__3746029949899912401, unsigned __sym__0___45_989155948099215770, double __sym__0___45_1667761180508152936, fluidb_string<13> __sym__0__5854462121170882944, unsigned __sym__0___45_1023382914117654422, fluidb_string<25> __sym__0__6224010339127806049, fluidb_string<40> __sym__0___45_8804639047977952305, fluidb_string<16> __sym__0__8926375957639307021, fluidb_string<16> __sym__0__5153200798583684363, fluidb_string<13> __sym__0___45_794494697990656050, fluidb_string<15> __sym__0__7308161412148661473) : sym__0__2833764152503888409(__sym__0__2833764152503888409), sym__0__6938021140779677761(__sym__0__6938021140779677761), sym__0___45_4700201805806600089(__sym__0___45_4700201805806600089), sym__0__3362667619044778557(__sym__0__3362667619044778557), sym__0__2679827580767046755(__sym__0__2679827580767046755), sym__0___45_4186304031693649930(__sym__0___45_4186304031693649930), sym__0__8596564865999609793(__sym__0__8596564865999609793), sym__0___45_1671053890158572571(__sym__0___45_1671053890158572571), sym__0__2256924431415148013(__sym__0__2256924431415148013), sym__0__347872876320563651(__sym__0__347872876320563651), sym__0___45_7666447219434903317(__sym__0___45_7666447219434903317), sym__0__1272718151591622153(__sym__0__1272718151591622153), sym__0__4584633926271658914(__sym__0__4584633926271658914), sym__0___45_4610773208091240233(__sym__0___45_4610773208091240233), sym__0___45_5766638191766435038(__sym__0___45_5766638191766435038), sym__0___45_5211223358204127380(__sym__0___45_5211223358204127380), sym__0__8435431464460332395(__sym__0__8435431464460332395), sym__0___45_6450191115912157957(__sym__0___45_6450191115912157957), sym__0__7921907673157171693(__sym__0__7921907673157171693), sym__0___45_1699747741436218441(__sym__0___45_1699747741436218441), sym__0___45_2985562469054236715(__sym__0___45_2985562469054236715), sym__0__3746029949899912401(__sym__0__3746029949899912401), sym__0___45_989155948099215770(__sym__0___45_989155948099215770), sym__0___45_1667761180508152936(__sym__0___45_1667761180508152936), sym__0__5854462121170882944(__sym__0__5854462121170882944), sym__0___45_1023382914117654422(__sym__0___45_1023382914117654422), sym__0__6224010339127806049(__sym__0__6224010339127806049), sym__0___45_8804639047977952305(__sym__0___45_8804639047977952305), sym__0__8926375957639307021(__sym__0__8926375957639307021), sym__0__5153200798583684363(__sym__0__5153200798583684363), sym__0___45_794494697990656050(__sym__0___45_794494697990656050), sym__0__7308161412148661473(__sym__0__7308161412148661473)
  {
  }
  Record17() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__2833764152503888409 << " | " << arrToString(sym__0__6938021140779677761) << " | " << arrToString(sym__0___45_4700201805806600089) << " | " << arrToString(sym__0__3362667619044778557) << " | " << arrToString(sym__0__2679827580767046755) << " | " << arrToString(sym__0___45_4186304031693649930) << " | " << arrToString(sym__0__8596564865999609793) << " | " << arrToString(sym__0___45_1671053890158572571) << " | " << sym__0__2256924431415148013 << " | " << sym__0__347872876320563651 << " | " << sym__0___45_7666447219434903317 << " | " << sym__0__1272718151591622153 << " | " << sym__0__4584633926271658914 << " | " << sym__0___45_4610773208091240233 << " | " << arrToString(sym__0___45_5766638191766435038) << " | " << sym__0___45_5211223358204127380 << " | " << arrToString(sym__0__8435431464460332395) << " | " << sym__0___45_6450191115912157957 << " | " << sym__0__7921907673157171693 << " | " << sym__0___45_1699747741436218441 << " | " << sym__0___45_2985562469054236715 << " | " << sym__0__3746029949899912401 << " | " << sym__0___45_989155948099215770 << " | " << sym__0___45_1667761180508152936 << " | " << arrToString(sym__0__5854462121170882944) << " | " << sym__0___45_1023382914117654422 << " | " << arrToString(sym__0__6224010339127806049) << " | " << arrToString(sym__0___45_8804639047977952305) << " | " << arrToString(sym__0__8926375957639307021) << " | " << arrToString(sym__0__5153200798583684363) << " | " << arrToString(sym__0___45_794494697990656050) << " | " << arrToString(sym__0__7308161412148661473);
    return o.str();
  }
  bool operator <(const Record17& otherRec) const{
    return (otherRec.sym__0__2833764152503888409 < sym__0__2833764152503888409 && (otherRec.sym__0__6938021140779677761 < sym__0__6938021140779677761 && (otherRec.sym__0___45_4700201805806600089 < sym__0___45_4700201805806600089 && (otherRec.sym__0__3362667619044778557 < sym__0__3362667619044778557 && (otherRec.sym__0__2679827580767046755 < sym__0__2679827580767046755 && (otherRec.sym__0___45_4186304031693649930 < sym__0___45_4186304031693649930 && (otherRec.sym__0__8596564865999609793 < sym__0__8596564865999609793 && (otherRec.sym__0___45_1671053890158572571 < sym__0___45_1671053890158572571 && (otherRec.sym__0__2256924431415148013 < sym__0__2256924431415148013 && (otherRec.sym__0__347872876320563651 < sym__0__347872876320563651 && (otherRec.sym__0___45_7666447219434903317 < sym__0___45_7666447219434903317 && (otherRec.sym__0__1272718151591622153 < sym__0__1272718151591622153 && (otherRec.sym__0__4584633926271658914 < sym__0__4584633926271658914 && (otherRec.sym__0___45_4610773208091240233 < sym__0___45_4610773208091240233 && (otherRec.sym__0___45_5766638191766435038 < sym__0___45_5766638191766435038 && (otherRec.sym__0___45_5211223358204127380 < sym__0___45_5211223358204127380 && (otherRec.sym__0__8435431464460332395 < sym__0__8435431464460332395 && (otherRec.sym__0___45_6450191115912157957 < sym__0___45_6450191115912157957 && (otherRec.sym__0__7921907673157171693 < sym__0__7921907673157171693 && (otherRec.sym__0___45_1699747741436218441 < sym__0___45_1699747741436218441 && (otherRec.sym__0___45_2985562469054236715 < sym__0___45_2985562469054236715 && (otherRec.sym__0__3746029949899912401 < sym__0__3746029949899912401 && (otherRec.sym__0___45_989155948099215770 < sym__0___45_989155948099215770 && (otherRec.sym__0___45_1667761180508152936 < sym__0___45_1667761180508152936 && (otherRec.sym__0__5854462121170882944 < sym__0__5854462121170882944 && (otherRec.sym__0___45_1023382914117654422 < sym__0___45_1023382914117654422 && (otherRec.sym__0__6224010339127806049 < sym__0__6224010339127806049 && (otherRec.sym__0___45_8804639047977952305 < sym__0___45_8804639047977952305 && (otherRec.sym__0__8926375957639307021 < sym__0__8926375957639307021 && (otherRec.sym__0__5153200798583684363 < sym__0__5153200798583684363 && (otherRec.sym__0___45_794494697990656050 < sym__0___45_794494697990656050 && otherRec.sym__0__7308161412148661473 < sym__0__7308161412148661473)))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record17& otherRec) const{
    return (otherRec.sym__0__2833764152503888409 == sym__0__2833764152503888409 && (otherRec.sym__0__6938021140779677761 == sym__0__6938021140779677761 && (otherRec.sym__0___45_4700201805806600089 == sym__0___45_4700201805806600089 && (otherRec.sym__0__3362667619044778557 == sym__0__3362667619044778557 && (otherRec.sym__0__2679827580767046755 == sym__0__2679827580767046755 && (otherRec.sym__0___45_4186304031693649930 == sym__0___45_4186304031693649930 && (otherRec.sym__0__8596564865999609793 == sym__0__8596564865999609793 && (otherRec.sym__0___45_1671053890158572571 == sym__0___45_1671053890158572571 && (otherRec.sym__0__2256924431415148013 == sym__0__2256924431415148013 && (otherRec.sym__0__347872876320563651 == sym__0__347872876320563651 && (otherRec.sym__0___45_7666447219434903317 == sym__0___45_7666447219434903317 && (otherRec.sym__0__1272718151591622153 == sym__0__1272718151591622153 && (otherRec.sym__0__4584633926271658914 == sym__0__4584633926271658914 && (otherRec.sym__0___45_4610773208091240233 == sym__0___45_4610773208091240233 && (otherRec.sym__0___45_5766638191766435038 == sym__0___45_5766638191766435038 && (otherRec.sym__0___45_5211223358204127380 == sym__0___45_5211223358204127380 && (otherRec.sym__0__8435431464460332395 == sym__0__8435431464460332395 && (otherRec.sym__0___45_6450191115912157957 == sym__0___45_6450191115912157957 && (otherRec.sym__0__7921907673157171693 == sym__0__7921907673157171693 && (otherRec.sym__0___45_1699747741436218441 == sym__0___45_1699747741436218441 && (otherRec.sym__0___45_2985562469054236715 == sym__0___45_2985562469054236715 && (otherRec.sym__0__3746029949899912401 == sym__0__3746029949899912401 && (otherRec.sym__0___45_989155948099215770 == sym__0___45_989155948099215770 && (otherRec.sym__0___45_1667761180508152936 == sym__0___45_1667761180508152936 && (otherRec.sym__0__5854462121170882944 == sym__0__5854462121170882944 && (otherRec.sym__0___45_1023382914117654422 == sym__0___45_1023382914117654422 && (otherRec.sym__0__6224010339127806049 == sym__0__6224010339127806049 && (otherRec.sym__0___45_8804639047977952305 == sym__0___45_8804639047977952305 && (otherRec.sym__0__8926375957639307021 == sym__0__8926375957639307021 && (otherRec.sym__0__5153200798583684363 == sym__0__5153200798583684363 && (otherRec.sym__0___45_794494697990656050 == sym__0___45_794494697990656050 && otherRec.sym__0__7308161412148661473 == sym__0__7308161412148661473)))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record17& otherRec) const{
    return (otherRec.sym__0__2833764152503888409 != sym__0__2833764152503888409 || (otherRec.sym__0__6938021140779677761 != sym__0__6938021140779677761 || (otherRec.sym__0___45_4700201805806600089 != sym__0___45_4700201805806600089 || (otherRec.sym__0__3362667619044778557 != sym__0__3362667619044778557 || (otherRec.sym__0__2679827580767046755 != sym__0__2679827580767046755 || (otherRec.sym__0___45_4186304031693649930 != sym__0___45_4186304031693649930 || (otherRec.sym__0__8596564865999609793 != sym__0__8596564865999609793 || (otherRec.sym__0___45_1671053890158572571 != sym__0___45_1671053890158572571 || (otherRec.sym__0__2256924431415148013 != sym__0__2256924431415148013 || (otherRec.sym__0__347872876320563651 != sym__0__347872876320563651 || (otherRec.sym__0___45_7666447219434903317 != sym__0___45_7666447219434903317 || (otherRec.sym__0__1272718151591622153 != sym__0__1272718151591622153 || (otherRec.sym__0__4584633926271658914 != sym__0__4584633926271658914 || (otherRec.sym__0___45_4610773208091240233 != sym__0___45_4610773208091240233 || (otherRec.sym__0___45_5766638191766435038 != sym__0___45_5766638191766435038 || (otherRec.sym__0___45_5211223358204127380 != sym__0___45_5211223358204127380 || (otherRec.sym__0__8435431464460332395 != sym__0__8435431464460332395 || (otherRec.sym__0___45_6450191115912157957 != sym__0___45_6450191115912157957 || (otherRec.sym__0__7921907673157171693 != sym__0__7921907673157171693 || (otherRec.sym__0___45_1699747741436218441 != sym__0___45_1699747741436218441 || (otherRec.sym__0___45_2985562469054236715 != sym__0___45_2985562469054236715 || (otherRec.sym__0__3746029949899912401 != sym__0__3746029949899912401 || (otherRec.sym__0___45_989155948099215770 != sym__0___45_989155948099215770 || (otherRec.sym__0___45_1667761180508152936 != sym__0___45_1667761180508152936 || (otherRec.sym__0__5854462121170882944 != sym__0__5854462121170882944 || (otherRec.sym__0___45_1023382914117654422 != sym__0___45_1023382914117654422 || (otherRec.sym__0__6224010339127806049 != sym__0__6224010339127806049 || (otherRec.sym__0___45_8804639047977952305 != sym__0___45_8804639047977952305 || (otherRec.sym__0__8926375957639307021 != sym__0__8926375957639307021 || (otherRec.sym__0__5153200798583684363 != sym__0__5153200798583684363 || (otherRec.sym__0___45_794494697990656050 != sym__0___45_794494697990656050 || otherRec.sym__0__7308161412148661473 != sym__0__7308161412148661473)))))))))))))))))))))))))))))));
  }
  unsigned sym__0__2833764152503888409;
  fluidb_string<18> sym__0__6938021140779677761;
  fluidb_string<40> sym__0___45_4700201805806600089;
  fluidb_string<11> sym__0__3362667619044778557;
  fluidb_string<15> sym__0__2679827580767046755;
  fluidb_string<13> sym__0___45_4186304031693649930;
  fluidb_string<15> sym__0__8596564865999609793;
  fluidb_string<21> sym__0___45_1671053890158572571;
  unsigned sym__0__2256924431415148013;
  int sym__0__347872876320563651;
  unsigned sym__0___45_7666447219434903317;
  unsigned sym__0__1272718151591622153;
  unsigned sym__0__4584633926271658914;
  unsigned sym__0___45_4610773208091240233;
  fluidb_string<21> sym__0___45_5766638191766435038;
  unsigned sym__0___45_5211223358204127380;
  fluidb_string<10> sym__0__8435431464460332395;
  unsigned sym__0___45_6450191115912157957;
  double sym__0__7921907673157171693;
  unsigned sym__0___45_1699747741436218441;
  double sym__0___45_2985562469054236715;
  unsigned sym__0__3746029949899912401;
  unsigned sym__0___45_989155948099215770;
  double sym__0___45_1667761180508152936;
  fluidb_string<13> sym__0__5854462121170882944;
  unsigned sym__0___45_1023382914117654422;
  fluidb_string<25> sym__0__6224010339127806049;
  fluidb_string<40> sym__0___45_8804639047977952305;
  fluidb_string<16> sym__0__8926375957639307021;
  fluidb_string<16> sym__0__5153200798583684363;
  fluidb_string<13> sym__0___45_794494697990656050;
  fluidb_string<15> sym__0__7308161412148661473;
 private:
};


class Record2 {
 public:
  Record2(unsigned __sym__0__59163526776084807, fluidb_string<18> __sym__0___45_1313357857405786385, fluidb_string<40> __sym__0__1337312907475566789, fluidb_string<11> __sym__0__8014013609240026595, fluidb_string<15> __sym__0___45_4888925151068446247, fluidb_string<13> __sym__0__661408193145534136, fluidb_string<15> __sym__0___45_7159405632382799505, fluidb_string<21> __sym__0___45_7793359246716293237) : sym__0__59163526776084807(__sym__0__59163526776084807), sym__0___45_1313357857405786385(__sym__0___45_1313357857405786385), sym__0__1337312907475566789(__sym__0__1337312907475566789), sym__0__8014013609240026595(__sym__0__8014013609240026595), sym__0___45_4888925151068446247(__sym__0___45_4888925151068446247), sym__0__661408193145534136(__sym__0__661408193145534136), sym__0___45_7159405632382799505(__sym__0___45_7159405632382799505), sym__0___45_7793359246716293237(__sym__0___45_7793359246716293237)
  {
  }
  Record2() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__59163526776084807 << " | " << arrToString(sym__0___45_1313357857405786385) << " | " << arrToString(sym__0__1337312907475566789) << " | " << arrToString(sym__0__8014013609240026595) << " | " << arrToString(sym__0___45_4888925151068446247) << " | " << arrToString(sym__0__661408193145534136) << " | " << arrToString(sym__0___45_7159405632382799505) << " | " << arrToString(sym__0___45_7793359246716293237);
    return o.str();
  }
  bool operator <(const Record2& otherRec) const{
    return (otherRec.sym__0__59163526776084807 < sym__0__59163526776084807 && (otherRec.sym__0___45_1313357857405786385 < sym__0___45_1313357857405786385 && (otherRec.sym__0__1337312907475566789 < sym__0__1337312907475566789 && (otherRec.sym__0__8014013609240026595 < sym__0__8014013609240026595 && (otherRec.sym__0___45_4888925151068446247 < sym__0___45_4888925151068446247 && (otherRec.sym__0__661408193145534136 < sym__0__661408193145534136 && (otherRec.sym__0___45_7159405632382799505 < sym__0___45_7159405632382799505 && otherRec.sym__0___45_7793359246716293237 < sym__0___45_7793359246716293237)))))));
  }
  bool operator ==(const Record2& otherRec) const{
    return (otherRec.sym__0__59163526776084807 == sym__0__59163526776084807 && (otherRec.sym__0___45_1313357857405786385 == sym__0___45_1313357857405786385 && (otherRec.sym__0__1337312907475566789 == sym__0__1337312907475566789 && (otherRec.sym__0__8014013609240026595 == sym__0__8014013609240026595 && (otherRec.sym__0___45_4888925151068446247 == sym__0___45_4888925151068446247 && (otherRec.sym__0__661408193145534136 == sym__0__661408193145534136 && (otherRec.sym__0___45_7159405632382799505 == sym__0___45_7159405632382799505 && otherRec.sym__0___45_7793359246716293237 == sym__0___45_7793359246716293237)))))));
  }
  bool operator !=(const Record2& otherRec) const{
    return (otherRec.sym__0__59163526776084807 != sym__0__59163526776084807 || (otherRec.sym__0___45_1313357857405786385 != sym__0___45_1313357857405786385 || (otherRec.sym__0__1337312907475566789 != sym__0__1337312907475566789 || (otherRec.sym__0__8014013609240026595 != sym__0__8014013609240026595 || (otherRec.sym__0___45_4888925151068446247 != sym__0___45_4888925151068446247 || (otherRec.sym__0__661408193145534136 != sym__0__661408193145534136 || (otherRec.sym__0___45_7159405632382799505 != sym__0___45_7159405632382799505 || otherRec.sym__0___45_7793359246716293237 != sym__0___45_7793359246716293237)))))));
  }
  unsigned sym__0__59163526776084807;
  fluidb_string<18> sym__0___45_1313357857405786385;
  fluidb_string<40> sym__0__1337312907475566789;
  fluidb_string<11> sym__0__8014013609240026595;
  fluidb_string<15> sym__0___45_4888925151068446247;
  fluidb_string<13> sym__0__661408193145534136;
  fluidb_string<15> sym__0___45_7159405632382799505;
  fluidb_string<21> sym__0___45_7793359246716293237;
 private:
};


class Record4 {
 public:
  Record4(unsigned __sym__0___45_1736119143219510946, fluidb_string<18> __sym__0___45_6254978739620261338, fluidb_string<40> __sym__0___45_3433245884379047924, fluidb_string<11> __sym__0__335122102779689530, fluidb_string<15> __sym__0___45_2619371052495888896, fluidb_string<13> __sym__0___45_8731265466176474863, fluidb_string<15> __sym__0___45_2379278044270702682, fluidb_string<21> __sym__0__7347976226894739458, unsigned __sym__0__3747556824946511754, int __sym__0___45_5923275189625227360, unsigned __sym__0__7468833796730993416, unsigned __sym__0__5892592054432301294, unsigned __sym__0___45_1698752203077924891, unsigned __sym__0__2831589643883571996, fluidb_string<21> __sym__0___45_1276096088485418651, unsigned __sym__0__8110382433556489775, fluidb_string<10> __sym__0__3757319617766719880, unsigned __sym__0__5502205664739531000, double __sym__0___45_8986835308374785142, unsigned __sym__0___45_5161244370257907652, double __sym__0__1295988368255002514, unsigned __sym__0___45_2951377264512592234, unsigned __sym__0__7552081207952688929, double __sym__0___45_128169927841612813, fluidb_string<13> __sym__0___45_3196069500202842213) : sym__0___45_1736119143219510946(__sym__0___45_1736119143219510946), sym__0___45_6254978739620261338(__sym__0___45_6254978739620261338), sym__0___45_3433245884379047924(__sym__0___45_3433245884379047924), sym__0__335122102779689530(__sym__0__335122102779689530), sym__0___45_2619371052495888896(__sym__0___45_2619371052495888896), sym__0___45_8731265466176474863(__sym__0___45_8731265466176474863), sym__0___45_2379278044270702682(__sym__0___45_2379278044270702682), sym__0__7347976226894739458(__sym__0__7347976226894739458), sym__0__3747556824946511754(__sym__0__3747556824946511754), sym__0___45_5923275189625227360(__sym__0___45_5923275189625227360), sym__0__7468833796730993416(__sym__0__7468833796730993416), sym__0__5892592054432301294(__sym__0__5892592054432301294), sym__0___45_1698752203077924891(__sym__0___45_1698752203077924891), sym__0__2831589643883571996(__sym__0__2831589643883571996), sym__0___45_1276096088485418651(__sym__0___45_1276096088485418651), sym__0__8110382433556489775(__sym__0__8110382433556489775), sym__0__3757319617766719880(__sym__0__3757319617766719880), sym__0__5502205664739531000(__sym__0__5502205664739531000), sym__0___45_8986835308374785142(__sym__0___45_8986835308374785142), sym__0___45_5161244370257907652(__sym__0___45_5161244370257907652), sym__0__1295988368255002514(__sym__0__1295988368255002514), sym__0___45_2951377264512592234(__sym__0___45_2951377264512592234), sym__0__7552081207952688929(__sym__0__7552081207952688929), sym__0___45_128169927841612813(__sym__0___45_128169927841612813), sym__0___45_3196069500202842213(__sym__0___45_3196069500202842213)
  {
  }
  Record4() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_1736119143219510946 << " | " << arrToString(sym__0___45_6254978739620261338) << " | " << arrToString(sym__0___45_3433245884379047924) << " | " << arrToString(sym__0__335122102779689530) << " | " << arrToString(sym__0___45_2619371052495888896) << " | " << arrToString(sym__0___45_8731265466176474863) << " | " << arrToString(sym__0___45_2379278044270702682) << " | " << arrToString(sym__0__7347976226894739458) << " | " << sym__0__3747556824946511754 << " | " << sym__0___45_5923275189625227360 << " | " << sym__0__7468833796730993416 << " | " << sym__0__5892592054432301294 << " | " << sym__0___45_1698752203077924891 << " | " << sym__0__2831589643883571996 << " | " << arrToString(sym__0___45_1276096088485418651) << " | " << sym__0__8110382433556489775 << " | " << arrToString(sym__0__3757319617766719880) << " | " << sym__0__5502205664739531000 << " | " << sym__0___45_8986835308374785142 << " | " << sym__0___45_5161244370257907652 << " | " << sym__0__1295988368255002514 << " | " << sym__0___45_2951377264512592234 << " | " << sym__0__7552081207952688929 << " | " << sym__0___45_128169927841612813 << " | " << arrToString(sym__0___45_3196069500202842213);
    return o.str();
  }
  bool operator <(const Record4& otherRec) const{
    return (otherRec.sym__0___45_1736119143219510946 < sym__0___45_1736119143219510946 && (otherRec.sym__0___45_6254978739620261338 < sym__0___45_6254978739620261338 && (otherRec.sym__0___45_3433245884379047924 < sym__0___45_3433245884379047924 && (otherRec.sym__0__335122102779689530 < sym__0__335122102779689530 && (otherRec.sym__0___45_2619371052495888896 < sym__0___45_2619371052495888896 && (otherRec.sym__0___45_8731265466176474863 < sym__0___45_8731265466176474863 && (otherRec.sym__0___45_2379278044270702682 < sym__0___45_2379278044270702682 && (otherRec.sym__0__7347976226894739458 < sym__0__7347976226894739458 && (otherRec.sym__0__3747556824946511754 < sym__0__3747556824946511754 && (otherRec.sym__0___45_5923275189625227360 < sym__0___45_5923275189625227360 && (otherRec.sym__0__7468833796730993416 < sym__0__7468833796730993416 && (otherRec.sym__0__5892592054432301294 < sym__0__5892592054432301294 && (otherRec.sym__0___45_1698752203077924891 < sym__0___45_1698752203077924891 && (otherRec.sym__0__2831589643883571996 < sym__0__2831589643883571996 && (otherRec.sym__0___45_1276096088485418651 < sym__0___45_1276096088485418651 && (otherRec.sym__0__8110382433556489775 < sym__0__8110382433556489775 && (otherRec.sym__0__3757319617766719880 < sym__0__3757319617766719880 && (otherRec.sym__0__5502205664739531000 < sym__0__5502205664739531000 && (otherRec.sym__0___45_8986835308374785142 < sym__0___45_8986835308374785142 && (otherRec.sym__0___45_5161244370257907652 < sym__0___45_5161244370257907652 && (otherRec.sym__0__1295988368255002514 < sym__0__1295988368255002514 && (otherRec.sym__0___45_2951377264512592234 < sym__0___45_2951377264512592234 && (otherRec.sym__0__7552081207952688929 < sym__0__7552081207952688929 && (otherRec.sym__0___45_128169927841612813 < sym__0___45_128169927841612813 && otherRec.sym__0___45_3196069500202842213 < sym__0___45_3196069500202842213))))))))))))))))))))))));
  }
  bool operator ==(const Record4& otherRec) const{
    return (otherRec.sym__0___45_1736119143219510946 == sym__0___45_1736119143219510946 && (otherRec.sym__0___45_6254978739620261338 == sym__0___45_6254978739620261338 && (otherRec.sym__0___45_3433245884379047924 == sym__0___45_3433245884379047924 && (otherRec.sym__0__335122102779689530 == sym__0__335122102779689530 && (otherRec.sym__0___45_2619371052495888896 == sym__0___45_2619371052495888896 && (otherRec.sym__0___45_8731265466176474863 == sym__0___45_8731265466176474863 && (otherRec.sym__0___45_2379278044270702682 == sym__0___45_2379278044270702682 && (otherRec.sym__0__7347976226894739458 == sym__0__7347976226894739458 && (otherRec.sym__0__3747556824946511754 == sym__0__3747556824946511754 && (otherRec.sym__0___45_5923275189625227360 == sym__0___45_5923275189625227360 && (otherRec.sym__0__7468833796730993416 == sym__0__7468833796730993416 && (otherRec.sym__0__5892592054432301294 == sym__0__5892592054432301294 && (otherRec.sym__0___45_1698752203077924891 == sym__0___45_1698752203077924891 && (otherRec.sym__0__2831589643883571996 == sym__0__2831589643883571996 && (otherRec.sym__0___45_1276096088485418651 == sym__0___45_1276096088485418651 && (otherRec.sym__0__8110382433556489775 == sym__0__8110382433556489775 && (otherRec.sym__0__3757319617766719880 == sym__0__3757319617766719880 && (otherRec.sym__0__5502205664739531000 == sym__0__5502205664739531000 && (otherRec.sym__0___45_8986835308374785142 == sym__0___45_8986835308374785142 && (otherRec.sym__0___45_5161244370257907652 == sym__0___45_5161244370257907652 && (otherRec.sym__0__1295988368255002514 == sym__0__1295988368255002514 && (otherRec.sym__0___45_2951377264512592234 == sym__0___45_2951377264512592234 && (otherRec.sym__0__7552081207952688929 == sym__0__7552081207952688929 && (otherRec.sym__0___45_128169927841612813 == sym__0___45_128169927841612813 && otherRec.sym__0___45_3196069500202842213 == sym__0___45_3196069500202842213))))))))))))))))))))))));
  }
  bool operator !=(const Record4& otherRec) const{
    return (otherRec.sym__0___45_1736119143219510946 != sym__0___45_1736119143219510946 || (otherRec.sym__0___45_6254978739620261338 != sym__0___45_6254978739620261338 || (otherRec.sym__0___45_3433245884379047924 != sym__0___45_3433245884379047924 || (otherRec.sym__0__335122102779689530 != sym__0__335122102779689530 || (otherRec.sym__0___45_2619371052495888896 != sym__0___45_2619371052495888896 || (otherRec.sym__0___45_8731265466176474863 != sym__0___45_8731265466176474863 || (otherRec.sym__0___45_2379278044270702682 != sym__0___45_2379278044270702682 || (otherRec.sym__0__7347976226894739458 != sym__0__7347976226894739458 || (otherRec.sym__0__3747556824946511754 != sym__0__3747556824946511754 || (otherRec.sym__0___45_5923275189625227360 != sym__0___45_5923275189625227360 || (otherRec.sym__0__7468833796730993416 != sym__0__7468833796730993416 || (otherRec.sym__0__5892592054432301294 != sym__0__5892592054432301294 || (otherRec.sym__0___45_1698752203077924891 != sym__0___45_1698752203077924891 || (otherRec.sym__0__2831589643883571996 != sym__0__2831589643883571996 || (otherRec.sym__0___45_1276096088485418651 != sym__0___45_1276096088485418651 || (otherRec.sym__0__8110382433556489775 != sym__0__8110382433556489775 || (otherRec.sym__0__3757319617766719880 != sym__0__3757319617766719880 || (otherRec.sym__0__5502205664739531000 != sym__0__5502205664739531000 || (otherRec.sym__0___45_8986835308374785142 != sym__0___45_8986835308374785142 || (otherRec.sym__0___45_5161244370257907652 != sym__0___45_5161244370257907652 || (otherRec.sym__0__1295988368255002514 != sym__0__1295988368255002514 || (otherRec.sym__0___45_2951377264512592234 != sym__0___45_2951377264512592234 || (otherRec.sym__0__7552081207952688929 != sym__0__7552081207952688929 || (otherRec.sym__0___45_128169927841612813 != sym__0___45_128169927841612813 || otherRec.sym__0___45_3196069500202842213 != sym__0___45_3196069500202842213))))))))))))))))))))))));
  }
  unsigned sym__0___45_1736119143219510946;
  fluidb_string<18> sym__0___45_6254978739620261338;
  fluidb_string<40> sym__0___45_3433245884379047924;
  fluidb_string<11> sym__0__335122102779689530;
  fluidb_string<15> sym__0___45_2619371052495888896;
  fluidb_string<13> sym__0___45_8731265466176474863;
  fluidb_string<15> sym__0___45_2379278044270702682;
  fluidb_string<21> sym__0__7347976226894739458;
  unsigned sym__0__3747556824946511754;
  int sym__0___45_5923275189625227360;
  unsigned sym__0__7468833796730993416;
  unsigned sym__0__5892592054432301294;
  unsigned sym__0___45_1698752203077924891;
  unsigned sym__0__2831589643883571996;
  fluidb_string<21> sym__0___45_1276096088485418651;
  unsigned sym__0__8110382433556489775;
  fluidb_string<10> sym__0__3757319617766719880;
  unsigned sym__0__5502205664739531000;
  double sym__0___45_8986835308374785142;
  unsigned sym__0___45_5161244370257907652;
  double sym__0__1295988368255002514;
  unsigned sym__0___45_2951377264512592234;
  unsigned sym__0__7552081207952688929;
  double sym__0___45_128169927841612813;
  fluidb_string<13> sym__0___45_3196069500202842213;
 private:
};


class Record16 {
 public:
  Record16(unsigned __sym__0___45_9117911789383871612, fluidb_string<25> __sym__0___45_1547112764757372609, fluidb_string<40> __sym__0___45_8663957751614366179, fluidb_string<16> __sym__0__1466641425010216931, fluidb_string<16> __sym__0__3672857626658041553, fluidb_string<13> __sym__0___45_3362440237381592032, fluidb_string<15> __sym__0___45_6631364176934158657) : sym__0___45_9117911789383871612(__sym__0___45_9117911789383871612), sym__0___45_1547112764757372609(__sym__0___45_1547112764757372609), sym__0___45_8663957751614366179(__sym__0___45_8663957751614366179), sym__0__1466641425010216931(__sym__0__1466641425010216931), sym__0__3672857626658041553(__sym__0__3672857626658041553), sym__0___45_3362440237381592032(__sym__0___45_3362440237381592032), sym__0___45_6631364176934158657(__sym__0___45_6631364176934158657)
  {
  }
  Record16() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_9117911789383871612 << " | " << arrToString(sym__0___45_1547112764757372609) << " | " << arrToString(sym__0___45_8663957751614366179) << " | " << arrToString(sym__0__1466641425010216931) << " | " << arrToString(sym__0__3672857626658041553) << " | " << arrToString(sym__0___45_3362440237381592032) << " | " << arrToString(sym__0___45_6631364176934158657);
    return o.str();
  }
  bool operator <(const Record16& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 < sym__0___45_9117911789383871612 && (otherRec.sym__0___45_1547112764757372609 < sym__0___45_1547112764757372609 && (otherRec.sym__0___45_8663957751614366179 < sym__0___45_8663957751614366179 && (otherRec.sym__0__1466641425010216931 < sym__0__1466641425010216931 && (otherRec.sym__0__3672857626658041553 < sym__0__3672857626658041553 && (otherRec.sym__0___45_3362440237381592032 < sym__0___45_3362440237381592032 && otherRec.sym__0___45_6631364176934158657 < sym__0___45_6631364176934158657))))));
  }
  bool operator ==(const Record16& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 == sym__0___45_9117911789383871612 && (otherRec.sym__0___45_1547112764757372609 == sym__0___45_1547112764757372609 && (otherRec.sym__0___45_8663957751614366179 == sym__0___45_8663957751614366179 && (otherRec.sym__0__1466641425010216931 == sym__0__1466641425010216931 && (otherRec.sym__0__3672857626658041553 == sym__0__3672857626658041553 && (otherRec.sym__0___45_3362440237381592032 == sym__0___45_3362440237381592032 && otherRec.sym__0___45_6631364176934158657 == sym__0___45_6631364176934158657))))));
  }
  bool operator !=(const Record16& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 != sym__0___45_9117911789383871612 || (otherRec.sym__0___45_1547112764757372609 != sym__0___45_1547112764757372609 || (otherRec.sym__0___45_8663957751614366179 != sym__0___45_8663957751614366179 || (otherRec.sym__0__1466641425010216931 != sym__0__1466641425010216931 || (otherRec.sym__0__3672857626658041553 != sym__0__3672857626658041553 || (otherRec.sym__0___45_3362440237381592032 != sym__0___45_3362440237381592032 || otherRec.sym__0___45_6631364176934158657 != sym__0___45_6631364176934158657))))));
  }
  unsigned sym__0___45_9117911789383871612;
  fluidb_string<25> sym__0___45_1547112764757372609;
  fluidb_string<40> sym__0___45_8663957751614366179;
  fluidb_string<16> sym__0__1466641425010216931;
  fluidb_string<16> sym__0__3672857626658041553;
  fluidb_string<13> sym__0___45_3362440237381592032;
  fluidb_string<15> sym__0___45_6631364176934158657;
 private:
};


class Record15 {
 public:
  Record15(unsigned __sym__0__9004647469590526899, fluidb_string<18> __sym__0___45_1621348641261898005, fluidb_string<40> __sym__0__614427126981106829, fluidb_string<11> __sym__0___45_2454293820925122065, fluidb_string<15> __sym__0__6553227872838818177, fluidb_string<13> __sym__0___45_4248174812301520048, fluidb_string<15> __sym__0___45_3914904628387332757, fluidb_string<21> __sym__0___45_5446426298209956761, unsigned __sym__0___45_2558673723420522753, int __sym__0___45_3519351712545876895, unsigned __sym__0___45_1754306014800131719, unsigned __sym__0__6212025267607306819, unsigned __sym__0__2772749593389396148, unsigned __sym__0___45_4019035565219397859, fluidb_string<21> __sym__0___45_6819607202635958988, unsigned __sym__0__4920008974061631994, fluidb_string<10> __sym__0___45_8128105244823042823, unsigned __sym__0___45_2374853137558343895, double __sym__0__930686933803596543, unsigned __sym__0__5145129428883827325, double __sym__0__1860202553700236407, unsigned __sym__0___45_20127004494246501, unsigned __sym__0___45_3013783536855820064, double __sym__0___45_288503368240108258, fluidb_string<13> __sym__0___45_2265690738963363690) : sym__0__9004647469590526899(__sym__0__9004647469590526899), sym__0___45_1621348641261898005(__sym__0___45_1621348641261898005), sym__0__614427126981106829(__sym__0__614427126981106829), sym__0___45_2454293820925122065(__sym__0___45_2454293820925122065), sym__0__6553227872838818177(__sym__0__6553227872838818177), sym__0___45_4248174812301520048(__sym__0___45_4248174812301520048), sym__0___45_3914904628387332757(__sym__0___45_3914904628387332757), sym__0___45_5446426298209956761(__sym__0___45_5446426298209956761), sym__0___45_2558673723420522753(__sym__0___45_2558673723420522753), sym__0___45_3519351712545876895(__sym__0___45_3519351712545876895), sym__0___45_1754306014800131719(__sym__0___45_1754306014800131719), sym__0__6212025267607306819(__sym__0__6212025267607306819), sym__0__2772749593389396148(__sym__0__2772749593389396148), sym__0___45_4019035565219397859(__sym__0___45_4019035565219397859), sym__0___45_6819607202635958988(__sym__0___45_6819607202635958988), sym__0__4920008974061631994(__sym__0__4920008974061631994), sym__0___45_8128105244823042823(__sym__0___45_8128105244823042823), sym__0___45_2374853137558343895(__sym__0___45_2374853137558343895), sym__0__930686933803596543(__sym__0__930686933803596543), sym__0__5145129428883827325(__sym__0__5145129428883827325), sym__0__1860202553700236407(__sym__0__1860202553700236407), sym__0___45_20127004494246501(__sym__0___45_20127004494246501), sym__0___45_3013783536855820064(__sym__0___45_3013783536855820064), sym__0___45_288503368240108258(__sym__0___45_288503368240108258), sym__0___45_2265690738963363690(__sym__0___45_2265690738963363690)
  {
  }
  Record15() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__9004647469590526899 << " | " << arrToString(sym__0___45_1621348641261898005) << " | " << arrToString(sym__0__614427126981106829) << " | " << arrToString(sym__0___45_2454293820925122065) << " | " << arrToString(sym__0__6553227872838818177) << " | " << arrToString(sym__0___45_4248174812301520048) << " | " << arrToString(sym__0___45_3914904628387332757) << " | " << arrToString(sym__0___45_5446426298209956761) << " | " << sym__0___45_2558673723420522753 << " | " << sym__0___45_3519351712545876895 << " | " << sym__0___45_1754306014800131719 << " | " << sym__0__6212025267607306819 << " | " << sym__0__2772749593389396148 << " | " << sym__0___45_4019035565219397859 << " | " << arrToString(sym__0___45_6819607202635958988) << " | " << sym__0__4920008974061631994 << " | " << arrToString(sym__0___45_8128105244823042823) << " | " << sym__0___45_2374853137558343895 << " | " << sym__0__930686933803596543 << " | " << sym__0__5145129428883827325 << " | " << sym__0__1860202553700236407 << " | " << sym__0___45_20127004494246501 << " | " << sym__0___45_3013783536855820064 << " | " << sym__0___45_288503368240108258 << " | " << arrToString(sym__0___45_2265690738963363690);
    return o.str();
  }
  bool operator <(const Record15& otherRec) const{
    return (otherRec.sym__0__9004647469590526899 < sym__0__9004647469590526899 && (otherRec.sym__0___45_1621348641261898005 < sym__0___45_1621348641261898005 && (otherRec.sym__0__614427126981106829 < sym__0__614427126981106829 && (otherRec.sym__0___45_2454293820925122065 < sym__0___45_2454293820925122065 && (otherRec.sym__0__6553227872838818177 < sym__0__6553227872838818177 && (otherRec.sym__0___45_4248174812301520048 < sym__0___45_4248174812301520048 && (otherRec.sym__0___45_3914904628387332757 < sym__0___45_3914904628387332757 && (otherRec.sym__0___45_5446426298209956761 < sym__0___45_5446426298209956761 && (otherRec.sym__0___45_2558673723420522753 < sym__0___45_2558673723420522753 && (otherRec.sym__0___45_3519351712545876895 < sym__0___45_3519351712545876895 && (otherRec.sym__0___45_1754306014800131719 < sym__0___45_1754306014800131719 && (otherRec.sym__0__6212025267607306819 < sym__0__6212025267607306819 && (otherRec.sym__0__2772749593389396148 < sym__0__2772749593389396148 && (otherRec.sym__0___45_4019035565219397859 < sym__0___45_4019035565219397859 && (otherRec.sym__0___45_6819607202635958988 < sym__0___45_6819607202635958988 && (otherRec.sym__0__4920008974061631994 < sym__0__4920008974061631994 && (otherRec.sym__0___45_8128105244823042823 < sym__0___45_8128105244823042823 && (otherRec.sym__0___45_2374853137558343895 < sym__0___45_2374853137558343895 && (otherRec.sym__0__930686933803596543 < sym__0__930686933803596543 && (otherRec.sym__0__5145129428883827325 < sym__0__5145129428883827325 && (otherRec.sym__0__1860202553700236407 < sym__0__1860202553700236407 && (otherRec.sym__0___45_20127004494246501 < sym__0___45_20127004494246501 && (otherRec.sym__0___45_3013783536855820064 < sym__0___45_3013783536855820064 && (otherRec.sym__0___45_288503368240108258 < sym__0___45_288503368240108258 && otherRec.sym__0___45_2265690738963363690 < sym__0___45_2265690738963363690))))))))))))))))))))))));
  }
  bool operator ==(const Record15& otherRec) const{
    return (otherRec.sym__0__9004647469590526899 == sym__0__9004647469590526899 && (otherRec.sym__0___45_1621348641261898005 == sym__0___45_1621348641261898005 && (otherRec.sym__0__614427126981106829 == sym__0__614427126981106829 && (otherRec.sym__0___45_2454293820925122065 == sym__0___45_2454293820925122065 && (otherRec.sym__0__6553227872838818177 == sym__0__6553227872838818177 && (otherRec.sym__0___45_4248174812301520048 == sym__0___45_4248174812301520048 && (otherRec.sym__0___45_3914904628387332757 == sym__0___45_3914904628387332757 && (otherRec.sym__0___45_5446426298209956761 == sym__0___45_5446426298209956761 && (otherRec.sym__0___45_2558673723420522753 == sym__0___45_2558673723420522753 && (otherRec.sym__0___45_3519351712545876895 == sym__0___45_3519351712545876895 && (otherRec.sym__0___45_1754306014800131719 == sym__0___45_1754306014800131719 && (otherRec.sym__0__6212025267607306819 == sym__0__6212025267607306819 && (otherRec.sym__0__2772749593389396148 == sym__0__2772749593389396148 && (otherRec.sym__0___45_4019035565219397859 == sym__0___45_4019035565219397859 && (otherRec.sym__0___45_6819607202635958988 == sym__0___45_6819607202635958988 && (otherRec.sym__0__4920008974061631994 == sym__0__4920008974061631994 && (otherRec.sym__0___45_8128105244823042823 == sym__0___45_8128105244823042823 && (otherRec.sym__0___45_2374853137558343895 == sym__0___45_2374853137558343895 && (otherRec.sym__0__930686933803596543 == sym__0__930686933803596543 && (otherRec.sym__0__5145129428883827325 == sym__0__5145129428883827325 && (otherRec.sym__0__1860202553700236407 == sym__0__1860202553700236407 && (otherRec.sym__0___45_20127004494246501 == sym__0___45_20127004494246501 && (otherRec.sym__0___45_3013783536855820064 == sym__0___45_3013783536855820064 && (otherRec.sym__0___45_288503368240108258 == sym__0___45_288503368240108258 && otherRec.sym__0___45_2265690738963363690 == sym__0___45_2265690738963363690))))))))))))))))))))))));
  }
  bool operator !=(const Record15& otherRec) const{
    return (otherRec.sym__0__9004647469590526899 != sym__0__9004647469590526899 || (otherRec.sym__0___45_1621348641261898005 != sym__0___45_1621348641261898005 || (otherRec.sym__0__614427126981106829 != sym__0__614427126981106829 || (otherRec.sym__0___45_2454293820925122065 != sym__0___45_2454293820925122065 || (otherRec.sym__0__6553227872838818177 != sym__0__6553227872838818177 || (otherRec.sym__0___45_4248174812301520048 != sym__0___45_4248174812301520048 || (otherRec.sym__0___45_3914904628387332757 != sym__0___45_3914904628387332757 || (otherRec.sym__0___45_5446426298209956761 != sym__0___45_5446426298209956761 || (otherRec.sym__0___45_2558673723420522753 != sym__0___45_2558673723420522753 || (otherRec.sym__0___45_3519351712545876895 != sym__0___45_3519351712545876895 || (otherRec.sym__0___45_1754306014800131719 != sym__0___45_1754306014800131719 || (otherRec.sym__0__6212025267607306819 != sym__0__6212025267607306819 || (otherRec.sym__0__2772749593389396148 != sym__0__2772749593389396148 || (otherRec.sym__0___45_4019035565219397859 != sym__0___45_4019035565219397859 || (otherRec.sym__0___45_6819607202635958988 != sym__0___45_6819607202635958988 || (otherRec.sym__0__4920008974061631994 != sym__0__4920008974061631994 || (otherRec.sym__0___45_8128105244823042823 != sym__0___45_8128105244823042823 || (otherRec.sym__0___45_2374853137558343895 != sym__0___45_2374853137558343895 || (otherRec.sym__0__930686933803596543 != sym__0__930686933803596543 || (otherRec.sym__0__5145129428883827325 != sym__0__5145129428883827325 || (otherRec.sym__0__1860202553700236407 != sym__0__1860202553700236407 || (otherRec.sym__0___45_20127004494246501 != sym__0___45_20127004494246501 || (otherRec.sym__0___45_3013783536855820064 != sym__0___45_3013783536855820064 || (otherRec.sym__0___45_288503368240108258 != sym__0___45_288503368240108258 || otherRec.sym__0___45_2265690738963363690 != sym__0___45_2265690738963363690))))))))))))))))))))))));
  }
  unsigned sym__0__9004647469590526899;
  fluidb_string<18> sym__0___45_1621348641261898005;
  fluidb_string<40> sym__0__614427126981106829;
  fluidb_string<11> sym__0___45_2454293820925122065;
  fluidb_string<15> sym__0__6553227872838818177;
  fluidb_string<13> sym__0___45_4248174812301520048;
  fluidb_string<15> sym__0___45_3914904628387332757;
  fluidb_string<21> sym__0___45_5446426298209956761;
  unsigned sym__0___45_2558673723420522753;
  int sym__0___45_3519351712545876895;
  unsigned sym__0___45_1754306014800131719;
  unsigned sym__0__6212025267607306819;
  unsigned sym__0__2772749593389396148;
  unsigned sym__0___45_4019035565219397859;
  fluidb_string<21> sym__0___45_6819607202635958988;
  unsigned sym__0__4920008974061631994;
  fluidb_string<10> sym__0___45_8128105244823042823;
  unsigned sym__0___45_2374853137558343895;
  double sym__0__930686933803596543;
  unsigned sym__0__5145129428883827325;
  double sym__0__1860202553700236407;
  unsigned sym__0___45_20127004494246501;
  unsigned sym__0___45_3013783536855820064;
  double sym__0___45_288503368240108258;
  fluidb_string<13> sym__0___45_2265690738963363690;
 private:
};


class CallableClass56 {
 public:
  Record53 operator()(const Record47& record55) {
    return Record53(record55.sym__0___45_532509241117904863, record55.sym__0__6879476602096058762);
  }
  typedef Record53 Codomain;
  typedef Record47 Domain0;
 private:
};


class CallableClass18 {
 public:
  Record17 operator()(const Record15& record13, const Record16& record14) {
    return Record17(record13.sym__0__9004647469590526899, record13.sym__0___45_1621348641261898005, record13.sym__0__614427126981106829, record13.sym__0___45_2454293820925122065, record13.sym__0__6553227872838818177, record13.sym__0___45_4248174812301520048, record13.sym__0___45_3914904628387332757, record13.sym__0___45_5446426298209956761, record13.sym__0___45_2558673723420522753, record13.sym__0___45_3519351712545876895, record13.sym__0___45_1754306014800131719, record13.sym__0__6212025267607306819, record13.sym__0__2772749593389396148, record13.sym__0___45_4019035565219397859, record13.sym__0___45_6819607202635958988, record13.sym__0__4920008974061631994, record13.sym__0___45_8128105244823042823, record13.sym__0___45_2374853137558343895, record13.sym__0__930686933803596543, record13.sym__0__5145129428883827325, record13.sym__0__1860202553700236407, record13.sym__0___45_20127004494246501, record13.sym__0___45_3013783536855820064, record13.sym__0___45_288503368240108258, record13.sym__0___45_2265690738963363690, record14.sym__0___45_9117911789383871612, record14.sym__0___45_1547112764757372609, record14.sym__0___45_8663957751614366179, record14.sym__0__1466641425010216931, record14.sym__0__3672857626658041553, record14.sym__0___45_3362440237381592032, record14.sym__0___45_6631364176934158657);
  }
  typedef Record17 Codomain;
  typedef Record15 Domain0;
  typedef Record16 Domain1;
 private:
};


class CallableClass24 {
 public:
  bool operator()(const Record17& record23) {
    return like(record23.sym__0___45_794494697990656050, "AMERICA");
  }
  typedef bool Codomain;
  typedef Record17 Domain0;
 private:
};


class CallableClass22 {
 public:
  Record6 operator()(const Record16& record21) {
    return Record6(record21.sym__0___45_9117911789383871612);
  }
  typedef Record6 Codomain;
  typedef Record16 Domain0;
 private:
};


class CallableClass54 {
 public:
  Record53 operator()(const Record49& record46) {
    return Record53(record46.sym__0___45_5677596107407519400, record46.sym__0___45_2044948362686327715);
  }
  typedef Record53 Codomain;
  typedef Record49 Domain0;
 private:
};


class CallableClass32 {
 public:
  Record6 operator()(const Record27& record31) {
    return Record6(record31.sym__0__2037864888707786451);
  }
  typedef Record6 Codomain;
  typedef Record27 Domain0;
 private:
};


class CallableClass45 {
 public:
  bool operator()(const Record38& record44) {
    return (like(record44.sym__0___45_2028921051824210768, "MFGR#1") || like(record44.sym__0___45_2028921051824210768, "MFGR#2"));
  }
  typedef bool Codomain;
  typedef Record38 Domain0;
 private:
};


class CallableClass5 {
 public:
  Record4 operator()(const Record2& record0, const Record3& record1) {
    return Record4(record0.sym__0__59163526776084807, record0.sym__0___45_1313357857405786385, record0.sym__0__1337312907475566789, record0.sym__0__8014013609240026595, record0.sym__0___45_4888925151068446247, record0.sym__0__661408193145534136, record0.sym__0___45_7159405632382799505, record0.sym__0___45_7793359246716293237, record1.sym__0___45_7574074018531922998, record1.sym__0__1125464382786937920, record1.sym__0___45_8257174981563598792, record1.sym__0__957746932829998382, record1.sym__0__934137931677987637, record1.sym__0___45_7332894783442362324, record1.sym__0__8974811218372806325, record1.sym__0___45_5217562530132451785, record1.sym__0__7851147553396318904, record1.sym__0___45_4975505511391694456, record1.sym__0___45_7249986409969561654, record1.sym__0__4671626969570181580, record1.sym__0___45_3666121704283105054, record1.sym__0__5495011930072844518, record1.sym__0___45_4423447118092167055, record1.sym__0___45_1608082021099887893, record1.sym__0__1584187396639360899);
  }
  typedef Record4 Codomain;
  typedef Record2 Domain0;
  typedef Record3 Domain1;
 private:
};


class CallableClass52 {
 public:
  Record47 operator()(const Record49& record46) {
    return Record47(vAggrFirst48(record46.sym__0___45_5677596107407519400), vAggrFirst50(record46.sym__0___45_2044948362686327715), vAggrSum51((record46.sym__0__9142595129731966875 - record46.sym__0__2065559644984295980)));
  }
  typedef Record47 Codomain;
  typedef Record49 Domain0;
 private:
  AggrFirst<unsigned> vAggrFirst48;
  AggrFirst<fluidb_string<15>> vAggrFirst50;
  AggrSum<unsigned> vAggrSum51;
};


class CallableClass10 {
 public:
  Record6 operator()(const Record3& record9) {
    return Record6(record9.sym__0___45_8257174981563598792);
  }
  typedef Record6 Codomain;
  typedef Record3 Domain0;
 private:
};


class CallableClass43 {
 public:
  Record6 operator()(const Record37& record42) {
    return Record6(record42.sym__0__7178003535380331304);
  }
  typedef Record6 Codomain;
  typedef Record37 Domain0;
 private:
};


class CallableClass41 {
 public:
  Record6 operator()(const Record29& record40) {
    return Record6(record40.sym__0__4948888373840408220);
  }
  typedef Record6 Codomain;
  typedef Record29 Domain0;
 private:
};


class CallableClass12 {
 public:
  bool operator()(const Record4& record11) {
    return like(record11.sym__0___45_8731265466176474863, "AMERICA");
  }
  typedef bool Codomain;
  typedef Record4 Domain0;
 private:
};


class CallableClass20 {
 public:
  Record6 operator()(const Record15& record19) {
    return Record6(record19.sym__0__2772749593389396148);
  }
  typedef Record6 Codomain;
  typedef Record15 Domain0;
 private:
};


class CallableClass8 {
 public:
  Record6 operator()(const Record2& record7) {
    return Record6(record7.sym__0__59163526776084807);
  }
  typedef Record6 Codomain;
  typedef Record2 Domain0;
 private:
};


class CallableClass30 {
 public:
  Record29 operator()(const Record27& record25, const Record28& record26) {
    return Record29(record25.sym__0__2037864888707786451, record25.sym__0__8533656712666151747, record25.sym__0__646314041574508429, record25.sym__0__6064137978327902054, record25.sym__0__3754157776500852496, record25.sym__0__6284345160241949046, record25.sym__0___45_773692805971570325, record25.sym__0___45_8399474032083007524, record25.sym__0___45_2038947427357444789, record25.sym__0__6071994954612827827, record25.sym__0__7742515703067448213, record25.sym__0__5201219213304227654, record25.sym__0___45_5896625796158057241, record25.sym__0___45_1108504872221226081, record25.sym__0__1055103969674359346, record25.sym__0__9115626546918942554, record25.sym__0___45_6850413444013389848, record26.sym__0__4247566339799878220, record26.sym__0__8697040551489347700, record26.sym__0___45_7787142226876343730, record26.sym__0___45_1187552991791953032, record26.sym__0__1390452642584850258, record26.sym__0___45_9005760273850656913, record26.sym__0___45_2907459254687711244, record26.sym__0__2480334725598013312, record26.sym__0___45_5187823801620786808, record26.sym__0__1037002594809429170, record26.sym__0__7872086240202880314, record26.sym__0___45_4763399617750053668, record26.sym__0___45_6403921572028951213, record26.sym__0___45_2109502109963253922, record26.sym__0__4067677362432605907, record26.sym__0__8756028414243606329, record26.sym__0__2042385930457662394, record26.sym__0___45_3970547087826794518, record26.sym__0___45_6073766774154422904, record26.sym__0__5018708771628399166, record26.sym__0__1930717928488534032, record26.sym__0__7639906542053526180, record26.sym__0___45_4996791897670673281, record26.sym__0__1294111265768266077, record26.sym__0__7580815044475313637, record26.sym__0__3267254903307740539, record26.sym__0__1571155805396300180, record26.sym__0___45_2363211583366348202, record26.sym__0___45_7067988849542679640, record26.sym__0___45_3941433122784605606, record26.sym__0___45_355406171959865881, record26.sym__0___45_9090722436365569004);
  }
  typedef Record29 Codomain;
  typedef Record27 Domain0;
  typedef Record28 Domain1;
 private:
};


class CallableClass34 {
 public:
  Record6 operator()(const Record28& record33) {
    return Record6(record33.sym__0___45_2109502109963253922);
  }
  typedef Record6 Codomain;
  typedef Record28 Domain0;
 private:
};


class CallableClass39 {
 public:
  Record38 operator()(const Record29& record35, const Record37& record36) {
    return Record38(record35.sym__0___45_8906884911160954364, record35.sym__0__2799000292371979828, record35.sym__0__8867920250735627162, record35.sym__0___45_7576867150402000331, record35.sym__0___45_9125225545914939837, record35.sym__0__4589167397936411269, record35.sym__0__8920142377705747532, record35.sym__0___45_4196858516486091897, record35.sym__0__1195773552714325740, record35.sym__0___45_38686532604732124, record35.sym__0__1274631840214437554, record35.sym__0__8445040522489018709, record35.sym__0__2331348265799254080, record35.sym__0___45_1510963300986711992, record35.sym__0__5289830658136776009, record35.sym__0__7499328126409916481, record35.sym__0__7533033195406205003, record35.sym__0___45_6428147039213761908, record35.sym__0__871736690247302132, record35.sym__0___45_8362046498826819058, record35.sym__0___45_7133132985918421512, record35.sym__0___45_3959357838844936686, record35.sym__0___45_7197031512662271633, record35.sym__0__8583356070728849524, record35.sym__0__1967597999057704256, record35.sym__0__5132421367677851272, record35.sym__0__5071922315287763570, record35.sym__0___45_3637991104308692870, record35.sym__0__4948888373840408220, record35.sym__0___45_7808961130681314221, record35.sym__0__1746575405116951454, record35.sym__0__2153939297276247251, record35.sym__0__5199185301403060729, record35.sym__0__1712959636608595962, record35.sym__0___45_1741951889491243926, record35.sym__0__227891603776809608, record35.sym__0__6207099447983295614, record35.sym__0__335880342687986000, record35.sym__0__2784917890152007524, record35.sym__0___45_5840348331744817409, record35.sym__0__3675426241071643741, record35.sym__0___45_1268803172874807067, record35.sym__0__3110451695433832699, record35.sym__0__5854013247755242004, record35.sym__0___45_1478737863530599082, record35.sym__0___45_6827442181954889560, record35.sym__0__6943297173895896986, record35.sym__0__5526031557462726759, record35.sym__0__2016251883409854356, record36.sym__0__7178003535380331304, record36.sym__0___45_7020257275696364520, record36.sym__0___45_6307179734719967033, record36.sym__0__4568304886257136061, record36.sym__0___45_6291097039630000265, record36.sym__0__551327770031967739, record36.sym__0__3827696365022297353, record36.sym__0___45_1779543743759935870, record36.sym__0__3752090135924368535);
  }
  typedef Record38 Codomain;
  typedef Record29 Domain0;
  typedef Record37 Domain1;
 private:
};






int main() {
  // Delete: (Q1 
  //   (QSort [E0 (ESym "d_year"),E1 ENeg (E0 (ESym "revenue"))]) 
  //   (Q1 
  //     (QGroup 
  //       [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //        (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //        (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //        (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //       [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P2 
  //             POr 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI1"))))) 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI5")))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "d_yearmonth"))) 
  //                 (R0 (E0 (EString "Dec1997")))))) 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5"))))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_custkey"))) 
  //                 (R0 (E0 (ESym "c_custkey"))))) 
  //           (Q0 (TSymbol "customer")) 
  //           (J 
  //             (P0 
  //               (R2 REq 
  //                   (R0 (E0 (ESym "lo_orderdate"))) 
  //                   (R0 (E0 (ESym "d_datekey"))))) 
  //             (Q0 (TSymbol "date")) 
  //             (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QSort [E0 (ESym \"d_year\"),E1 ENeg (E0 (ESym \"revenue\"))]) \n  (Q1 \n    (QGroup \n      [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n       (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n       (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n       (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n      [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]) \n    (S \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P2 \n            POr \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI1\"))))) \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI5\")))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"d_yearmonth\"))) \n                (R0 (E0 (EString \"Dec1997\")))))) \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\"))))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_custkey\"))) \n                (R0 (E0 (ESym \"c_custkey\"))))) \n          (Q0 (TSymbol \"customer\")) \n          (J \n            (P0 \n              (R2 REq \n                  (R0 (E0 (ESym \"lo_orderdate\"))) \n                  (R0 (E0 (ESym \"d_datekey\"))))) \n            (Q0 (TSymbol \"date\")) \n            (Q0 (TSymbol \"lineorder\")))) \n        (Q0 (TSymbol \"supplier\"))))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data267.dat");
  // Delete: (Q1 
  //   (QGroup 
  //     [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //      (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //      (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //      (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //     [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]) 
  //   (S 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5")))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997")))))) 
  //       (P2 
  //         POr 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_city"))) 
  //               (R0 (E0 (EString "UNITED KI1"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_city"))) 
  //               (R0 (E0 (EString "UNITED KI5"))))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_suppkey"))) 
  //             (R0 (E0 (ESym "s_suppkey"))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QGroup \n    [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n     (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n     (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n     (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n    [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]) \n  (S \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\")))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\")))))) \n      (P2 \n        POr \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_city\"))) \n              (R0 (E0 (EString \"UNITED KI1\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_city\"))) \n              (R0 (E0 (EString \"UNITED KI5\"))))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_suppkey\"))) \n            (R0 (E0 (ESym \"s_suppkey\"))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))) \n      (Q0 (TSymbol \"supplier\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data266.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data253.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data255.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5"))))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder"))))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (S \n      (P2 \n        PAnd \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\"))))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\"))))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data258.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq (R0 (E0 (ESym "lo_suppkey"))) (R0 (E0 (ESym "s_suppkey"))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq (R0 (E0 (ESym \"lo_suppkey\"))) (R0 (E0 (ESym \"s_suppkey\"))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data254.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass8, CallableClass10, CallableClass5>(Just<const std::string>("/tmp/fluidb_store/data277.dat"), Just<const std::string>("/tmp/fluidb_store/data276.dat"), Just<const std::string>("/tmp/fluidb_store/data278.dat"), "/run/user/1000/fluidb-data/customer.dat", "/tmp/fluidb_store/data0.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "d_yearmonth"))) 
  //           (R0 (E0 (EString "Dec1997"))))) 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_orderdate"))) 
  //             (R0 (E0 (ESym "d_datekey"))))) 
  //       (Q0 (TSymbol "date")) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"d_yearmonth\"))) \n          (R0 (E0 (EString \"Dec1997\"))))) \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_orderdate\"))) \n            (R0 (E0 (ESym \"d_datekey\"))))) \n      (Q0 (TSymbol \"date\")) \n      (Q0 (TSymbol \"lineorder\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data237.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_region"))) 
  //               (R0 (E0 (EString "AMERICA")))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_region\"))) \n              (R0 (E0 (EString \"AMERICA\")))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass12>(Just<const std::string>("/tmp/fluidb_store/data303.dat"), Just<const std::string>("/tmp/fluidb_store/data304.dat"), "/tmp/fluidb_store/data277.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (J 
  //   (P0 
  //     (R2 REq 
  //         (R0 (E0 (ESym "lo_orderdate"))) 
  //         (R0 (E0 (ESym "d_datekey"))))) 
  //   (Q0 (TSymbol "date")) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq \n        (R0 (E0 (ESym \"lo_orderdate\"))) \n        (R0 (E0 (ESym \"d_datekey\"))))) \n  (Q0 (TSymbol \"date\")) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data149.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass20, CallableClass22, CallableClass18>(Just<const std::string>("/tmp/fluidb_store/data306.dat"), Just<const std::string>("/tmp/fluidb_store/data305.dat"), Just<const std::string>("/tmp/fluidb_store/data307.dat"), "/tmp/fluidb_store/data303.dat", "/tmp/fluidb_store/data3.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5")))))) 
  //         (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992)))))) 
  //       (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_orderdate"))) 
  //               (R0 (E0 (ESym "d_datekey"))))) 
  //         (Q0 (TSymbol "date")) 
  //         (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\")))))) \n        (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992)))))) \n      (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_orderdate\"))) \n              (R0 (E0 (ESym \"d_datekey\"))))) \n        (Q0 (TSymbol \"date\")) \n        (Q0 (TSymbol \"lineorder\")))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data220.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_region"))) 
  //               (R0 (E0 (EString "AMERICA")))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_region\"))) \n              (R0 (E0 (EString \"AMERICA\")))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass24>(Just<const std::string>("/tmp/fluidb_store/data301.dat"), Just<const std::string>("/tmp/fluidb_store/data310.dat"), "/tmp/fluidb_store/data306.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey")))))) 
  //   (Q0 (TSymbol "customer")) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\")))))) \n  (Q0 (TSymbol \"customer\")) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data276.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey")))))) 
  //   (Q0 (TSymbol "customer")) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\")))))) \n  (Q0 (TSymbol \"customer\")) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data278.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "c_region"))) 
  //           (R0 (E0 (EString "AMERICA"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"c_region\"))) \n          (R0 (E0 (EString \"AMERICA\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (Q0 (TSymbol \"lineorder\")))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data305.dat");
  std::cout << "Delete: (Q0 (TSymbol \"supplier\"))" << std::endl;
  deleteFile("/tmp/fluidb_store/data3.dat");
  // Delete: (S 
  //   (P0 
  //     (R2 RLike (R0 (E0 (ESym "c_region"))) (R0 (E0 (EString "AMERICA"))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  std::cout << "Delete: (S \n  (P0 \n    (R2 RLike (R0 (E0 (ESym \"c_region\"))) (R0 (E0 (EString \"AMERICA\"))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (Q0 (TSymbol \"lineorder\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data303.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "s_region"))) 
  //           (R0 (E0 (EString "AMERICA")))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (S 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_region"))) 
  //             (R0 (E0 (EString "AMERICA"))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"s_region\"))) \n          (R0 (E0 (EString \"AMERICA\")))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (S \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_region\"))) \n            (R0 (E0 (EString \"AMERICA\"))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (Q0 (TSymbol \"lineorder\")))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data310.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq (R0 (E0 (ESym "lo_custkey"))) (R0 (E0 (ESym "c_custkey"))))) 
  //   (Q0 (TSymbol "customer")) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq (R0 (E0 (ESym \"lo_custkey\"))) (R0 (E0 (ESym \"c_custkey\"))))) \n  (Q0 (TSymbol \"customer\")) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data277.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_orderdate"))) 
  //               (R0 (E0 (ESym "d_datekey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_orderdate\"))) \n              (R0 (E0 (ESym \"d_datekey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass32, CallableClass34, CallableClass30>(Just<const std::string>("/tmp/fluidb_store/data292.dat"), Just<const std::string>("/tmp/fluidb_store/data311.dat"), Just<const std::string>("/tmp/fluidb_store/data312.dat"), "/tmp/fluidb_store/data1.dat", "/tmp/fluidb_store/data301.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "c_region"))) 
  //           (R0 (E0 (EString "AMERICA")))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"c_region\"))) \n          (R0 (E0 (EString \"AMERICA\")))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (Q0 (TSymbol \"lineorder\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data304.dat");
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         POr 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_city"))) 
  //               (R0 (E0 (EString "UNITED KI1"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_city"))) 
  //               (R0 (E0 (EString "UNITED KI5")))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "d_yearmonth"))) 
  //             (R0 (E0 (EString "Dec1997")))))) 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_orderdate"))) 
  //               (R0 (E0 (ESym "d_datekey"))))) 
  //         (Q0 (TSymbol "date")) 
  //         (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P2 \n      PAnd \n      (P2 \n        POr \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_city\"))) \n              (R0 (E0 (EString \"UNITED KI1\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_city\"))) \n              (R0 (E0 (EString \"UNITED KI5\")))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"d_yearmonth\"))) \n            (R0 (E0 (EString \"Dec1997\")))))) \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_orderdate\"))) \n              (R0 (E0 (ESym \"d_datekey\"))))) \n        (Q0 (TSymbol \"date\")) \n        (Q0 (TSymbol \"lineorder\")))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data235.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_partkey"))) 
  //               (R0 (E0 (ESym "p_partkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_partkey\"))) \n              (R0 (E0 (ESym \"p_partkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass41, CallableClass43, CallableClass39>(Just<const std::string>("/tmp/fluidb_store/data316.dat"), Just<const std::string>("/tmp/fluidb_store/data315.dat"), Just<const std::string>("/tmp/fluidb_store/data317.dat"), "/tmp/fluidb_store/data292.dat", "/tmp/fluidb_store/data2.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "p_mfgr"))) 
  //                 (R0 (E0 (EString "MFGR#1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "p_mfgr"))) 
  //                 (R0 (E0 (EString "MFGR#2"))))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"p_mfgr\"))) \n                (R0 (E0 (EString \"MFGR#1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"p_mfgr\"))) \n                (R0 (E0 (EString \"MFGR#2\"))))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass45>(Just<const std::string>("/tmp/fluidb_store/data290.dat"), Just<const std::string>("/tmp/fluidb_store/data320.dat"), "/tmp/fluidb_store/data316.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QGroup 
  //         [
  //          (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //          (ESym "c_nation",E0 (NAggr AggrFirst (E0 (ESym "c_nation")))),
  //          (
  //            ESym "profit",
  //            E0 
  //               (NAggr 
  //                 AggrSum 
  //                 (E2 ESub 
  //                     (E0 (ESym "lo_revenue")) 
  //                     (E0 (ESym "lo_supplycost"))))
  //           )
  //         ] 
  //         [E0 (ESym "d_year"),E0 (ESym "c_nation")]
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QGroup \n        [\n         (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n         (ESym \"c_nation\",E0 (NAggr AggrFirst (E0 (ESym \"c_nation\")))),\n         (\n           ESym \"profit\",\n           E0 \n              (NAggr \n                AggrSum \n                (E2 ESub \n                    (E0 (ESym \"lo_revenue\")) \n                    (E0 (ESym \"lo_supplycost\"))))\n          )\n        ] \n        [E0 (ESym \"d_year\"),E0 (ESym \"c_nation\")]\n    ]))" << std::endl;
  {
    auto operation = mkAggregation<CallableClass52, CallableClass54>(Just<const std::string>("/tmp/fluidb_store/data321.dat"), Just<const std::string>("/tmp/fluidb_store/data290.dat"), "/tmp/fluidb_store/data290.dat");
    operation.run();
    operation.print_output(10);
  }
  std::cout << "ForwardTrigger: (Just (Right [QSort [E0 (ESym \"d_year\"),E0 (ESym \"c_nation\")]]))" << std::endl;
  {
    auto operation = mkSort<CallableClass56>(Just<const std::string>("/tmp/fluidb_store/data322.dat"), Just<const std::string>("/tmp/fluidb_store/data321.dat"), "/tmp/fluidb_store/data321.dat");
    operation.run();
    operation.print_output(10);
  }
  report_counters();
  return 0;
}
