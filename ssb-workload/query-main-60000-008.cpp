#include <array>

#include <string>

#include <codegen.hh>
class Record27 {
 public:
  Record27(unsigned __sortElem0, unsigned __sortElem1) : sortElem0(__sortElem0), sortElem1(__sortElem1)
  {
  }
  Record27() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0 << " | " << sortElem1;
    return o.str();
  }
  bool operator <(const Record27& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && otherRec.sortElem1 < sortElem1);
  }
  bool operator ==(const Record27& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && otherRec.sortElem1 == sortElem1);
  }
  bool operator !=(const Record27& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || otherRec.sortElem1 != sortElem1);
  }
  unsigned sortElem0;
  unsigned sortElem1;
 private:
};


class Record5 {
 public:
  Record5(unsigned __sym__0__5047421274045357113, fluidb_string<18> __sym__0__1111371532348373905, fluidb_string<40> __sym__0__3616315983793812415, fluidb_string<11> __sym__0__5478499544478842365, fluidb_string<15> __sym__0__9198814011305918491, fluidb_string<13> __sym__0__5184064682442841190, fluidb_string<15> __sym__0__8776819689660585745, fluidb_string<21> __sym__0__3880509548823276917, unsigned __sym__0___45_7245943137499681887, fluidb_string<18> __sym__0___45_2295638738224715823, fluidb_string<9> __sym__0__7231637917665667987, fluidb_string<9> __sym__0___45_8975225596959663088, unsigned __sym__0__3613870501759166498, unsigned __sym__0__1570651575008030560, fluidb_string<7> __sym__0__115945876907898361, unsigned __sym__0__7964449538584066510, unsigned __sym__0__1660564563630425049, unsigned __sym__0___45_8849919160064307967, unsigned __sym__0__4389067787166632955, unsigned __sym__0__8182303437242608, fluidb_string<15> __sym__0__6576599429404095093, fluidb_string<2> __sym__0__7143354719373501837, fluidb_string<2> __sym__0___45_2048743282533748660, fluidb_string<2> __sym__0___45_5050379460643539596, fluidb_string<2> __sym__0___45_5591405934841628166, unsigned __sym__0__7237342047573386957, int __sym__0___45_786415910032980037, unsigned __sym__0__8257693010788225203, unsigned __sym__0__1524874236739768329, unsigned __sym__0__2230266097477937458, unsigned __sym__0___45_7086886507829122289, fluidb_string<21> __sym__0___45_6002386514329473358, unsigned __sym__0___45_678242321222098884, fluidb_string<10> __sym__0___45_8995561222449159373, unsigned __sym__0___45_4113611234327906717, double __sym__0__1861270880433093325, unsigned __sym__0___45_5367025412787902929, double __sym__0___45_5000658247033003707, unsigned __sym__0___45_8196327343032528319, unsigned __sym__0__2373859223190952182, double __sym__0__3931679180353468680, fluidb_string<13> __sym__0___45_1587807567217389696) : sym__0__5047421274045357113(__sym__0__5047421274045357113), sym__0__1111371532348373905(__sym__0__1111371532348373905), sym__0__3616315983793812415(__sym__0__3616315983793812415), sym__0__5478499544478842365(__sym__0__5478499544478842365), sym__0__9198814011305918491(__sym__0__9198814011305918491), sym__0__5184064682442841190(__sym__0__5184064682442841190), sym__0__8776819689660585745(__sym__0__8776819689660585745), sym__0__3880509548823276917(__sym__0__3880509548823276917), sym__0___45_7245943137499681887(__sym__0___45_7245943137499681887), sym__0___45_2295638738224715823(__sym__0___45_2295638738224715823), sym__0__7231637917665667987(__sym__0__7231637917665667987), sym__0___45_8975225596959663088(__sym__0___45_8975225596959663088), sym__0__3613870501759166498(__sym__0__3613870501759166498), sym__0__1570651575008030560(__sym__0__1570651575008030560), sym__0__115945876907898361(__sym__0__115945876907898361), sym__0__7964449538584066510(__sym__0__7964449538584066510), sym__0__1660564563630425049(__sym__0__1660564563630425049), sym__0___45_8849919160064307967(__sym__0___45_8849919160064307967), sym__0__4389067787166632955(__sym__0__4389067787166632955), sym__0__8182303437242608(__sym__0__8182303437242608), sym__0__6576599429404095093(__sym__0__6576599429404095093), sym__0__7143354719373501837(__sym__0__7143354719373501837), sym__0___45_2048743282533748660(__sym__0___45_2048743282533748660), sym__0___45_5050379460643539596(__sym__0___45_5050379460643539596), sym__0___45_5591405934841628166(__sym__0___45_5591405934841628166), sym__0__7237342047573386957(__sym__0__7237342047573386957), sym__0___45_786415910032980037(__sym__0___45_786415910032980037), sym__0__8257693010788225203(__sym__0__8257693010788225203), sym__0__1524874236739768329(__sym__0__1524874236739768329), sym__0__2230266097477937458(__sym__0__2230266097477937458), sym__0___45_7086886507829122289(__sym__0___45_7086886507829122289), sym__0___45_6002386514329473358(__sym__0___45_6002386514329473358), sym__0___45_678242321222098884(__sym__0___45_678242321222098884), sym__0___45_8995561222449159373(__sym__0___45_8995561222449159373), sym__0___45_4113611234327906717(__sym__0___45_4113611234327906717), sym__0__1861270880433093325(__sym__0__1861270880433093325), sym__0___45_5367025412787902929(__sym__0___45_5367025412787902929), sym__0___45_5000658247033003707(__sym__0___45_5000658247033003707), sym__0___45_8196327343032528319(__sym__0___45_8196327343032528319), sym__0__2373859223190952182(__sym__0__2373859223190952182), sym__0__3931679180353468680(__sym__0__3931679180353468680), sym__0___45_1587807567217389696(__sym__0___45_1587807567217389696)
  {
  }
  Record5() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__5047421274045357113 << " | " << arrToString(sym__0__1111371532348373905) << " | " << arrToString(sym__0__3616315983793812415) << " | " << arrToString(sym__0__5478499544478842365) << " | " << arrToString(sym__0__9198814011305918491) << " | " << arrToString(sym__0__5184064682442841190) << " | " << arrToString(sym__0__8776819689660585745) << " | " << arrToString(sym__0__3880509548823276917) << " | " << sym__0___45_7245943137499681887 << " | " << arrToString(sym__0___45_2295638738224715823) << " | " << arrToString(sym__0__7231637917665667987) << " | " << arrToString(sym__0___45_8975225596959663088) << " | " << sym__0__3613870501759166498 << " | " << sym__0__1570651575008030560 << " | " << arrToString(sym__0__115945876907898361) << " | " << sym__0__7964449538584066510 << " | " << sym__0__1660564563630425049 << " | " << sym__0___45_8849919160064307967 << " | " << sym__0__4389067787166632955 << " | " << sym__0__8182303437242608 << " | " << arrToString(sym__0__6576599429404095093) << " | " << arrToString(sym__0__7143354719373501837) << " | " << arrToString(sym__0___45_2048743282533748660) << " | " << arrToString(sym__0___45_5050379460643539596) << " | " << arrToString(sym__0___45_5591405934841628166) << " | " << sym__0__7237342047573386957 << " | " << sym__0___45_786415910032980037 << " | " << sym__0__8257693010788225203 << " | " << sym__0__1524874236739768329 << " | " << sym__0__2230266097477937458 << " | " << sym__0___45_7086886507829122289 << " | " << arrToString(sym__0___45_6002386514329473358) << " | " << sym__0___45_678242321222098884 << " | " << arrToString(sym__0___45_8995561222449159373) << " | " << sym__0___45_4113611234327906717 << " | " << sym__0__1861270880433093325 << " | " << sym__0___45_5367025412787902929 << " | " << sym__0___45_5000658247033003707 << " | " << sym__0___45_8196327343032528319 << " | " << sym__0__2373859223190952182 << " | " << sym__0__3931679180353468680 << " | " << arrToString(sym__0___45_1587807567217389696);
    return o.str();
  }
  bool operator <(const Record5& otherRec) const{
    return (otherRec.sym__0__5047421274045357113 < sym__0__5047421274045357113 && (otherRec.sym__0__1111371532348373905 < sym__0__1111371532348373905 && (otherRec.sym__0__3616315983793812415 < sym__0__3616315983793812415 && (otherRec.sym__0__5478499544478842365 < sym__0__5478499544478842365 && (otherRec.sym__0__9198814011305918491 < sym__0__9198814011305918491 && (otherRec.sym__0__5184064682442841190 < sym__0__5184064682442841190 && (otherRec.sym__0__8776819689660585745 < sym__0__8776819689660585745 && (otherRec.sym__0__3880509548823276917 < sym__0__3880509548823276917 && (otherRec.sym__0___45_7245943137499681887 < sym__0___45_7245943137499681887 && (otherRec.sym__0___45_2295638738224715823 < sym__0___45_2295638738224715823 && (otherRec.sym__0__7231637917665667987 < sym__0__7231637917665667987 && (otherRec.sym__0___45_8975225596959663088 < sym__0___45_8975225596959663088 && (otherRec.sym__0__3613870501759166498 < sym__0__3613870501759166498 && (otherRec.sym__0__1570651575008030560 < sym__0__1570651575008030560 && (otherRec.sym__0__115945876907898361 < sym__0__115945876907898361 && (otherRec.sym__0__7964449538584066510 < sym__0__7964449538584066510 && (otherRec.sym__0__1660564563630425049 < sym__0__1660564563630425049 && (otherRec.sym__0___45_8849919160064307967 < sym__0___45_8849919160064307967 && (otherRec.sym__0__4389067787166632955 < sym__0__4389067787166632955 && (otherRec.sym__0__8182303437242608 < sym__0__8182303437242608 && (otherRec.sym__0__6576599429404095093 < sym__0__6576599429404095093 && (otherRec.sym__0__7143354719373501837 < sym__0__7143354719373501837 && (otherRec.sym__0___45_2048743282533748660 < sym__0___45_2048743282533748660 && (otherRec.sym__0___45_5050379460643539596 < sym__0___45_5050379460643539596 && (otherRec.sym__0___45_5591405934841628166 < sym__0___45_5591405934841628166 && (otherRec.sym__0__7237342047573386957 < sym__0__7237342047573386957 && (otherRec.sym__0___45_786415910032980037 < sym__0___45_786415910032980037 && (otherRec.sym__0__8257693010788225203 < sym__0__8257693010788225203 && (otherRec.sym__0__1524874236739768329 < sym__0__1524874236739768329 && (otherRec.sym__0__2230266097477937458 < sym__0__2230266097477937458 && (otherRec.sym__0___45_7086886507829122289 < sym__0___45_7086886507829122289 && (otherRec.sym__0___45_6002386514329473358 < sym__0___45_6002386514329473358 && (otherRec.sym__0___45_678242321222098884 < sym__0___45_678242321222098884 && (otherRec.sym__0___45_8995561222449159373 < sym__0___45_8995561222449159373 && (otherRec.sym__0___45_4113611234327906717 < sym__0___45_4113611234327906717 && (otherRec.sym__0__1861270880433093325 < sym__0__1861270880433093325 && (otherRec.sym__0___45_5367025412787902929 < sym__0___45_5367025412787902929 && (otherRec.sym__0___45_5000658247033003707 < sym__0___45_5000658247033003707 && (otherRec.sym__0___45_8196327343032528319 < sym__0___45_8196327343032528319 && (otherRec.sym__0__2373859223190952182 < sym__0__2373859223190952182 && (otherRec.sym__0__3931679180353468680 < sym__0__3931679180353468680 && otherRec.sym__0___45_1587807567217389696 < sym__0___45_1587807567217389696)))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record5& otherRec) const{
    return (otherRec.sym__0__5047421274045357113 == sym__0__5047421274045357113 && (otherRec.sym__0__1111371532348373905 == sym__0__1111371532348373905 && (otherRec.sym__0__3616315983793812415 == sym__0__3616315983793812415 && (otherRec.sym__0__5478499544478842365 == sym__0__5478499544478842365 && (otherRec.sym__0__9198814011305918491 == sym__0__9198814011305918491 && (otherRec.sym__0__5184064682442841190 == sym__0__5184064682442841190 && (otherRec.sym__0__8776819689660585745 == sym__0__8776819689660585745 && (otherRec.sym__0__3880509548823276917 == sym__0__3880509548823276917 && (otherRec.sym__0___45_7245943137499681887 == sym__0___45_7245943137499681887 && (otherRec.sym__0___45_2295638738224715823 == sym__0___45_2295638738224715823 && (otherRec.sym__0__7231637917665667987 == sym__0__7231637917665667987 && (otherRec.sym__0___45_8975225596959663088 == sym__0___45_8975225596959663088 && (otherRec.sym__0__3613870501759166498 == sym__0__3613870501759166498 && (otherRec.sym__0__1570651575008030560 == sym__0__1570651575008030560 && (otherRec.sym__0__115945876907898361 == sym__0__115945876907898361 && (otherRec.sym__0__7964449538584066510 == sym__0__7964449538584066510 && (otherRec.sym__0__1660564563630425049 == sym__0__1660564563630425049 && (otherRec.sym__0___45_8849919160064307967 == sym__0___45_8849919160064307967 && (otherRec.sym__0__4389067787166632955 == sym__0__4389067787166632955 && (otherRec.sym__0__8182303437242608 == sym__0__8182303437242608 && (otherRec.sym__0__6576599429404095093 == sym__0__6576599429404095093 && (otherRec.sym__0__7143354719373501837 == sym__0__7143354719373501837 && (otherRec.sym__0___45_2048743282533748660 == sym__0___45_2048743282533748660 && (otherRec.sym__0___45_5050379460643539596 == sym__0___45_5050379460643539596 && (otherRec.sym__0___45_5591405934841628166 == sym__0___45_5591405934841628166 && (otherRec.sym__0__7237342047573386957 == sym__0__7237342047573386957 && (otherRec.sym__0___45_786415910032980037 == sym__0___45_786415910032980037 && (otherRec.sym__0__8257693010788225203 == sym__0__8257693010788225203 && (otherRec.sym__0__1524874236739768329 == sym__0__1524874236739768329 && (otherRec.sym__0__2230266097477937458 == sym__0__2230266097477937458 && (otherRec.sym__0___45_7086886507829122289 == sym__0___45_7086886507829122289 && (otherRec.sym__0___45_6002386514329473358 == sym__0___45_6002386514329473358 && (otherRec.sym__0___45_678242321222098884 == sym__0___45_678242321222098884 && (otherRec.sym__0___45_8995561222449159373 == sym__0___45_8995561222449159373 && (otherRec.sym__0___45_4113611234327906717 == sym__0___45_4113611234327906717 && (otherRec.sym__0__1861270880433093325 == sym__0__1861270880433093325 && (otherRec.sym__0___45_5367025412787902929 == sym__0___45_5367025412787902929 && (otherRec.sym__0___45_5000658247033003707 == sym__0___45_5000658247033003707 && (otherRec.sym__0___45_8196327343032528319 == sym__0___45_8196327343032528319 && (otherRec.sym__0__2373859223190952182 == sym__0__2373859223190952182 && (otherRec.sym__0__3931679180353468680 == sym__0__3931679180353468680 && otherRec.sym__0___45_1587807567217389696 == sym__0___45_1587807567217389696)))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record5& otherRec) const{
    return (otherRec.sym__0__5047421274045357113 != sym__0__5047421274045357113 || (otherRec.sym__0__1111371532348373905 != sym__0__1111371532348373905 || (otherRec.sym__0__3616315983793812415 != sym__0__3616315983793812415 || (otherRec.sym__0__5478499544478842365 != sym__0__5478499544478842365 || (otherRec.sym__0__9198814011305918491 != sym__0__9198814011305918491 || (otherRec.sym__0__5184064682442841190 != sym__0__5184064682442841190 || (otherRec.sym__0__8776819689660585745 != sym__0__8776819689660585745 || (otherRec.sym__0__3880509548823276917 != sym__0__3880509548823276917 || (otherRec.sym__0___45_7245943137499681887 != sym__0___45_7245943137499681887 || (otherRec.sym__0___45_2295638738224715823 != sym__0___45_2295638738224715823 || (otherRec.sym__0__7231637917665667987 != sym__0__7231637917665667987 || (otherRec.sym__0___45_8975225596959663088 != sym__0___45_8975225596959663088 || (otherRec.sym__0__3613870501759166498 != sym__0__3613870501759166498 || (otherRec.sym__0__1570651575008030560 != sym__0__1570651575008030560 || (otherRec.sym__0__115945876907898361 != sym__0__115945876907898361 || (otherRec.sym__0__7964449538584066510 != sym__0__7964449538584066510 || (otherRec.sym__0__1660564563630425049 != sym__0__1660564563630425049 || (otherRec.sym__0___45_8849919160064307967 != sym__0___45_8849919160064307967 || (otherRec.sym__0__4389067787166632955 != sym__0__4389067787166632955 || (otherRec.sym__0__8182303437242608 != sym__0__8182303437242608 || (otherRec.sym__0__6576599429404095093 != sym__0__6576599429404095093 || (otherRec.sym__0__7143354719373501837 != sym__0__7143354719373501837 || (otherRec.sym__0___45_2048743282533748660 != sym__0___45_2048743282533748660 || (otherRec.sym__0___45_5050379460643539596 != sym__0___45_5050379460643539596 || (otherRec.sym__0___45_5591405934841628166 != sym__0___45_5591405934841628166 || (otherRec.sym__0__7237342047573386957 != sym__0__7237342047573386957 || (otherRec.sym__0___45_786415910032980037 != sym__0___45_786415910032980037 || (otherRec.sym__0__8257693010788225203 != sym__0__8257693010788225203 || (otherRec.sym__0__1524874236739768329 != sym__0__1524874236739768329 || (otherRec.sym__0__2230266097477937458 != sym__0__2230266097477937458 || (otherRec.sym__0___45_7086886507829122289 != sym__0___45_7086886507829122289 || (otherRec.sym__0___45_6002386514329473358 != sym__0___45_6002386514329473358 || (otherRec.sym__0___45_678242321222098884 != sym__0___45_678242321222098884 || (otherRec.sym__0___45_8995561222449159373 != sym__0___45_8995561222449159373 || (otherRec.sym__0___45_4113611234327906717 != sym__0___45_4113611234327906717 || (otherRec.sym__0__1861270880433093325 != sym__0__1861270880433093325 || (otherRec.sym__0___45_5367025412787902929 != sym__0___45_5367025412787902929 || (otherRec.sym__0___45_5000658247033003707 != sym__0___45_5000658247033003707 || (otherRec.sym__0___45_8196327343032528319 != sym__0___45_8196327343032528319 || (otherRec.sym__0__2373859223190952182 != sym__0__2373859223190952182 || (otherRec.sym__0__3931679180353468680 != sym__0__3931679180353468680 || otherRec.sym__0___45_1587807567217389696 != sym__0___45_1587807567217389696)))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__5047421274045357113;
  fluidb_string<18> sym__0__1111371532348373905;
  fluidb_string<40> sym__0__3616315983793812415;
  fluidb_string<11> sym__0__5478499544478842365;
  fluidb_string<15> sym__0__9198814011305918491;
  fluidb_string<13> sym__0__5184064682442841190;
  fluidb_string<15> sym__0__8776819689660585745;
  fluidb_string<21> sym__0__3880509548823276917;
  unsigned sym__0___45_7245943137499681887;
  fluidb_string<18> sym__0___45_2295638738224715823;
  fluidb_string<9> sym__0__7231637917665667987;
  fluidb_string<9> sym__0___45_8975225596959663088;
  unsigned sym__0__3613870501759166498;
  unsigned sym__0__1570651575008030560;
  fluidb_string<7> sym__0__115945876907898361;
  unsigned sym__0__7964449538584066510;
  unsigned sym__0__1660564563630425049;
  unsigned sym__0___45_8849919160064307967;
  unsigned sym__0__4389067787166632955;
  unsigned sym__0__8182303437242608;
  fluidb_string<15> sym__0__6576599429404095093;
  fluidb_string<2> sym__0__7143354719373501837;
  fluidb_string<2> sym__0___45_2048743282533748660;
  fluidb_string<2> sym__0___45_5050379460643539596;
  fluidb_string<2> sym__0___45_5591405934841628166;
  unsigned sym__0__7237342047573386957;
  int sym__0___45_786415910032980037;
  unsigned sym__0__8257693010788225203;
  unsigned sym__0__1524874236739768329;
  unsigned sym__0__2230266097477937458;
  unsigned sym__0___45_7086886507829122289;
  fluidb_string<21> sym__0___45_6002386514329473358;
  unsigned sym__0___45_678242321222098884;
  fluidb_string<10> sym__0___45_8995561222449159373;
  unsigned sym__0___45_4113611234327906717;
  double sym__0__1861270880433093325;
  unsigned sym__0___45_5367025412787902929;
  double sym__0___45_5000658247033003707;
  unsigned sym__0___45_8196327343032528319;
  unsigned sym__0__2373859223190952182;
  double sym__0__3931679180353468680;
  fluidb_string<13> sym__0___45_1587807567217389696;
 private:
};


class Record9 {
 public:
  Record9(unsigned __sortElem0) : sortElem0(__sortElem0)
  {
  }
  Record9() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0;
    return o.str();
  }
  bool operator <(const Record9& otherRec) const{
    return otherRec.sortElem0 < sortElem0;
  }
  bool operator ==(const Record9& otherRec) const{
    return otherRec.sortElem0 == sortElem0;
  }
  bool operator !=(const Record9& otherRec) const{
    return otherRec.sortElem0 != sortElem0;
  }
  unsigned sortElem0;
 private:
};


class Record17 {
 public:
  Record17(fluidb_string<11> __sym__0__71540406503057918, fluidb_string<16> __sym__0__2828347237755907406, unsigned __sym__0___45_9000295950570013541, unsigned __sym__0___45_4437040401381761565) : sym__0__71540406503057918(__sym__0__71540406503057918), sym__0__2828347237755907406(__sym__0__2828347237755907406), sym__0___45_9000295950570013541(__sym__0___45_9000295950570013541), sym__0___45_4437040401381761565(__sym__0___45_4437040401381761565)
  {
  }
  Record17() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << arrToString(sym__0__71540406503057918) << " | " << arrToString(sym__0__2828347237755907406) << " | " << sym__0___45_9000295950570013541 << " | " << sym__0___45_4437040401381761565;
    return o.str();
  }
  bool operator <(const Record17& otherRec) const{
    return (otherRec.sym__0__71540406503057918 < sym__0__71540406503057918 && (otherRec.sym__0__2828347237755907406 < sym__0__2828347237755907406 && (otherRec.sym__0___45_9000295950570013541 < sym__0___45_9000295950570013541 && otherRec.sym__0___45_4437040401381761565 < sym__0___45_4437040401381761565)));
  }
  bool operator ==(const Record17& otherRec) const{
    return (otherRec.sym__0__71540406503057918 == sym__0__71540406503057918 && (otherRec.sym__0__2828347237755907406 == sym__0__2828347237755907406 && (otherRec.sym__0___45_9000295950570013541 == sym__0___45_9000295950570013541 && otherRec.sym__0___45_4437040401381761565 == sym__0___45_4437040401381761565)));
  }
  bool operator !=(const Record17& otherRec) const{
    return (otherRec.sym__0__71540406503057918 != sym__0__71540406503057918 || (otherRec.sym__0__2828347237755907406 != sym__0__2828347237755907406 || (otherRec.sym__0___45_9000295950570013541 != sym__0___45_9000295950570013541 || otherRec.sym__0___45_4437040401381761565 != sym__0___45_4437040401381761565)));
  }
  fluidb_string<11> sym__0__71540406503057918;
  fluidb_string<16> sym__0__2828347237755907406;
  unsigned sym__0___45_9000295950570013541;
  unsigned sym__0___45_4437040401381761565;
 private:
};


class Record19 {
 public:
  Record19(unsigned __sym__0___45_338744000625752874, fluidb_string<18> __sym__0__4457550615691903038, fluidb_string<40> __sym__0___45_7779893313968848924, fluidb_string<11> __sym__0__7034531493904066722, fluidb_string<15> __sym__0___45_8145490596050003832, fluidb_string<13> __sym__0___45_1234268100973412423, fluidb_string<15> __sym__0__3322015854183825854, fluidb_string<21> __sym__0___45_8904238202937071990, unsigned __sym__0__5163836519019812846, fluidb_string<18> __sym__0__4691003334066563198, fluidb_string<9> __sym__0___45_5551906115245323664, fluidb_string<9> __sym__0___45_5600985921898170805, unsigned __sym__0__5190436275755771085, unsigned __sym__0___45_7845023056148553349, fluidb_string<7> __sym__0__4350246310517402262, unsigned __sym__0___45_3651598037686104911, unsigned __sym__0__3324866205947089014, unsigned __sym__0___45_5106594024306176690, unsigned __sym__0___45_2328020107090086808, unsigned __sym__0___45_7664420784569873109, fluidb_string<15> __sym__0___45_6481679278388374134, fluidb_string<2> __sym__0___45_2993897051316018478, fluidb_string<2> __sym__0___45_2860388295315395233, fluidb_string<2> __sym__0__5791715696489447415, fluidb_string<2> __sym__0__527970848583178293, unsigned __sym__0___45_7693013323208628206, int __sym__0___45_5748998446790810584, unsigned __sym__0__3069459070183433616, unsigned __sym__0___45_829318717909085626, unsigned __sym__0___45_2230370735359665795, unsigned __sym__0__8685332338033785108, fluidb_string<21> __sym__0___45_3218024968775209731, unsigned __sym__0__4595984355710025903, fluidb_string<10> __sym__0___45_591668478459646448, unsigned __sym__0___45_1807435744938342688, double __sym__0___45_6813561383274320878, unsigned __sym__0__8204168833568236084, double __sym__0__6331674360378029114, unsigned __sym__0___45_5676998185488268146, unsigned __sym__0__6569292155259249065, double __sym__0___45_8803043059407230605, fluidb_string<13> __sym__0__4146004324203846043, unsigned __sym__0__1079194730339214597, fluidb_string<25> __sym__0___45_1132171939664831330, fluidb_string<40> __sym__0__8743572897236263948, fluidb_string<16> __sym__0___45_4967417594431087118, fluidb_string<16> __sym__0__7039739059145821808, fluidb_string<13> __sym__0___45_5539313807166473391, fluidb_string<15> __sym__0__583748512005612830) : sym__0___45_338744000625752874(__sym__0___45_338744000625752874), sym__0__4457550615691903038(__sym__0__4457550615691903038), sym__0___45_7779893313968848924(__sym__0___45_7779893313968848924), sym__0__7034531493904066722(__sym__0__7034531493904066722), sym__0___45_8145490596050003832(__sym__0___45_8145490596050003832), sym__0___45_1234268100973412423(__sym__0___45_1234268100973412423), sym__0__3322015854183825854(__sym__0__3322015854183825854), sym__0___45_8904238202937071990(__sym__0___45_8904238202937071990), sym__0__5163836519019812846(__sym__0__5163836519019812846), sym__0__4691003334066563198(__sym__0__4691003334066563198), sym__0___45_5551906115245323664(__sym__0___45_5551906115245323664), sym__0___45_5600985921898170805(__sym__0___45_5600985921898170805), sym__0__5190436275755771085(__sym__0__5190436275755771085), sym__0___45_7845023056148553349(__sym__0___45_7845023056148553349), sym__0__4350246310517402262(__sym__0__4350246310517402262), sym__0___45_3651598037686104911(__sym__0___45_3651598037686104911), sym__0__3324866205947089014(__sym__0__3324866205947089014), sym__0___45_5106594024306176690(__sym__0___45_5106594024306176690), sym__0___45_2328020107090086808(__sym__0___45_2328020107090086808), sym__0___45_7664420784569873109(__sym__0___45_7664420784569873109), sym__0___45_6481679278388374134(__sym__0___45_6481679278388374134), sym__0___45_2993897051316018478(__sym__0___45_2993897051316018478), sym__0___45_2860388295315395233(__sym__0___45_2860388295315395233), sym__0__5791715696489447415(__sym__0__5791715696489447415), sym__0__527970848583178293(__sym__0__527970848583178293), sym__0___45_7693013323208628206(__sym__0___45_7693013323208628206), sym__0___45_5748998446790810584(__sym__0___45_5748998446790810584), sym__0__3069459070183433616(__sym__0__3069459070183433616), sym__0___45_829318717909085626(__sym__0___45_829318717909085626), sym__0___45_2230370735359665795(__sym__0___45_2230370735359665795), sym__0__8685332338033785108(__sym__0__8685332338033785108), sym__0___45_3218024968775209731(__sym__0___45_3218024968775209731), sym__0__4595984355710025903(__sym__0__4595984355710025903), sym__0___45_591668478459646448(__sym__0___45_591668478459646448), sym__0___45_1807435744938342688(__sym__0___45_1807435744938342688), sym__0___45_6813561383274320878(__sym__0___45_6813561383274320878), sym__0__8204168833568236084(__sym__0__8204168833568236084), sym__0__6331674360378029114(__sym__0__6331674360378029114), sym__0___45_5676998185488268146(__sym__0___45_5676998185488268146), sym__0__6569292155259249065(__sym__0__6569292155259249065), sym__0___45_8803043059407230605(__sym__0___45_8803043059407230605), sym__0__4146004324203846043(__sym__0__4146004324203846043), sym__0__1079194730339214597(__sym__0__1079194730339214597), sym__0___45_1132171939664831330(__sym__0___45_1132171939664831330), sym__0__8743572897236263948(__sym__0__8743572897236263948), sym__0___45_4967417594431087118(__sym__0___45_4967417594431087118), sym__0__7039739059145821808(__sym__0__7039739059145821808), sym__0___45_5539313807166473391(__sym__0___45_5539313807166473391), sym__0__583748512005612830(__sym__0__583748512005612830)
  {
  }
  Record19() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_338744000625752874 << " | " << arrToString(sym__0__4457550615691903038) << " | " << arrToString(sym__0___45_7779893313968848924) << " | " << arrToString(sym__0__7034531493904066722) << " | " << arrToString(sym__0___45_8145490596050003832) << " | " << arrToString(sym__0___45_1234268100973412423) << " | " << arrToString(sym__0__3322015854183825854) << " | " << arrToString(sym__0___45_8904238202937071990) << " | " << sym__0__5163836519019812846 << " | " << arrToString(sym__0__4691003334066563198) << " | " << arrToString(sym__0___45_5551906115245323664) << " | " << arrToString(sym__0___45_5600985921898170805) << " | " << sym__0__5190436275755771085 << " | " << sym__0___45_7845023056148553349 << " | " << arrToString(sym__0__4350246310517402262) << " | " << sym__0___45_3651598037686104911 << " | " << sym__0__3324866205947089014 << " | " << sym__0___45_5106594024306176690 << " | " << sym__0___45_2328020107090086808 << " | " << sym__0___45_7664420784569873109 << " | " << arrToString(sym__0___45_6481679278388374134) << " | " << arrToString(sym__0___45_2993897051316018478) << " | " << arrToString(sym__0___45_2860388295315395233) << " | " << arrToString(sym__0__5791715696489447415) << " | " << arrToString(sym__0__527970848583178293) << " | " << sym__0___45_7693013323208628206 << " | " << sym__0___45_5748998446790810584 << " | " << sym__0__3069459070183433616 << " | " << sym__0___45_829318717909085626 << " | " << sym__0___45_2230370735359665795 << " | " << sym__0__8685332338033785108 << " | " << arrToString(sym__0___45_3218024968775209731) << " | " << sym__0__4595984355710025903 << " | " << arrToString(sym__0___45_591668478459646448) << " | " << sym__0___45_1807435744938342688 << " | " << sym__0___45_6813561383274320878 << " | " << sym__0__8204168833568236084 << " | " << sym__0__6331674360378029114 << " | " << sym__0___45_5676998185488268146 << " | " << sym__0__6569292155259249065 << " | " << sym__0___45_8803043059407230605 << " | " << arrToString(sym__0__4146004324203846043) << " | " << sym__0__1079194730339214597 << " | " << arrToString(sym__0___45_1132171939664831330) << " | " << arrToString(sym__0__8743572897236263948) << " | " << arrToString(sym__0___45_4967417594431087118) << " | " << arrToString(sym__0__7039739059145821808) << " | " << arrToString(sym__0___45_5539313807166473391) << " | " << arrToString(sym__0__583748512005612830);
    return o.str();
  }
  bool operator <(const Record19& otherRec) const{
    return (otherRec.sym__0___45_338744000625752874 < sym__0___45_338744000625752874 && (otherRec.sym__0__4457550615691903038 < sym__0__4457550615691903038 && (otherRec.sym__0___45_7779893313968848924 < sym__0___45_7779893313968848924 && (otherRec.sym__0__7034531493904066722 < sym__0__7034531493904066722 && (otherRec.sym__0___45_8145490596050003832 < sym__0___45_8145490596050003832 && (otherRec.sym__0___45_1234268100973412423 < sym__0___45_1234268100973412423 && (otherRec.sym__0__3322015854183825854 < sym__0__3322015854183825854 && (otherRec.sym__0___45_8904238202937071990 < sym__0___45_8904238202937071990 && (otherRec.sym__0__5163836519019812846 < sym__0__5163836519019812846 && (otherRec.sym__0__4691003334066563198 < sym__0__4691003334066563198 && (otherRec.sym__0___45_5551906115245323664 < sym__0___45_5551906115245323664 && (otherRec.sym__0___45_5600985921898170805 < sym__0___45_5600985921898170805 && (otherRec.sym__0__5190436275755771085 < sym__0__5190436275755771085 && (otherRec.sym__0___45_7845023056148553349 < sym__0___45_7845023056148553349 && (otherRec.sym__0__4350246310517402262 < sym__0__4350246310517402262 && (otherRec.sym__0___45_3651598037686104911 < sym__0___45_3651598037686104911 && (otherRec.sym__0__3324866205947089014 < sym__0__3324866205947089014 && (otherRec.sym__0___45_5106594024306176690 < sym__0___45_5106594024306176690 && (otherRec.sym__0___45_2328020107090086808 < sym__0___45_2328020107090086808 && (otherRec.sym__0___45_7664420784569873109 < sym__0___45_7664420784569873109 && (otherRec.sym__0___45_6481679278388374134 < sym__0___45_6481679278388374134 && (otherRec.sym__0___45_2993897051316018478 < sym__0___45_2993897051316018478 && (otherRec.sym__0___45_2860388295315395233 < sym__0___45_2860388295315395233 && (otherRec.sym__0__5791715696489447415 < sym__0__5791715696489447415 && (otherRec.sym__0__527970848583178293 < sym__0__527970848583178293 && (otherRec.sym__0___45_7693013323208628206 < sym__0___45_7693013323208628206 && (otherRec.sym__0___45_5748998446790810584 < sym__0___45_5748998446790810584 && (otherRec.sym__0__3069459070183433616 < sym__0__3069459070183433616 && (otherRec.sym__0___45_829318717909085626 < sym__0___45_829318717909085626 && (otherRec.sym__0___45_2230370735359665795 < sym__0___45_2230370735359665795 && (otherRec.sym__0__8685332338033785108 < sym__0__8685332338033785108 && (otherRec.sym__0___45_3218024968775209731 < sym__0___45_3218024968775209731 && (otherRec.sym__0__4595984355710025903 < sym__0__4595984355710025903 && (otherRec.sym__0___45_591668478459646448 < sym__0___45_591668478459646448 && (otherRec.sym__0___45_1807435744938342688 < sym__0___45_1807435744938342688 && (otherRec.sym__0___45_6813561383274320878 < sym__0___45_6813561383274320878 && (otherRec.sym__0__8204168833568236084 < sym__0__8204168833568236084 && (otherRec.sym__0__6331674360378029114 < sym__0__6331674360378029114 && (otherRec.sym__0___45_5676998185488268146 < sym__0___45_5676998185488268146 && (otherRec.sym__0__6569292155259249065 < sym__0__6569292155259249065 && (otherRec.sym__0___45_8803043059407230605 < sym__0___45_8803043059407230605 && (otherRec.sym__0__4146004324203846043 < sym__0__4146004324203846043 && (otherRec.sym__0__1079194730339214597 < sym__0__1079194730339214597 && (otherRec.sym__0___45_1132171939664831330 < sym__0___45_1132171939664831330 && (otherRec.sym__0__8743572897236263948 < sym__0__8743572897236263948 && (otherRec.sym__0___45_4967417594431087118 < sym__0___45_4967417594431087118 && (otherRec.sym__0__7039739059145821808 < sym__0__7039739059145821808 && (otherRec.sym__0___45_5539313807166473391 < sym__0___45_5539313807166473391 && otherRec.sym__0__583748512005612830 < sym__0__583748512005612830))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record19& otherRec) const{
    return (otherRec.sym__0___45_338744000625752874 == sym__0___45_338744000625752874 && (otherRec.sym__0__4457550615691903038 == sym__0__4457550615691903038 && (otherRec.sym__0___45_7779893313968848924 == sym__0___45_7779893313968848924 && (otherRec.sym__0__7034531493904066722 == sym__0__7034531493904066722 && (otherRec.sym__0___45_8145490596050003832 == sym__0___45_8145490596050003832 && (otherRec.sym__0___45_1234268100973412423 == sym__0___45_1234268100973412423 && (otherRec.sym__0__3322015854183825854 == sym__0__3322015854183825854 && (otherRec.sym__0___45_8904238202937071990 == sym__0___45_8904238202937071990 && (otherRec.sym__0__5163836519019812846 == sym__0__5163836519019812846 && (otherRec.sym__0__4691003334066563198 == sym__0__4691003334066563198 && (otherRec.sym__0___45_5551906115245323664 == sym__0___45_5551906115245323664 && (otherRec.sym__0___45_5600985921898170805 == sym__0___45_5600985921898170805 && (otherRec.sym__0__5190436275755771085 == sym__0__5190436275755771085 && (otherRec.sym__0___45_7845023056148553349 == sym__0___45_7845023056148553349 && (otherRec.sym__0__4350246310517402262 == sym__0__4350246310517402262 && (otherRec.sym__0___45_3651598037686104911 == sym__0___45_3651598037686104911 && (otherRec.sym__0__3324866205947089014 == sym__0__3324866205947089014 && (otherRec.sym__0___45_5106594024306176690 == sym__0___45_5106594024306176690 && (otherRec.sym__0___45_2328020107090086808 == sym__0___45_2328020107090086808 && (otherRec.sym__0___45_7664420784569873109 == sym__0___45_7664420784569873109 && (otherRec.sym__0___45_6481679278388374134 == sym__0___45_6481679278388374134 && (otherRec.sym__0___45_2993897051316018478 == sym__0___45_2993897051316018478 && (otherRec.sym__0___45_2860388295315395233 == sym__0___45_2860388295315395233 && (otherRec.sym__0__5791715696489447415 == sym__0__5791715696489447415 && (otherRec.sym__0__527970848583178293 == sym__0__527970848583178293 && (otherRec.sym__0___45_7693013323208628206 == sym__0___45_7693013323208628206 && (otherRec.sym__0___45_5748998446790810584 == sym__0___45_5748998446790810584 && (otherRec.sym__0__3069459070183433616 == sym__0__3069459070183433616 && (otherRec.sym__0___45_829318717909085626 == sym__0___45_829318717909085626 && (otherRec.sym__0___45_2230370735359665795 == sym__0___45_2230370735359665795 && (otherRec.sym__0__8685332338033785108 == sym__0__8685332338033785108 && (otherRec.sym__0___45_3218024968775209731 == sym__0___45_3218024968775209731 && (otherRec.sym__0__4595984355710025903 == sym__0__4595984355710025903 && (otherRec.sym__0___45_591668478459646448 == sym__0___45_591668478459646448 && (otherRec.sym__0___45_1807435744938342688 == sym__0___45_1807435744938342688 && (otherRec.sym__0___45_6813561383274320878 == sym__0___45_6813561383274320878 && (otherRec.sym__0__8204168833568236084 == sym__0__8204168833568236084 && (otherRec.sym__0__6331674360378029114 == sym__0__6331674360378029114 && (otherRec.sym__0___45_5676998185488268146 == sym__0___45_5676998185488268146 && (otherRec.sym__0__6569292155259249065 == sym__0__6569292155259249065 && (otherRec.sym__0___45_8803043059407230605 == sym__0___45_8803043059407230605 && (otherRec.sym__0__4146004324203846043 == sym__0__4146004324203846043 && (otherRec.sym__0__1079194730339214597 == sym__0__1079194730339214597 && (otherRec.sym__0___45_1132171939664831330 == sym__0___45_1132171939664831330 && (otherRec.sym__0__8743572897236263948 == sym__0__8743572897236263948 && (otherRec.sym__0___45_4967417594431087118 == sym__0___45_4967417594431087118 && (otherRec.sym__0__7039739059145821808 == sym__0__7039739059145821808 && (otherRec.sym__0___45_5539313807166473391 == sym__0___45_5539313807166473391 && otherRec.sym__0__583748512005612830 == sym__0__583748512005612830))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record19& otherRec) const{
    return (otherRec.sym__0___45_338744000625752874 != sym__0___45_338744000625752874 || (otherRec.sym__0__4457550615691903038 != sym__0__4457550615691903038 || (otherRec.sym__0___45_7779893313968848924 != sym__0___45_7779893313968848924 || (otherRec.sym__0__7034531493904066722 != sym__0__7034531493904066722 || (otherRec.sym__0___45_8145490596050003832 != sym__0___45_8145490596050003832 || (otherRec.sym__0___45_1234268100973412423 != sym__0___45_1234268100973412423 || (otherRec.sym__0__3322015854183825854 != sym__0__3322015854183825854 || (otherRec.sym__0___45_8904238202937071990 != sym__0___45_8904238202937071990 || (otherRec.sym__0__5163836519019812846 != sym__0__5163836519019812846 || (otherRec.sym__0__4691003334066563198 != sym__0__4691003334066563198 || (otherRec.sym__0___45_5551906115245323664 != sym__0___45_5551906115245323664 || (otherRec.sym__0___45_5600985921898170805 != sym__0___45_5600985921898170805 || (otherRec.sym__0__5190436275755771085 != sym__0__5190436275755771085 || (otherRec.sym__0___45_7845023056148553349 != sym__0___45_7845023056148553349 || (otherRec.sym__0__4350246310517402262 != sym__0__4350246310517402262 || (otherRec.sym__0___45_3651598037686104911 != sym__0___45_3651598037686104911 || (otherRec.sym__0__3324866205947089014 != sym__0__3324866205947089014 || (otherRec.sym__0___45_5106594024306176690 != sym__0___45_5106594024306176690 || (otherRec.sym__0___45_2328020107090086808 != sym__0___45_2328020107090086808 || (otherRec.sym__0___45_7664420784569873109 != sym__0___45_7664420784569873109 || (otherRec.sym__0___45_6481679278388374134 != sym__0___45_6481679278388374134 || (otherRec.sym__0___45_2993897051316018478 != sym__0___45_2993897051316018478 || (otherRec.sym__0___45_2860388295315395233 != sym__0___45_2860388295315395233 || (otherRec.sym__0__5791715696489447415 != sym__0__5791715696489447415 || (otherRec.sym__0__527970848583178293 != sym__0__527970848583178293 || (otherRec.sym__0___45_7693013323208628206 != sym__0___45_7693013323208628206 || (otherRec.sym__0___45_5748998446790810584 != sym__0___45_5748998446790810584 || (otherRec.sym__0__3069459070183433616 != sym__0__3069459070183433616 || (otherRec.sym__0___45_829318717909085626 != sym__0___45_829318717909085626 || (otherRec.sym__0___45_2230370735359665795 != sym__0___45_2230370735359665795 || (otherRec.sym__0__8685332338033785108 != sym__0__8685332338033785108 || (otherRec.sym__0___45_3218024968775209731 != sym__0___45_3218024968775209731 || (otherRec.sym__0__4595984355710025903 != sym__0__4595984355710025903 || (otherRec.sym__0___45_591668478459646448 != sym__0___45_591668478459646448 || (otherRec.sym__0___45_1807435744938342688 != sym__0___45_1807435744938342688 || (otherRec.sym__0___45_6813561383274320878 != sym__0___45_6813561383274320878 || (otherRec.sym__0__8204168833568236084 != sym__0__8204168833568236084 || (otherRec.sym__0__6331674360378029114 != sym__0__6331674360378029114 || (otherRec.sym__0___45_5676998185488268146 != sym__0___45_5676998185488268146 || (otherRec.sym__0__6569292155259249065 != sym__0__6569292155259249065 || (otherRec.sym__0___45_8803043059407230605 != sym__0___45_8803043059407230605 || (otherRec.sym__0__4146004324203846043 != sym__0__4146004324203846043 || (otherRec.sym__0__1079194730339214597 != sym__0__1079194730339214597 || (otherRec.sym__0___45_1132171939664831330 != sym__0___45_1132171939664831330 || (otherRec.sym__0__8743572897236263948 != sym__0__8743572897236263948 || (otherRec.sym__0___45_4967417594431087118 != sym__0___45_4967417594431087118 || (otherRec.sym__0__7039739059145821808 != sym__0__7039739059145821808 || (otherRec.sym__0___45_5539313807166473391 != sym__0___45_5539313807166473391 || otherRec.sym__0__583748512005612830 != sym__0__583748512005612830))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_338744000625752874;
  fluidb_string<18> sym__0__4457550615691903038;
  fluidb_string<40> sym__0___45_7779893313968848924;
  fluidb_string<11> sym__0__7034531493904066722;
  fluidb_string<15> sym__0___45_8145490596050003832;
  fluidb_string<13> sym__0___45_1234268100973412423;
  fluidb_string<15> sym__0__3322015854183825854;
  fluidb_string<21> sym__0___45_8904238202937071990;
  unsigned sym__0__5163836519019812846;
  fluidb_string<18> sym__0__4691003334066563198;
  fluidb_string<9> sym__0___45_5551906115245323664;
  fluidb_string<9> sym__0___45_5600985921898170805;
  unsigned sym__0__5190436275755771085;
  unsigned sym__0___45_7845023056148553349;
  fluidb_string<7> sym__0__4350246310517402262;
  unsigned sym__0___45_3651598037686104911;
  unsigned sym__0__3324866205947089014;
  unsigned sym__0___45_5106594024306176690;
  unsigned sym__0___45_2328020107090086808;
  unsigned sym__0___45_7664420784569873109;
  fluidb_string<15> sym__0___45_6481679278388374134;
  fluidb_string<2> sym__0___45_2993897051316018478;
  fluidb_string<2> sym__0___45_2860388295315395233;
  fluidb_string<2> sym__0__5791715696489447415;
  fluidb_string<2> sym__0__527970848583178293;
  unsigned sym__0___45_7693013323208628206;
  int sym__0___45_5748998446790810584;
  unsigned sym__0__3069459070183433616;
  unsigned sym__0___45_829318717909085626;
  unsigned sym__0___45_2230370735359665795;
  unsigned sym__0__8685332338033785108;
  fluidb_string<21> sym__0___45_3218024968775209731;
  unsigned sym__0__4595984355710025903;
  fluidb_string<10> sym__0___45_591668478459646448;
  unsigned sym__0___45_1807435744938342688;
  double sym__0___45_6813561383274320878;
  unsigned sym__0__8204168833568236084;
  double sym__0__6331674360378029114;
  unsigned sym__0___45_5676998185488268146;
  unsigned sym__0__6569292155259249065;
  double sym__0___45_8803043059407230605;
  fluidb_string<13> sym__0__4146004324203846043;
  unsigned sym__0__1079194730339214597;
  fluidb_string<25> sym__0___45_1132171939664831330;
  fluidb_string<40> sym__0__8743572897236263948;
  fluidb_string<16> sym__0___45_4967417594431087118;
  fluidb_string<16> sym__0__7039739059145821808;
  fluidb_string<13> sym__0___45_5539313807166473391;
  fluidb_string<15> sym__0__583748512005612830;
 private:
};


class Record7 {
 public:
  Record7(unsigned __sym__0___45_1025574003998131029, fluidb_string<18> __sym__0___45_4784800604860893165, fluidb_string<40> __sym__0___45_1411609952591628755, fluidb_string<11> __sym__0___45_1913295115179671625, fluidb_string<15> __sym__0__9072809578645855185, fluidb_string<13> __sym__0___45_5464070250290332560, fluidb_string<15> __sym__0__933420146717119635, fluidb_string<21> __sym__0__2667275118306512287, unsigned __sym__0__8588949506443749827, fluidb_string<18> __sym__0__7920830407322626643, fluidb_string<9> __sym__0__5305332586037824953, fluidb_string<9> __sym__0___45_1053966312104534410, unsigned __sym__0___45_6198993335082305916, unsigned __sym__0__7690058280377738342, fluidb_string<7> __sym__0___45_2049544794397086613, unsigned __sym__0__5507020187724303720, unsigned __sym__0__6914490607404402763, unsigned __sym__0___45_8279681045763420125, unsigned __sym__0___45_3932180337362497103, unsigned __sym__0___45_6176332772663548330, fluidb_string<15> __sym__0__6190813038341283487, fluidb_string<2> __sym__0__3713346528688064935, fluidb_string<2> __sym__0__7992018005137055818, fluidb_string<2> __sym__0__2865282924688716514, fluidb_string<2> __sym__0__5725165375634966252, unsigned __sym__0__8887246536100151783, int __sym__0___45_6081471496261851279, unsigned __sym__0___45_7430466813702827047, unsigned __sym__0__7594609353861991003, unsigned __sym__0__8853020833982446644, unsigned __sym__0___45_8246765730439899299, fluidb_string<21> __sym__0__2780189502936268468, unsigned __sym__0__970593930150477274, fluidb_string<10> __sym__0___45_5602522691235110567, unsigned __sym__0__7232510962340848169, double __sym__0__6941632465355474407, unsigned __sym__0___45_3587604894451806339, double __sym__0___45_5859841963981186289, unsigned __sym__0__6541764064674577507, unsigned __sym__0___45_1822363250521197728, double __sym__0___45_8727038341940034914, fluidb_string<13> __sym__0__6964867237811495302, unsigned __sym__0___45_1405666555141006852, fluidb_string<25> __sym__0___45_898115746588286093, fluidb_string<40> __sym__0__7198956026705252949, fluidb_string<16> __sym__0__281037671574347975, fluidb_string<16> __sym__0___45_6539711280059219527, fluidb_string<13> __sym__0___45_8427899041680547064, fluidb_string<15> __sym__0___45_927305770198459661) : sym__0___45_1025574003998131029(__sym__0___45_1025574003998131029), sym__0___45_4784800604860893165(__sym__0___45_4784800604860893165), sym__0___45_1411609952591628755(__sym__0___45_1411609952591628755), sym__0___45_1913295115179671625(__sym__0___45_1913295115179671625), sym__0__9072809578645855185(__sym__0__9072809578645855185), sym__0___45_5464070250290332560(__sym__0___45_5464070250290332560), sym__0__933420146717119635(__sym__0__933420146717119635), sym__0__2667275118306512287(__sym__0__2667275118306512287), sym__0__8588949506443749827(__sym__0__8588949506443749827), sym__0__7920830407322626643(__sym__0__7920830407322626643), sym__0__5305332586037824953(__sym__0__5305332586037824953), sym__0___45_1053966312104534410(__sym__0___45_1053966312104534410), sym__0___45_6198993335082305916(__sym__0___45_6198993335082305916), sym__0__7690058280377738342(__sym__0__7690058280377738342), sym__0___45_2049544794397086613(__sym__0___45_2049544794397086613), sym__0__5507020187724303720(__sym__0__5507020187724303720), sym__0__6914490607404402763(__sym__0__6914490607404402763), sym__0___45_8279681045763420125(__sym__0___45_8279681045763420125), sym__0___45_3932180337362497103(__sym__0___45_3932180337362497103), sym__0___45_6176332772663548330(__sym__0___45_6176332772663548330), sym__0__6190813038341283487(__sym__0__6190813038341283487), sym__0__3713346528688064935(__sym__0__3713346528688064935), sym__0__7992018005137055818(__sym__0__7992018005137055818), sym__0__2865282924688716514(__sym__0__2865282924688716514), sym__0__5725165375634966252(__sym__0__5725165375634966252), sym__0__8887246536100151783(__sym__0__8887246536100151783), sym__0___45_6081471496261851279(__sym__0___45_6081471496261851279), sym__0___45_7430466813702827047(__sym__0___45_7430466813702827047), sym__0__7594609353861991003(__sym__0__7594609353861991003), sym__0__8853020833982446644(__sym__0__8853020833982446644), sym__0___45_8246765730439899299(__sym__0___45_8246765730439899299), sym__0__2780189502936268468(__sym__0__2780189502936268468), sym__0__970593930150477274(__sym__0__970593930150477274), sym__0___45_5602522691235110567(__sym__0___45_5602522691235110567), sym__0__7232510962340848169(__sym__0__7232510962340848169), sym__0__6941632465355474407(__sym__0__6941632465355474407), sym__0___45_3587604894451806339(__sym__0___45_3587604894451806339), sym__0___45_5859841963981186289(__sym__0___45_5859841963981186289), sym__0__6541764064674577507(__sym__0__6541764064674577507), sym__0___45_1822363250521197728(__sym__0___45_1822363250521197728), sym__0___45_8727038341940034914(__sym__0___45_8727038341940034914), sym__0__6964867237811495302(__sym__0__6964867237811495302), sym__0___45_1405666555141006852(__sym__0___45_1405666555141006852), sym__0___45_898115746588286093(__sym__0___45_898115746588286093), sym__0__7198956026705252949(__sym__0__7198956026705252949), sym__0__281037671574347975(__sym__0__281037671574347975), sym__0___45_6539711280059219527(__sym__0___45_6539711280059219527), sym__0___45_8427899041680547064(__sym__0___45_8427899041680547064), sym__0___45_927305770198459661(__sym__0___45_927305770198459661)
  {
  }
  Record7() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_1025574003998131029 << " | " << arrToString(sym__0___45_4784800604860893165) << " | " << arrToString(sym__0___45_1411609952591628755) << " | " << arrToString(sym__0___45_1913295115179671625) << " | " << arrToString(sym__0__9072809578645855185) << " | " << arrToString(sym__0___45_5464070250290332560) << " | " << arrToString(sym__0__933420146717119635) << " | " << arrToString(sym__0__2667275118306512287) << " | " << sym__0__8588949506443749827 << " | " << arrToString(sym__0__7920830407322626643) << " | " << arrToString(sym__0__5305332586037824953) << " | " << arrToString(sym__0___45_1053966312104534410) << " | " << sym__0___45_6198993335082305916 << " | " << sym__0__7690058280377738342 << " | " << arrToString(sym__0___45_2049544794397086613) << " | " << sym__0__5507020187724303720 << " | " << sym__0__6914490607404402763 << " | " << sym__0___45_8279681045763420125 << " | " << sym__0___45_3932180337362497103 << " | " << sym__0___45_6176332772663548330 << " | " << arrToString(sym__0__6190813038341283487) << " | " << arrToString(sym__0__3713346528688064935) << " | " << arrToString(sym__0__7992018005137055818) << " | " << arrToString(sym__0__2865282924688716514) << " | " << arrToString(sym__0__5725165375634966252) << " | " << sym__0__8887246536100151783 << " | " << sym__0___45_6081471496261851279 << " | " << sym__0___45_7430466813702827047 << " | " << sym__0__7594609353861991003 << " | " << sym__0__8853020833982446644 << " | " << sym__0___45_8246765730439899299 << " | " << arrToString(sym__0__2780189502936268468) << " | " << sym__0__970593930150477274 << " | " << arrToString(sym__0___45_5602522691235110567) << " | " << sym__0__7232510962340848169 << " | " << sym__0__6941632465355474407 << " | " << sym__0___45_3587604894451806339 << " | " << sym__0___45_5859841963981186289 << " | " << sym__0__6541764064674577507 << " | " << sym__0___45_1822363250521197728 << " | " << sym__0___45_8727038341940034914 << " | " << arrToString(sym__0__6964867237811495302) << " | " << sym__0___45_1405666555141006852 << " | " << arrToString(sym__0___45_898115746588286093) << " | " << arrToString(sym__0__7198956026705252949) << " | " << arrToString(sym__0__281037671574347975) << " | " << arrToString(sym__0___45_6539711280059219527) << " | " << arrToString(sym__0___45_8427899041680547064) << " | " << arrToString(sym__0___45_927305770198459661);
    return o.str();
  }
  bool operator <(const Record7& otherRec) const{
    return (otherRec.sym__0___45_1025574003998131029 < sym__0___45_1025574003998131029 && (otherRec.sym__0___45_4784800604860893165 < sym__0___45_4784800604860893165 && (otherRec.sym__0___45_1411609952591628755 < sym__0___45_1411609952591628755 && (otherRec.sym__0___45_1913295115179671625 < sym__0___45_1913295115179671625 && (otherRec.sym__0__9072809578645855185 < sym__0__9072809578645855185 && (otherRec.sym__0___45_5464070250290332560 < sym__0___45_5464070250290332560 && (otherRec.sym__0__933420146717119635 < sym__0__933420146717119635 && (otherRec.sym__0__2667275118306512287 < sym__0__2667275118306512287 && (otherRec.sym__0__8588949506443749827 < sym__0__8588949506443749827 && (otherRec.sym__0__7920830407322626643 < sym__0__7920830407322626643 && (otherRec.sym__0__5305332586037824953 < sym__0__5305332586037824953 && (otherRec.sym__0___45_1053966312104534410 < sym__0___45_1053966312104534410 && (otherRec.sym__0___45_6198993335082305916 < sym__0___45_6198993335082305916 && (otherRec.sym__0__7690058280377738342 < sym__0__7690058280377738342 && (otherRec.sym__0___45_2049544794397086613 < sym__0___45_2049544794397086613 && (otherRec.sym__0__5507020187724303720 < sym__0__5507020187724303720 && (otherRec.sym__0__6914490607404402763 < sym__0__6914490607404402763 && (otherRec.sym__0___45_8279681045763420125 < sym__0___45_8279681045763420125 && (otherRec.sym__0___45_3932180337362497103 < sym__0___45_3932180337362497103 && (otherRec.sym__0___45_6176332772663548330 < sym__0___45_6176332772663548330 && (otherRec.sym__0__6190813038341283487 < sym__0__6190813038341283487 && (otherRec.sym__0__3713346528688064935 < sym__0__3713346528688064935 && (otherRec.sym__0__7992018005137055818 < sym__0__7992018005137055818 && (otherRec.sym__0__2865282924688716514 < sym__0__2865282924688716514 && (otherRec.sym__0__5725165375634966252 < sym__0__5725165375634966252 && (otherRec.sym__0__8887246536100151783 < sym__0__8887246536100151783 && (otherRec.sym__0___45_6081471496261851279 < sym__0___45_6081471496261851279 && (otherRec.sym__0___45_7430466813702827047 < sym__0___45_7430466813702827047 && (otherRec.sym__0__7594609353861991003 < sym__0__7594609353861991003 && (otherRec.sym__0__8853020833982446644 < sym__0__8853020833982446644 && (otherRec.sym__0___45_8246765730439899299 < sym__0___45_8246765730439899299 && (otherRec.sym__0__2780189502936268468 < sym__0__2780189502936268468 && (otherRec.sym__0__970593930150477274 < sym__0__970593930150477274 && (otherRec.sym__0___45_5602522691235110567 < sym__0___45_5602522691235110567 && (otherRec.sym__0__7232510962340848169 < sym__0__7232510962340848169 && (otherRec.sym__0__6941632465355474407 < sym__0__6941632465355474407 && (otherRec.sym__0___45_3587604894451806339 < sym__0___45_3587604894451806339 && (otherRec.sym__0___45_5859841963981186289 < sym__0___45_5859841963981186289 && (otherRec.sym__0__6541764064674577507 < sym__0__6541764064674577507 && (otherRec.sym__0___45_1822363250521197728 < sym__0___45_1822363250521197728 && (otherRec.sym__0___45_8727038341940034914 < sym__0___45_8727038341940034914 && (otherRec.sym__0__6964867237811495302 < sym__0__6964867237811495302 && (otherRec.sym__0___45_1405666555141006852 < sym__0___45_1405666555141006852 && (otherRec.sym__0___45_898115746588286093 < sym__0___45_898115746588286093 && (otherRec.sym__0__7198956026705252949 < sym__0__7198956026705252949 && (otherRec.sym__0__281037671574347975 < sym__0__281037671574347975 && (otherRec.sym__0___45_6539711280059219527 < sym__0___45_6539711280059219527 && (otherRec.sym__0___45_8427899041680547064 < sym__0___45_8427899041680547064 && otherRec.sym__0___45_927305770198459661 < sym__0___45_927305770198459661))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record7& otherRec) const{
    return (otherRec.sym__0___45_1025574003998131029 == sym__0___45_1025574003998131029 && (otherRec.sym__0___45_4784800604860893165 == sym__0___45_4784800604860893165 && (otherRec.sym__0___45_1411609952591628755 == sym__0___45_1411609952591628755 && (otherRec.sym__0___45_1913295115179671625 == sym__0___45_1913295115179671625 && (otherRec.sym__0__9072809578645855185 == sym__0__9072809578645855185 && (otherRec.sym__0___45_5464070250290332560 == sym__0___45_5464070250290332560 && (otherRec.sym__0__933420146717119635 == sym__0__933420146717119635 && (otherRec.sym__0__2667275118306512287 == sym__0__2667275118306512287 && (otherRec.sym__0__8588949506443749827 == sym__0__8588949506443749827 && (otherRec.sym__0__7920830407322626643 == sym__0__7920830407322626643 && (otherRec.sym__0__5305332586037824953 == sym__0__5305332586037824953 && (otherRec.sym__0___45_1053966312104534410 == sym__0___45_1053966312104534410 && (otherRec.sym__0___45_6198993335082305916 == sym__0___45_6198993335082305916 && (otherRec.sym__0__7690058280377738342 == sym__0__7690058280377738342 && (otherRec.sym__0___45_2049544794397086613 == sym__0___45_2049544794397086613 && (otherRec.sym__0__5507020187724303720 == sym__0__5507020187724303720 && (otherRec.sym__0__6914490607404402763 == sym__0__6914490607404402763 && (otherRec.sym__0___45_8279681045763420125 == sym__0___45_8279681045763420125 && (otherRec.sym__0___45_3932180337362497103 == sym__0___45_3932180337362497103 && (otherRec.sym__0___45_6176332772663548330 == sym__0___45_6176332772663548330 && (otherRec.sym__0__6190813038341283487 == sym__0__6190813038341283487 && (otherRec.sym__0__3713346528688064935 == sym__0__3713346528688064935 && (otherRec.sym__0__7992018005137055818 == sym__0__7992018005137055818 && (otherRec.sym__0__2865282924688716514 == sym__0__2865282924688716514 && (otherRec.sym__0__5725165375634966252 == sym__0__5725165375634966252 && (otherRec.sym__0__8887246536100151783 == sym__0__8887246536100151783 && (otherRec.sym__0___45_6081471496261851279 == sym__0___45_6081471496261851279 && (otherRec.sym__0___45_7430466813702827047 == sym__0___45_7430466813702827047 && (otherRec.sym__0__7594609353861991003 == sym__0__7594609353861991003 && (otherRec.sym__0__8853020833982446644 == sym__0__8853020833982446644 && (otherRec.sym__0___45_8246765730439899299 == sym__0___45_8246765730439899299 && (otherRec.sym__0__2780189502936268468 == sym__0__2780189502936268468 && (otherRec.sym__0__970593930150477274 == sym__0__970593930150477274 && (otherRec.sym__0___45_5602522691235110567 == sym__0___45_5602522691235110567 && (otherRec.sym__0__7232510962340848169 == sym__0__7232510962340848169 && (otherRec.sym__0__6941632465355474407 == sym__0__6941632465355474407 && (otherRec.sym__0___45_3587604894451806339 == sym__0___45_3587604894451806339 && (otherRec.sym__0___45_5859841963981186289 == sym__0___45_5859841963981186289 && (otherRec.sym__0__6541764064674577507 == sym__0__6541764064674577507 && (otherRec.sym__0___45_1822363250521197728 == sym__0___45_1822363250521197728 && (otherRec.sym__0___45_8727038341940034914 == sym__0___45_8727038341940034914 && (otherRec.sym__0__6964867237811495302 == sym__0__6964867237811495302 && (otherRec.sym__0___45_1405666555141006852 == sym__0___45_1405666555141006852 && (otherRec.sym__0___45_898115746588286093 == sym__0___45_898115746588286093 && (otherRec.sym__0__7198956026705252949 == sym__0__7198956026705252949 && (otherRec.sym__0__281037671574347975 == sym__0__281037671574347975 && (otherRec.sym__0___45_6539711280059219527 == sym__0___45_6539711280059219527 && (otherRec.sym__0___45_8427899041680547064 == sym__0___45_8427899041680547064 && otherRec.sym__0___45_927305770198459661 == sym__0___45_927305770198459661))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record7& otherRec) const{
    return (otherRec.sym__0___45_1025574003998131029 != sym__0___45_1025574003998131029 || (otherRec.sym__0___45_4784800604860893165 != sym__0___45_4784800604860893165 || (otherRec.sym__0___45_1411609952591628755 != sym__0___45_1411609952591628755 || (otherRec.sym__0___45_1913295115179671625 != sym__0___45_1913295115179671625 || (otherRec.sym__0__9072809578645855185 != sym__0__9072809578645855185 || (otherRec.sym__0___45_5464070250290332560 != sym__0___45_5464070250290332560 || (otherRec.sym__0__933420146717119635 != sym__0__933420146717119635 || (otherRec.sym__0__2667275118306512287 != sym__0__2667275118306512287 || (otherRec.sym__0__8588949506443749827 != sym__0__8588949506443749827 || (otherRec.sym__0__7920830407322626643 != sym__0__7920830407322626643 || (otherRec.sym__0__5305332586037824953 != sym__0__5305332586037824953 || (otherRec.sym__0___45_1053966312104534410 != sym__0___45_1053966312104534410 || (otherRec.sym__0___45_6198993335082305916 != sym__0___45_6198993335082305916 || (otherRec.sym__0__7690058280377738342 != sym__0__7690058280377738342 || (otherRec.sym__0___45_2049544794397086613 != sym__0___45_2049544794397086613 || (otherRec.sym__0__5507020187724303720 != sym__0__5507020187724303720 || (otherRec.sym__0__6914490607404402763 != sym__0__6914490607404402763 || (otherRec.sym__0___45_8279681045763420125 != sym__0___45_8279681045763420125 || (otherRec.sym__0___45_3932180337362497103 != sym__0___45_3932180337362497103 || (otherRec.sym__0___45_6176332772663548330 != sym__0___45_6176332772663548330 || (otherRec.sym__0__6190813038341283487 != sym__0__6190813038341283487 || (otherRec.sym__0__3713346528688064935 != sym__0__3713346528688064935 || (otherRec.sym__0__7992018005137055818 != sym__0__7992018005137055818 || (otherRec.sym__0__2865282924688716514 != sym__0__2865282924688716514 || (otherRec.sym__0__5725165375634966252 != sym__0__5725165375634966252 || (otherRec.sym__0__8887246536100151783 != sym__0__8887246536100151783 || (otherRec.sym__0___45_6081471496261851279 != sym__0___45_6081471496261851279 || (otherRec.sym__0___45_7430466813702827047 != sym__0___45_7430466813702827047 || (otherRec.sym__0__7594609353861991003 != sym__0__7594609353861991003 || (otherRec.sym__0__8853020833982446644 != sym__0__8853020833982446644 || (otherRec.sym__0___45_8246765730439899299 != sym__0___45_8246765730439899299 || (otherRec.sym__0__2780189502936268468 != sym__0__2780189502936268468 || (otherRec.sym__0__970593930150477274 != sym__0__970593930150477274 || (otherRec.sym__0___45_5602522691235110567 != sym__0___45_5602522691235110567 || (otherRec.sym__0__7232510962340848169 != sym__0__7232510962340848169 || (otherRec.sym__0__6941632465355474407 != sym__0__6941632465355474407 || (otherRec.sym__0___45_3587604894451806339 != sym__0___45_3587604894451806339 || (otherRec.sym__0___45_5859841963981186289 != sym__0___45_5859841963981186289 || (otherRec.sym__0__6541764064674577507 != sym__0__6541764064674577507 || (otherRec.sym__0___45_1822363250521197728 != sym__0___45_1822363250521197728 || (otherRec.sym__0___45_8727038341940034914 != sym__0___45_8727038341940034914 || (otherRec.sym__0__6964867237811495302 != sym__0__6964867237811495302 || (otherRec.sym__0___45_1405666555141006852 != sym__0___45_1405666555141006852 || (otherRec.sym__0___45_898115746588286093 != sym__0___45_898115746588286093 || (otherRec.sym__0__7198956026705252949 != sym__0__7198956026705252949 || (otherRec.sym__0__281037671574347975 != sym__0__281037671574347975 || (otherRec.sym__0___45_6539711280059219527 != sym__0___45_6539711280059219527 || (otherRec.sym__0___45_8427899041680547064 != sym__0___45_8427899041680547064 || otherRec.sym__0___45_927305770198459661 != sym__0___45_927305770198459661))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_1025574003998131029;
  fluidb_string<18> sym__0___45_4784800604860893165;
  fluidb_string<40> sym__0___45_1411609952591628755;
  fluidb_string<11> sym__0___45_1913295115179671625;
  fluidb_string<15> sym__0__9072809578645855185;
  fluidb_string<13> sym__0___45_5464070250290332560;
  fluidb_string<15> sym__0__933420146717119635;
  fluidb_string<21> sym__0__2667275118306512287;
  unsigned sym__0__8588949506443749827;
  fluidb_string<18> sym__0__7920830407322626643;
  fluidb_string<9> sym__0__5305332586037824953;
  fluidb_string<9> sym__0___45_1053966312104534410;
  unsigned sym__0___45_6198993335082305916;
  unsigned sym__0__7690058280377738342;
  fluidb_string<7> sym__0___45_2049544794397086613;
  unsigned sym__0__5507020187724303720;
  unsigned sym__0__6914490607404402763;
  unsigned sym__0___45_8279681045763420125;
  unsigned sym__0___45_3932180337362497103;
  unsigned sym__0___45_6176332772663548330;
  fluidb_string<15> sym__0__6190813038341283487;
  fluidb_string<2> sym__0__3713346528688064935;
  fluidb_string<2> sym__0__7992018005137055818;
  fluidb_string<2> sym__0__2865282924688716514;
  fluidb_string<2> sym__0__5725165375634966252;
  unsigned sym__0__8887246536100151783;
  int sym__0___45_6081471496261851279;
  unsigned sym__0___45_7430466813702827047;
  unsigned sym__0__7594609353861991003;
  unsigned sym__0__8853020833982446644;
  unsigned sym__0___45_8246765730439899299;
  fluidb_string<21> sym__0__2780189502936268468;
  unsigned sym__0__970593930150477274;
  fluidb_string<10> sym__0___45_5602522691235110567;
  unsigned sym__0__7232510962340848169;
  double sym__0__6941632465355474407;
  unsigned sym__0___45_3587604894451806339;
  double sym__0___45_5859841963981186289;
  unsigned sym__0__6541764064674577507;
  unsigned sym__0___45_1822363250521197728;
  double sym__0___45_8727038341940034914;
  fluidb_string<13> sym__0__6964867237811495302;
  unsigned sym__0___45_1405666555141006852;
  fluidb_string<25> sym__0___45_898115746588286093;
  fluidb_string<40> sym__0__7198956026705252949;
  fluidb_string<16> sym__0__281037671574347975;
  fluidb_string<16> sym__0___45_6539711280059219527;
  fluidb_string<13> sym__0___45_8427899041680547064;
  fluidb_string<15> sym__0___45_927305770198459661;
 private:
};


class Record1 {
 public:
  Record1(unsigned __sym__0__5373426235047388566, fluidb_string<18> __sym__0__2677149988632781646, fluidb_string<40> __sym__0__3230501947603702676, fluidb_string<11> __sym__0___45_7504312298840290590, fluidb_string<15> __sym__0__142765961647840520, fluidb_string<13> __sym__0___45_890986601021018327, fluidb_string<15> __sym__0__1448529583206195662, fluidb_string<21> __sym__0__2570343804236594778, unsigned __sym__0__1359507712116914494, fluidb_string<18> __sym__0__6011849395894522126, fluidb_string<9> __sym__0___45_7468776379460950944, fluidb_string<9> __sym__0___45_8794687169050633757, unsigned __sym__0___45_6203473563316140867, unsigned __sym__0___45_677371798856704365, fluidb_string<7> __sym__0__915473005346690518, unsigned __sym__0__6004818342855880465, unsigned __sym__0___45_7479113260177362442, unsigned __sym__0___45_7892661382758597666, unsigned __sym__0___45_5779290218296092888, unsigned __sym__0__39182466228154115, fluidb_string<15> __sym__0___45_6428352846240480422, fluidb_string<2> __sym__0__5771061490590798674, fluidb_string<2> __sym__0__5176922323272081847, fluidb_string<2> __sym__0__3439791191136335327, fluidb_string<2> __sym__0__9000735294801606101, unsigned __sym__0___45_4937244029492686830, int __sym__0___45_4662405569626189464, unsigned __sym__0__5296351127385819968, unsigned __sym__0__3188754882683964806, unsigned __sym__0__4353034828577292717, unsigned __sym__0___45_7269132014943876604, fluidb_string<21> __sym__0__2678892183314537005, unsigned __sym__0__4170008532883495879, fluidb_string<10> __sym__0___45_4375206156149434176, unsigned __sym__0__697181792988283792, double __sym__0__2425070607436168210, unsigned __sym__0___45_8099035356149320476, double __sym__0___45_1189046714177700278, unsigned __sym__0___45_7692406820437109602, unsigned __sym__0__4206086254272971481, double __sym__0___45_2483348542730046437, fluidb_string<13> __sym__0___45_762363192294171021) : sym__0__5373426235047388566(__sym__0__5373426235047388566), sym__0__2677149988632781646(__sym__0__2677149988632781646), sym__0__3230501947603702676(__sym__0__3230501947603702676), sym__0___45_7504312298840290590(__sym__0___45_7504312298840290590), sym__0__142765961647840520(__sym__0__142765961647840520), sym__0___45_890986601021018327(__sym__0___45_890986601021018327), sym__0__1448529583206195662(__sym__0__1448529583206195662), sym__0__2570343804236594778(__sym__0__2570343804236594778), sym__0__1359507712116914494(__sym__0__1359507712116914494), sym__0__6011849395894522126(__sym__0__6011849395894522126), sym__0___45_7468776379460950944(__sym__0___45_7468776379460950944), sym__0___45_8794687169050633757(__sym__0___45_8794687169050633757), sym__0___45_6203473563316140867(__sym__0___45_6203473563316140867), sym__0___45_677371798856704365(__sym__0___45_677371798856704365), sym__0__915473005346690518(__sym__0__915473005346690518), sym__0__6004818342855880465(__sym__0__6004818342855880465), sym__0___45_7479113260177362442(__sym__0___45_7479113260177362442), sym__0___45_7892661382758597666(__sym__0___45_7892661382758597666), sym__0___45_5779290218296092888(__sym__0___45_5779290218296092888), sym__0__39182466228154115(__sym__0__39182466228154115), sym__0___45_6428352846240480422(__sym__0___45_6428352846240480422), sym__0__5771061490590798674(__sym__0__5771061490590798674), sym__0__5176922323272081847(__sym__0__5176922323272081847), sym__0__3439791191136335327(__sym__0__3439791191136335327), sym__0__9000735294801606101(__sym__0__9000735294801606101), sym__0___45_4937244029492686830(__sym__0___45_4937244029492686830), sym__0___45_4662405569626189464(__sym__0___45_4662405569626189464), sym__0__5296351127385819968(__sym__0__5296351127385819968), sym__0__3188754882683964806(__sym__0__3188754882683964806), sym__0__4353034828577292717(__sym__0__4353034828577292717), sym__0___45_7269132014943876604(__sym__0___45_7269132014943876604), sym__0__2678892183314537005(__sym__0__2678892183314537005), sym__0__4170008532883495879(__sym__0__4170008532883495879), sym__0___45_4375206156149434176(__sym__0___45_4375206156149434176), sym__0__697181792988283792(__sym__0__697181792988283792), sym__0__2425070607436168210(__sym__0__2425070607436168210), sym__0___45_8099035356149320476(__sym__0___45_8099035356149320476), sym__0___45_1189046714177700278(__sym__0___45_1189046714177700278), sym__0___45_7692406820437109602(__sym__0___45_7692406820437109602), sym__0__4206086254272971481(__sym__0__4206086254272971481), sym__0___45_2483348542730046437(__sym__0___45_2483348542730046437), sym__0___45_762363192294171021(__sym__0___45_762363192294171021)
  {
  }
  Record1() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__5373426235047388566 << " | " << arrToString(sym__0__2677149988632781646) << " | " << arrToString(sym__0__3230501947603702676) << " | " << arrToString(sym__0___45_7504312298840290590) << " | " << arrToString(sym__0__142765961647840520) << " | " << arrToString(sym__0___45_890986601021018327) << " | " << arrToString(sym__0__1448529583206195662) << " | " << arrToString(sym__0__2570343804236594778) << " | " << sym__0__1359507712116914494 << " | " << arrToString(sym__0__6011849395894522126) << " | " << arrToString(sym__0___45_7468776379460950944) << " | " << arrToString(sym__0___45_8794687169050633757) << " | " << sym__0___45_6203473563316140867 << " | " << sym__0___45_677371798856704365 << " | " << arrToString(sym__0__915473005346690518) << " | " << sym__0__6004818342855880465 << " | " << sym__0___45_7479113260177362442 << " | " << sym__0___45_7892661382758597666 << " | " << sym__0___45_5779290218296092888 << " | " << sym__0__39182466228154115 << " | " << arrToString(sym__0___45_6428352846240480422) << " | " << arrToString(sym__0__5771061490590798674) << " | " << arrToString(sym__0__5176922323272081847) << " | " << arrToString(sym__0__3439791191136335327) << " | " << arrToString(sym__0__9000735294801606101) << " | " << sym__0___45_4937244029492686830 << " | " << sym__0___45_4662405569626189464 << " | " << sym__0__5296351127385819968 << " | " << sym__0__3188754882683964806 << " | " << sym__0__4353034828577292717 << " | " << sym__0___45_7269132014943876604 << " | " << arrToString(sym__0__2678892183314537005) << " | " << sym__0__4170008532883495879 << " | " << arrToString(sym__0___45_4375206156149434176) << " | " << sym__0__697181792988283792 << " | " << sym__0__2425070607436168210 << " | " << sym__0___45_8099035356149320476 << " | " << sym__0___45_1189046714177700278 << " | " << sym__0___45_7692406820437109602 << " | " << sym__0__4206086254272971481 << " | " << sym__0___45_2483348542730046437 << " | " << arrToString(sym__0___45_762363192294171021);
    return o.str();
  }
  bool operator <(const Record1& otherRec) const{
    return (otherRec.sym__0__5373426235047388566 < sym__0__5373426235047388566 && (otherRec.sym__0__2677149988632781646 < sym__0__2677149988632781646 && (otherRec.sym__0__3230501947603702676 < sym__0__3230501947603702676 && (otherRec.sym__0___45_7504312298840290590 < sym__0___45_7504312298840290590 && (otherRec.sym__0__142765961647840520 < sym__0__142765961647840520 && (otherRec.sym__0___45_890986601021018327 < sym__0___45_890986601021018327 && (otherRec.sym__0__1448529583206195662 < sym__0__1448529583206195662 && (otherRec.sym__0__2570343804236594778 < sym__0__2570343804236594778 && (otherRec.sym__0__1359507712116914494 < sym__0__1359507712116914494 && (otherRec.sym__0__6011849395894522126 < sym__0__6011849395894522126 && (otherRec.sym__0___45_7468776379460950944 < sym__0___45_7468776379460950944 && (otherRec.sym__0___45_8794687169050633757 < sym__0___45_8794687169050633757 && (otherRec.sym__0___45_6203473563316140867 < sym__0___45_6203473563316140867 && (otherRec.sym__0___45_677371798856704365 < sym__0___45_677371798856704365 && (otherRec.sym__0__915473005346690518 < sym__0__915473005346690518 && (otherRec.sym__0__6004818342855880465 < sym__0__6004818342855880465 && (otherRec.sym__0___45_7479113260177362442 < sym__0___45_7479113260177362442 && (otherRec.sym__0___45_7892661382758597666 < sym__0___45_7892661382758597666 && (otherRec.sym__0___45_5779290218296092888 < sym__0___45_5779290218296092888 && (otherRec.sym__0__39182466228154115 < sym__0__39182466228154115 && (otherRec.sym__0___45_6428352846240480422 < sym__0___45_6428352846240480422 && (otherRec.sym__0__5771061490590798674 < sym__0__5771061490590798674 && (otherRec.sym__0__5176922323272081847 < sym__0__5176922323272081847 && (otherRec.sym__0__3439791191136335327 < sym__0__3439791191136335327 && (otherRec.sym__0__9000735294801606101 < sym__0__9000735294801606101 && (otherRec.sym__0___45_4937244029492686830 < sym__0___45_4937244029492686830 && (otherRec.sym__0___45_4662405569626189464 < sym__0___45_4662405569626189464 && (otherRec.sym__0__5296351127385819968 < sym__0__5296351127385819968 && (otherRec.sym__0__3188754882683964806 < sym__0__3188754882683964806 && (otherRec.sym__0__4353034828577292717 < sym__0__4353034828577292717 && (otherRec.sym__0___45_7269132014943876604 < sym__0___45_7269132014943876604 && (otherRec.sym__0__2678892183314537005 < sym__0__2678892183314537005 && (otherRec.sym__0__4170008532883495879 < sym__0__4170008532883495879 && (otherRec.sym__0___45_4375206156149434176 < sym__0___45_4375206156149434176 && (otherRec.sym__0__697181792988283792 < sym__0__697181792988283792 && (otherRec.sym__0__2425070607436168210 < sym__0__2425070607436168210 && (otherRec.sym__0___45_8099035356149320476 < sym__0___45_8099035356149320476 && (otherRec.sym__0___45_1189046714177700278 < sym__0___45_1189046714177700278 && (otherRec.sym__0___45_7692406820437109602 < sym__0___45_7692406820437109602 && (otherRec.sym__0__4206086254272971481 < sym__0__4206086254272971481 && (otherRec.sym__0___45_2483348542730046437 < sym__0___45_2483348542730046437 && otherRec.sym__0___45_762363192294171021 < sym__0___45_762363192294171021)))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record1& otherRec) const{
    return (otherRec.sym__0__5373426235047388566 == sym__0__5373426235047388566 && (otherRec.sym__0__2677149988632781646 == sym__0__2677149988632781646 && (otherRec.sym__0__3230501947603702676 == sym__0__3230501947603702676 && (otherRec.sym__0___45_7504312298840290590 == sym__0___45_7504312298840290590 && (otherRec.sym__0__142765961647840520 == sym__0__142765961647840520 && (otherRec.sym__0___45_890986601021018327 == sym__0___45_890986601021018327 && (otherRec.sym__0__1448529583206195662 == sym__0__1448529583206195662 && (otherRec.sym__0__2570343804236594778 == sym__0__2570343804236594778 && (otherRec.sym__0__1359507712116914494 == sym__0__1359507712116914494 && (otherRec.sym__0__6011849395894522126 == sym__0__6011849395894522126 && (otherRec.sym__0___45_7468776379460950944 == sym__0___45_7468776379460950944 && (otherRec.sym__0___45_8794687169050633757 == sym__0___45_8794687169050633757 && (otherRec.sym__0___45_6203473563316140867 == sym__0___45_6203473563316140867 && (otherRec.sym__0___45_677371798856704365 == sym__0___45_677371798856704365 && (otherRec.sym__0__915473005346690518 == sym__0__915473005346690518 && (otherRec.sym__0__6004818342855880465 == sym__0__6004818342855880465 && (otherRec.sym__0___45_7479113260177362442 == sym__0___45_7479113260177362442 && (otherRec.sym__0___45_7892661382758597666 == sym__0___45_7892661382758597666 && (otherRec.sym__0___45_5779290218296092888 == sym__0___45_5779290218296092888 && (otherRec.sym__0__39182466228154115 == sym__0__39182466228154115 && (otherRec.sym__0___45_6428352846240480422 == sym__0___45_6428352846240480422 && (otherRec.sym__0__5771061490590798674 == sym__0__5771061490590798674 && (otherRec.sym__0__5176922323272081847 == sym__0__5176922323272081847 && (otherRec.sym__0__3439791191136335327 == sym__0__3439791191136335327 && (otherRec.sym__0__9000735294801606101 == sym__0__9000735294801606101 && (otherRec.sym__0___45_4937244029492686830 == sym__0___45_4937244029492686830 && (otherRec.sym__0___45_4662405569626189464 == sym__0___45_4662405569626189464 && (otherRec.sym__0__5296351127385819968 == sym__0__5296351127385819968 && (otherRec.sym__0__3188754882683964806 == sym__0__3188754882683964806 && (otherRec.sym__0__4353034828577292717 == sym__0__4353034828577292717 && (otherRec.sym__0___45_7269132014943876604 == sym__0___45_7269132014943876604 && (otherRec.sym__0__2678892183314537005 == sym__0__2678892183314537005 && (otherRec.sym__0__4170008532883495879 == sym__0__4170008532883495879 && (otherRec.sym__0___45_4375206156149434176 == sym__0___45_4375206156149434176 && (otherRec.sym__0__697181792988283792 == sym__0__697181792988283792 && (otherRec.sym__0__2425070607436168210 == sym__0__2425070607436168210 && (otherRec.sym__0___45_8099035356149320476 == sym__0___45_8099035356149320476 && (otherRec.sym__0___45_1189046714177700278 == sym__0___45_1189046714177700278 && (otherRec.sym__0___45_7692406820437109602 == sym__0___45_7692406820437109602 && (otherRec.sym__0__4206086254272971481 == sym__0__4206086254272971481 && (otherRec.sym__0___45_2483348542730046437 == sym__0___45_2483348542730046437 && otherRec.sym__0___45_762363192294171021 == sym__0___45_762363192294171021)))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record1& otherRec) const{
    return (otherRec.sym__0__5373426235047388566 != sym__0__5373426235047388566 || (otherRec.sym__0__2677149988632781646 != sym__0__2677149988632781646 || (otherRec.sym__0__3230501947603702676 != sym__0__3230501947603702676 || (otherRec.sym__0___45_7504312298840290590 != sym__0___45_7504312298840290590 || (otherRec.sym__0__142765961647840520 != sym__0__142765961647840520 || (otherRec.sym__0___45_890986601021018327 != sym__0___45_890986601021018327 || (otherRec.sym__0__1448529583206195662 != sym__0__1448529583206195662 || (otherRec.sym__0__2570343804236594778 != sym__0__2570343804236594778 || (otherRec.sym__0__1359507712116914494 != sym__0__1359507712116914494 || (otherRec.sym__0__6011849395894522126 != sym__0__6011849395894522126 || (otherRec.sym__0___45_7468776379460950944 != sym__0___45_7468776379460950944 || (otherRec.sym__0___45_8794687169050633757 != sym__0___45_8794687169050633757 || (otherRec.sym__0___45_6203473563316140867 != sym__0___45_6203473563316140867 || (otherRec.sym__0___45_677371798856704365 != sym__0___45_677371798856704365 || (otherRec.sym__0__915473005346690518 != sym__0__915473005346690518 || (otherRec.sym__0__6004818342855880465 != sym__0__6004818342855880465 || (otherRec.sym__0___45_7479113260177362442 != sym__0___45_7479113260177362442 || (otherRec.sym__0___45_7892661382758597666 != sym__0___45_7892661382758597666 || (otherRec.sym__0___45_5779290218296092888 != sym__0___45_5779290218296092888 || (otherRec.sym__0__39182466228154115 != sym__0__39182466228154115 || (otherRec.sym__0___45_6428352846240480422 != sym__0___45_6428352846240480422 || (otherRec.sym__0__5771061490590798674 != sym__0__5771061490590798674 || (otherRec.sym__0__5176922323272081847 != sym__0__5176922323272081847 || (otherRec.sym__0__3439791191136335327 != sym__0__3439791191136335327 || (otherRec.sym__0__9000735294801606101 != sym__0__9000735294801606101 || (otherRec.sym__0___45_4937244029492686830 != sym__0___45_4937244029492686830 || (otherRec.sym__0___45_4662405569626189464 != sym__0___45_4662405569626189464 || (otherRec.sym__0__5296351127385819968 != sym__0__5296351127385819968 || (otherRec.sym__0__3188754882683964806 != sym__0__3188754882683964806 || (otherRec.sym__0__4353034828577292717 != sym__0__4353034828577292717 || (otherRec.sym__0___45_7269132014943876604 != sym__0___45_7269132014943876604 || (otherRec.sym__0__2678892183314537005 != sym__0__2678892183314537005 || (otherRec.sym__0__4170008532883495879 != sym__0__4170008532883495879 || (otherRec.sym__0___45_4375206156149434176 != sym__0___45_4375206156149434176 || (otherRec.sym__0__697181792988283792 != sym__0__697181792988283792 || (otherRec.sym__0__2425070607436168210 != sym__0__2425070607436168210 || (otherRec.sym__0___45_8099035356149320476 != sym__0___45_8099035356149320476 || (otherRec.sym__0___45_1189046714177700278 != sym__0___45_1189046714177700278 || (otherRec.sym__0___45_7692406820437109602 != sym__0___45_7692406820437109602 || (otherRec.sym__0__4206086254272971481 != sym__0__4206086254272971481 || (otherRec.sym__0___45_2483348542730046437 != sym__0___45_2483348542730046437 || otherRec.sym__0___45_762363192294171021 != sym__0___45_762363192294171021)))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__5373426235047388566;
  fluidb_string<18> sym__0__2677149988632781646;
  fluidb_string<40> sym__0__3230501947603702676;
  fluidb_string<11> sym__0___45_7504312298840290590;
  fluidb_string<15> sym__0__142765961647840520;
  fluidb_string<13> sym__0___45_890986601021018327;
  fluidb_string<15> sym__0__1448529583206195662;
  fluidb_string<21> sym__0__2570343804236594778;
  unsigned sym__0__1359507712116914494;
  fluidb_string<18> sym__0__6011849395894522126;
  fluidb_string<9> sym__0___45_7468776379460950944;
  fluidb_string<9> sym__0___45_8794687169050633757;
  unsigned sym__0___45_6203473563316140867;
  unsigned sym__0___45_677371798856704365;
  fluidb_string<7> sym__0__915473005346690518;
  unsigned sym__0__6004818342855880465;
  unsigned sym__0___45_7479113260177362442;
  unsigned sym__0___45_7892661382758597666;
  unsigned sym__0___45_5779290218296092888;
  unsigned sym__0__39182466228154115;
  fluidb_string<15> sym__0___45_6428352846240480422;
  fluidb_string<2> sym__0__5771061490590798674;
  fluidb_string<2> sym__0__5176922323272081847;
  fluidb_string<2> sym__0__3439791191136335327;
  fluidb_string<2> sym__0__9000735294801606101;
  unsigned sym__0___45_4937244029492686830;
  int sym__0___45_4662405569626189464;
  unsigned sym__0__5296351127385819968;
  unsigned sym__0__3188754882683964806;
  unsigned sym__0__4353034828577292717;
  unsigned sym__0___45_7269132014943876604;
  fluidb_string<21> sym__0__2678892183314537005;
  unsigned sym__0__4170008532883495879;
  fluidb_string<10> sym__0___45_4375206156149434176;
  unsigned sym__0__697181792988283792;
  double sym__0__2425070607436168210;
  unsigned sym__0___45_8099035356149320476;
  double sym__0___45_1189046714177700278;
  unsigned sym__0___45_7692406820437109602;
  unsigned sym__0__4206086254272971481;
  double sym__0___45_2483348542730046437;
  fluidb_string<13> sym__0___45_762363192294171021;
 private:
};


class Record24 {
 public:
  Record24(fluidb_string<11> __sortElem0, fluidb_string<16> __sortElem1, unsigned __sortElem2) : sortElem0(__sortElem0), sortElem1(__sortElem1), sortElem2(__sortElem2)
  {
  }
  Record24() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << arrToString(sortElem0) << " | " << arrToString(sortElem1) << " | " << sortElem2;
    return o.str();
  }
  bool operator <(const Record24& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && (otherRec.sortElem1 < sortElem1 && otherRec.sortElem2 < sortElem2));
  }
  bool operator ==(const Record24& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && (otherRec.sortElem1 == sortElem1 && otherRec.sortElem2 == sortElem2));
  }
  bool operator !=(const Record24& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || (otherRec.sortElem1 != sortElem1 || otherRec.sortElem2 != sortElem2));
  }
  fluidb_string<11> sortElem0;
  fluidb_string<16> sortElem1;
  unsigned sortElem2;
 private:
};


class Record6 {
 public:
  Record6(unsigned __sym__0___45_9117911789383871612, fluidb_string<25> __sym__0___45_1547112764757372609, fluidb_string<40> __sym__0___45_8663957751614366179, fluidb_string<16> __sym__0__1466641425010216931, fluidb_string<16> __sym__0__3672857626658041553, fluidb_string<13> __sym__0___45_3362440237381592032, fluidb_string<15> __sym__0___45_6631364176934158657) : sym__0___45_9117911789383871612(__sym__0___45_9117911789383871612), sym__0___45_1547112764757372609(__sym__0___45_1547112764757372609), sym__0___45_8663957751614366179(__sym__0___45_8663957751614366179), sym__0__1466641425010216931(__sym__0__1466641425010216931), sym__0__3672857626658041553(__sym__0__3672857626658041553), sym__0___45_3362440237381592032(__sym__0___45_3362440237381592032), sym__0___45_6631364176934158657(__sym__0___45_6631364176934158657)
  {
  }
  Record6() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_9117911789383871612 << " | " << arrToString(sym__0___45_1547112764757372609) << " | " << arrToString(sym__0___45_8663957751614366179) << " | " << arrToString(sym__0__1466641425010216931) << " | " << arrToString(sym__0__3672857626658041553) << " | " << arrToString(sym__0___45_3362440237381592032) << " | " << arrToString(sym__0___45_6631364176934158657);
    return o.str();
  }
  bool operator <(const Record6& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 < sym__0___45_9117911789383871612 && (otherRec.sym__0___45_1547112764757372609 < sym__0___45_1547112764757372609 && (otherRec.sym__0___45_8663957751614366179 < sym__0___45_8663957751614366179 && (otherRec.sym__0__1466641425010216931 < sym__0__1466641425010216931 && (otherRec.sym__0__3672857626658041553 < sym__0__3672857626658041553 && (otherRec.sym__0___45_3362440237381592032 < sym__0___45_3362440237381592032 && otherRec.sym__0___45_6631364176934158657 < sym__0___45_6631364176934158657))))));
  }
  bool operator ==(const Record6& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 == sym__0___45_9117911789383871612 && (otherRec.sym__0___45_1547112764757372609 == sym__0___45_1547112764757372609 && (otherRec.sym__0___45_8663957751614366179 == sym__0___45_8663957751614366179 && (otherRec.sym__0__1466641425010216931 == sym__0__1466641425010216931 && (otherRec.sym__0__3672857626658041553 == sym__0__3672857626658041553 && (otherRec.sym__0___45_3362440237381592032 == sym__0___45_3362440237381592032 && otherRec.sym__0___45_6631364176934158657 == sym__0___45_6631364176934158657))))));
  }
  bool operator !=(const Record6& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 != sym__0___45_9117911789383871612 || (otherRec.sym__0___45_1547112764757372609 != sym__0___45_1547112764757372609 || (otherRec.sym__0___45_8663957751614366179 != sym__0___45_8663957751614366179 || (otherRec.sym__0__1466641425010216931 != sym__0__1466641425010216931 || (otherRec.sym__0__3672857626658041553 != sym__0__3672857626658041553 || (otherRec.sym__0___45_3362440237381592032 != sym__0___45_3362440237381592032 || otherRec.sym__0___45_6631364176934158657 != sym__0___45_6631364176934158657))))));
  }
  unsigned sym__0___45_9117911789383871612;
  fluidb_string<25> sym__0___45_1547112764757372609;
  fluidb_string<40> sym__0___45_8663957751614366179;
  fluidb_string<16> sym__0__1466641425010216931;
  fluidb_string<16> sym__0__3672857626658041553;
  fluidb_string<13> sym__0___45_3362440237381592032;
  fluidb_string<15> sym__0___45_6631364176934158657;
 private:
};


class CallableClass15 {
 public:
  bool operator()(const Record7& record14) {
    return like(record14.sym__0___45_6539711280059219527, "UNITED STATES");
  }
  typedef bool Codomain;
  typedef Record7 Domain0;
 private:
};


class CallableClass28 {
 public:
  Record27 operator()(const Record17& record26) {
    return Record27(record26.sym__0___45_9000295950570013541, (-(record26.sym__0___45_4437040401381761565)));
  }
  typedef Record27 Codomain;
  typedef Record17 Domain0;
 private:
};


class CallableClass23 {
 public:
  Record17 operator()(const Record19& record16) {
    return Record17(vAggrFirst18(record16.sym__0__7034531493904066722), vAggrFirst20(record16.sym__0___45_4967417594431087118), vAggrFirst21(record16.sym__0__5190436275755771085), vAggrSum22(record16.sym__0___45_5676998185488268146));
  }
  typedef Record17 Codomain;
  typedef Record19 Domain0;
 private:
  AggrFirst<fluidb_string<11>> vAggrFirst18;
  AggrFirst<fluidb_string<16>> vAggrFirst20;
  AggrFirst<unsigned> vAggrFirst21;
  AggrSum<unsigned> vAggrSum22;
};


class CallableClass8 {
 public:
  Record7 operator()(const Record5& record3, const Record6& record4) {
    return Record7(record3.sym__0__5047421274045357113, record3.sym__0__1111371532348373905, record3.sym__0__3616315983793812415, record3.sym__0__5478499544478842365, record3.sym__0__9198814011305918491, record3.sym__0__5184064682442841190, record3.sym__0__8776819689660585745, record3.sym__0__3880509548823276917, record3.sym__0___45_7245943137499681887, record3.sym__0___45_2295638738224715823, record3.sym__0__7231637917665667987, record3.sym__0___45_8975225596959663088, record3.sym__0__3613870501759166498, record3.sym__0__1570651575008030560, record3.sym__0__115945876907898361, record3.sym__0__7964449538584066510, record3.sym__0__1660564563630425049, record3.sym__0___45_8849919160064307967, record3.sym__0__4389067787166632955, record3.sym__0__8182303437242608, record3.sym__0__6576599429404095093, record3.sym__0__7143354719373501837, record3.sym__0___45_2048743282533748660, record3.sym__0___45_5050379460643539596, record3.sym__0___45_5591405934841628166, record3.sym__0__7237342047573386957, record3.sym__0___45_786415910032980037, record3.sym__0__8257693010788225203, record3.sym__0__1524874236739768329, record3.sym__0__2230266097477937458, record3.sym__0___45_7086886507829122289, record3.sym__0___45_6002386514329473358, record3.sym__0___45_678242321222098884, record3.sym__0___45_8995561222449159373, record3.sym__0___45_4113611234327906717, record3.sym__0__1861270880433093325, record3.sym__0___45_5367025412787902929, record3.sym__0___45_5000658247033003707, record3.sym__0___45_8196327343032528319, record3.sym__0__2373859223190952182, record3.sym__0__3931679180353468680, record3.sym__0___45_1587807567217389696, record4.sym__0___45_9117911789383871612, record4.sym__0___45_1547112764757372609, record4.sym__0___45_8663957751614366179, record4.sym__0__1466641425010216931, record4.sym__0__3672857626658041553, record4.sym__0___45_3362440237381592032, record4.sym__0___45_6631364176934158657);
  }
  typedef Record7 Codomain;
  typedef Record5 Domain0;
  typedef Record6 Domain1;
 private:
};


class CallableClass11 {
 public:
  Record9 operator()(const Record5& record10) {
    return Record9(record10.sym__0__2230266097477937458);
  }
  typedef Record9 Codomain;
  typedef Record5 Domain0;
 private:
};


class CallableClass13 {
 public:
  Record9 operator()(const Record6& record12) {
    return Record9(record12.sym__0___45_9117911789383871612);
  }
  typedef Record9 Codomain;
  typedef Record6 Domain0;
 private:
};


class CallableClass25 {
 public:
  Record24 operator()(const Record19& record16) {
    return Record24(record16.sym__0__7034531493904066722, record16.sym__0___45_4967417594431087118, record16.sym__0__5190436275755771085);
  }
  typedef Record24 Codomain;
  typedef Record19 Domain0;
 private:
};


class CallableClass2 {
 public:
  bool operator()(const Record1& record0) {
    return (((record0.sym__0___45_6203473563316140867 >= 1992) && (record0.sym__0___45_6203473563316140867 <= 1997)) && like(record0.sym__0__142765961647840520, "UNITED STATES"));
  }
  typedef bool Codomain;
  typedef Record1 Domain0;
 private:
};






int main() {
  // Delete: (Q1 
  //   (QSort [E0 (ESym "d_year"),E1 ENeg (E0 (ESym "revenue"))]) 
  //   (Q1 
  //     (QGroup 
  //       [(ESym "c_nation",E0 (NAggr AggrFirst (E0 (ESym "c_nation")))),
  //        (ESym "s_nation",E0 (NAggr AggrFirst (E0 (ESym "s_nation")))),
  //        (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //        (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //       [E0 (ESym "c_nation"),E0 (ESym "s_nation"),E0 (ESym "d_year")]) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P2 
  //             PAnd 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_region"))) 
  //                   (R0 (E0 (EString "ASIA"))))) 
  //             (P0 
  //               (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992)))))) 
  //           (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_region"))) 
  //               (R0 (E0 (EString "ASIA")))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_custkey"))) 
  //                 (R0 (E0 (ESym "c_custkey"))))) 
  //           (Q0 (TSymbol "customer")) 
  //           (J 
  //             (P0 
  //               (R2 REq 
  //                   (R0 (E0 (ESym "lo_orderdate"))) 
  //                   (R0 (E0 (ESym "d_datekey"))))) 
  //             (Q0 (TSymbol "date")) 
  //             (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QSort [E0 (ESym \"d_year\"),E1 ENeg (E0 (ESym \"revenue\"))]) \n  (Q1 \n    (QGroup \n      [(ESym \"c_nation\",E0 (NAggr AggrFirst (E0 (ESym \"c_nation\")))),\n       (ESym \"s_nation\",E0 (NAggr AggrFirst (E0 (ESym \"s_nation\")))),\n       (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n       (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n      [E0 (ESym \"c_nation\"),E0 (ESym \"s_nation\"),E0 (ESym \"d_year\")]) \n    (S \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P2 \n            PAnd \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_region\"))) \n                  (R0 (E0 (EString \"ASIA\"))))) \n            (P0 \n              (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992)))))) \n          (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_region\"))) \n              (R0 (E0 (EString \"ASIA\")))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_custkey\"))) \n                (R0 (E0 (ESym \"c_custkey\"))))) \n          (Q0 (TSymbol \"customer\")) \n          (J \n            (P0 \n              (R2 REq \n                  (R0 (E0 (ESym \"lo_orderdate\"))) \n                  (R0 (E0 (ESym \"d_datekey\"))))) \n            (Q0 (TSymbol \"date\")) \n            (Q0 (TSymbol \"lineorder\")))) \n        (Q0 (TSymbol \"supplier\"))))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data194.dat");
  // Delete: (Q1 
  //   (QGroup 
  //     [(ESym "c_nation",E0 (NAggr AggrFirst (E0 (ESym "c_nation")))),
  //      (ESym "s_nation",E0 (NAggr AggrFirst (E0 (ESym "s_nation")))),
  //      (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //      (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //     [E0 (ESym "c_nation"),E0 (ESym "s_nation"),E0 (ESym "d_year")]) 
  //   (S 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_region"))) 
  //                 (R0 (E0 (EString "ASIA"))))) 
  //           (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992)))))) 
  //         (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_region"))) 
  //             (R0 (E0 (EString "ASIA")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_suppkey"))) 
  //             (R0 (E0 (ESym "s_suppkey"))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QGroup \n    [(ESym \"c_nation\",E0 (NAggr AggrFirst (E0 (ESym \"c_nation\")))),\n     (ESym \"s_nation\",E0 (NAggr AggrFirst (E0 (ESym \"s_nation\")))),\n     (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n     (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n    [E0 (ESym \"c_nation\"),E0 (ESym \"s_nation\"),E0 (ESym \"d_year\")]) \n  (S \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_region\"))) \n                (R0 (E0 (EString \"ASIA\"))))) \n          (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992)))))) \n        (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_region\"))) \n            (R0 (E0 (EString \"ASIA\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_suppkey\"))) \n            (R0 (E0 (ESym \"s_suppkey\"))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))) \n      (Q0 (TSymbol \"supplier\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data193.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey")))))) 
  //   (S 
  //     (P0 
  //       (R2 REq (R0 (E0 (ESym "d_yearmonthnum"))) (R0 (E0 (EInt 199401))))) 
  //     (Q0 (TSymbol "date"))) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\")))))) \n  (S \n    (P0 \n      (R2 REq (R0 (E0 (ESym \"d_yearmonthnum\"))) (R0 (E0 (EInt 199401))))) \n    (Q0 (TSymbol \"date\"))) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data9.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey")))))) 
  //   (Q0 (TSymbol "date")) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\")))))) \n  (Q0 (TSymbol \"date\")) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data138.dat");
  std::cout << "Delete: (Q0 (TSymbol \"lineorder\"))" << std::endl;
  deleteFile("/tmp/fluidb_store/data0.dat");
  std::cout << "Delete: (Q0 (TSymbol \"date\"))" << std::endl;
  deleteFile("/tmp/fluidb_store/data1.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P0 
  //       (R2 RLike (R0 (E0 (ESym "c_region"))) (R0 (E0 (EString "ASIA"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P0 \n      (R2 RLike (R0 (E0 (ESym \"c_region\"))) (R0 (E0 (EString \"ASIA\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data171.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P0 
  //       (R2 RLike (R0 (E0 (ESym "c_region"))) (R0 (E0 (EString "ASIA"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P0 \n      (R2 RLike (R0 (E0 (ESym \"c_region\"))) (R0 (E0 (EString \"ASIA\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data173.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq 
  //         (R0 (E0 (ESym "lo_orderdate"))) 
  //         (R0 (E0 (ESym "d_datekey"))))) 
  //   (S 
  //     (P0 
  //       (R2 REq (R0 (E0 (ESym "d_yearmonthnum"))) (R0 (E0 (EInt 199401))))) 
  //     (Q0 (TSymbol "date"))) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq \n        (R0 (E0 (ESym \"lo_orderdate\"))) \n        (R0 (E0 (ESym \"d_datekey\"))))) \n  (S \n    (P0 \n      (R2 REq (R0 (E0 (ESym \"d_yearmonthnum\"))) (R0 (E0 (EInt 199401))))) \n    (Q0 (TSymbol \"date\"))) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data8.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P2 
  //           PAnd 
  //           (P2 
  //             PAnd 
  //             (P0 
  //               (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 
  //               (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_nation"))) 
  //                 (R0 (E0 (EString "UNITED STATES"))))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P2 \n          PAnd \n          (P2 \n            PAnd \n            (P0 \n              (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 \n              (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_nation\"))) \n                (R0 (E0 (EString \"UNITED STATES\"))))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass2>(Just<const std::string>("/tmp/fluidb_store/data197.dat"), Just<const std::string>("/tmp/fluidb_store/data198.dat"), "/tmp/fluidb_store/data144.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey")))))) 
  //   (Q0 (TSymbol "customer")) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey"))))) 
  //     (Q0 (TSymbol "date")) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\")))))) \n  (Q0 (TSymbol \"customer\")) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\"))))) \n    (Q0 (TSymbol \"date\")) \n    (Q0 (TSymbol \"lineorder\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data143.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey")))))) 
  //   (Q0 (TSymbol "customer")) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey"))))) 
  //     (Q0 (TSymbol "date")) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\")))))) \n  (Q0 (TSymbol \"customer\")) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\"))))) \n    (Q0 (TSymbol \"date\")) \n    (Q0 (TSymbol \"lineorder\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data145.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P0 
  //       (R2 RLike (R0 (E0 (ESym "s_region"))) (R0 (E0 (EString "ASIA")))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_region"))) 
  //               (R0 (E0 (EString "ASIA")))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder"))))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P0 \n      (R2 RLike (R0 (E0 (ESym \"s_region\"))) (R0 (E0 (EString \"ASIA\")))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (S \n      (P2 \n        PAnd \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_region\"))) \n              (R0 (E0 (EString \"ASIA\")))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\"))))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data176.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq (R0 (E0 (ESym "lo_suppkey"))) (R0 (E0 (ESym "s_suppkey"))))) 
  //   (S 
  //     (P0 
  //       (R2 RLike (R0 (E0 (ESym "c_region"))) (R0 (E0 (EString "ASIA"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq (R0 (E0 (ESym \"lo_suppkey\"))) (R0 (E0 (ESym \"s_suppkey\"))))) \n  (S \n    (P0 \n      (R2 RLike (R0 (E0 (ESym \"c_region\"))) (R0 (E0 (EString \"ASIA\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data172.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass11, CallableClass13, CallableClass8>(Just<const std::string>("/tmp/fluidb_store/data201.dat"), Just<const std::string>("/tmp/fluidb_store/data200.dat"), Just<const std::string>("/tmp/fluidb_store/data202.dat"), "/tmp/fluidb_store/data197.dat", "/run/user/1000/fluidb-data/supplier.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P2 PAnd 
  //         (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //         (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //     (P0 
  //       (R2 RLike (R0 (E0 (ESym "c_region"))) (R0 (E0 (EString "ASIA")))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_orderdate"))) 
  //             (R0 (E0 (ESym "d_datekey"))))) 
  //       (Q0 (TSymbol "date")) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P2 PAnd \n        (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n        (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n    (P0 \n      (R2 RLike (R0 (E0 (ESym \"c_region\"))) (R0 (E0 (EString \"ASIA\")))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_orderdate\"))) \n            (R0 (E0 (ESym \"d_datekey\"))))) \n      (Q0 (TSymbol \"date\")) \n      (Q0 (TSymbol \"lineorder\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data155.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_nation"))) 
  //               (R0 (E0 (EString "UNITED STATES")))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_nation\"))) \n              (R0 (E0 (EString \"UNITED STATES\")))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass15>(Just<const std::string>("/tmp/fluidb_store/data195.dat"), Just<const std::string>("/tmp/fluidb_store/data205.dat"), "/tmp/fluidb_store/data201.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QGroup 
  //         [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //          (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //          (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //          (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //         [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QGroup \n        [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n         (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n         (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n         (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n        [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]\n    ]))" << std::endl;
  {
    auto operation = mkAggregation<CallableClass23, CallableClass25>(Just<const std::string>("/tmp/fluidb_store/data208.dat"), Just<const std::string>("/tmp/fluidb_store/data195.dat"), "/tmp/fluidb_store/data195.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  std::cout << "ForwardTrigger: (Just \n  (Right [QSort [E0 (ESym \"d_year\"),E1 ENeg (E0 (ESym \"revenue\"))]]))" << std::endl;
  {
    auto operation = mkSort<CallableClass28>(Just<const std::string>("/tmp/fluidb_store/data209.dat"), Just<const std::string>("/tmp/fluidb_store/data208.dat"), "/tmp/fluidb_store/data208.dat");
    operation.run();
    operation.print_output(10);
  }
  report_counters();
  return 0;
}
