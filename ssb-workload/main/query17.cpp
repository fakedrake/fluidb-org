#include <array>

#include <string>

#include <codegen.hh>
class Record28 {
 public:
  Record28(unsigned __sortElem0, fluidb_string<10> __sortElem1) : sortElem0(__sortElem0), sortElem1(__sortElem1)
  {
  }
  Record28() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0 << " | " << arrToString(sortElem1);
    return o.str();
  }
  bool operator <(const Record28& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && otherRec.sortElem1 < sortElem1);
  }
  bool operator ==(const Record28& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && otherRec.sortElem1 == sortElem1);
  }
  bool operator !=(const Record28& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || otherRec.sortElem1 != sortElem1);
  }
  unsigned sortElem0;
  fluidb_string<10> sortElem1;
 private:
};


class Record1 {
 public:
  Record1(unsigned __sym__0___45_8906884911160954364, fluidb_string<18> __sym__0__2799000292371979828, fluidb_string<9> __sym__0__8867920250735627162, fluidb_string<9> __sym__0___45_7576867150402000331, unsigned __sym__0___45_9125225545914939837, unsigned __sym__0__4589167397936411269, fluidb_string<7> __sym__0__8920142377705747532, unsigned __sym__0___45_4196858516486091897, unsigned __sym__0__1195773552714325740, unsigned __sym__0___45_38686532604732124, unsigned __sym__0__1274631840214437554, unsigned __sym__0__8445040522489018709, fluidb_string<15> __sym__0__2331348265799254080, fluidb_string<2> __sym__0___45_1510963300986711992, fluidb_string<2> __sym__0__5289830658136776009, fluidb_string<2> __sym__0__7499328126409916481, fluidb_string<2> __sym__0__7533033195406205003, unsigned __sym__0___45_6428147039213761908, fluidb_string<18> __sym__0__871736690247302132, fluidb_string<40> __sym__0___45_8362046498826819058, fluidb_string<11> __sym__0___45_7133132985918421512, fluidb_string<15> __sym__0___45_3959357838844936686, fluidb_string<13> __sym__0___45_7197031512662271633, fluidb_string<15> __sym__0__8583356070728849524, fluidb_string<21> __sym__0__1967597999057704256, unsigned __sym__0__5132421367677851272, int __sym__0__5071922315287763570, unsigned __sym__0___45_3637991104308692870, unsigned __sym__0__4948888373840408220, unsigned __sym__0___45_7808961130681314221, unsigned __sym__0__1746575405116951454, fluidb_string<21> __sym__0__2153939297276247251, unsigned __sym__0__5199185301403060729, fluidb_string<10> __sym__0__1712959636608595962, unsigned __sym__0___45_1741951889491243926, double __sym__0__227891603776809608, unsigned __sym__0__6207099447983295614, double __sym__0__335880342687986000, unsigned __sym__0__2784917890152007524, unsigned __sym__0___45_5840348331744817409, double __sym__0__3675426241071643741, fluidb_string<13> __sym__0___45_1268803172874807067, unsigned __sym__0__3110451695433832699, fluidb_string<25> __sym__0__5854013247755242004, fluidb_string<40> __sym__0___45_1478737863530599082, fluidb_string<16> __sym__0___45_6827442181954889560, fluidb_string<16> __sym__0__6943297173895896986, fluidb_string<13> __sym__0__5526031557462726759, fluidb_string<15> __sym__0__2016251883409854356) : sym__0___45_8906884911160954364(__sym__0___45_8906884911160954364), sym__0__2799000292371979828(__sym__0__2799000292371979828), sym__0__8867920250735627162(__sym__0__8867920250735627162), sym__0___45_7576867150402000331(__sym__0___45_7576867150402000331), sym__0___45_9125225545914939837(__sym__0___45_9125225545914939837), sym__0__4589167397936411269(__sym__0__4589167397936411269), sym__0__8920142377705747532(__sym__0__8920142377705747532), sym__0___45_4196858516486091897(__sym__0___45_4196858516486091897), sym__0__1195773552714325740(__sym__0__1195773552714325740), sym__0___45_38686532604732124(__sym__0___45_38686532604732124), sym__0__1274631840214437554(__sym__0__1274631840214437554), sym__0__8445040522489018709(__sym__0__8445040522489018709), sym__0__2331348265799254080(__sym__0__2331348265799254080), sym__0___45_1510963300986711992(__sym__0___45_1510963300986711992), sym__0__5289830658136776009(__sym__0__5289830658136776009), sym__0__7499328126409916481(__sym__0__7499328126409916481), sym__0__7533033195406205003(__sym__0__7533033195406205003), sym__0___45_6428147039213761908(__sym__0___45_6428147039213761908), sym__0__871736690247302132(__sym__0__871736690247302132), sym__0___45_8362046498826819058(__sym__0___45_8362046498826819058), sym__0___45_7133132985918421512(__sym__0___45_7133132985918421512), sym__0___45_3959357838844936686(__sym__0___45_3959357838844936686), sym__0___45_7197031512662271633(__sym__0___45_7197031512662271633), sym__0__8583356070728849524(__sym__0__8583356070728849524), sym__0__1967597999057704256(__sym__0__1967597999057704256), sym__0__5132421367677851272(__sym__0__5132421367677851272), sym__0__5071922315287763570(__sym__0__5071922315287763570), sym__0___45_3637991104308692870(__sym__0___45_3637991104308692870), sym__0__4948888373840408220(__sym__0__4948888373840408220), sym__0___45_7808961130681314221(__sym__0___45_7808961130681314221), sym__0__1746575405116951454(__sym__0__1746575405116951454), sym__0__2153939297276247251(__sym__0__2153939297276247251), sym__0__5199185301403060729(__sym__0__5199185301403060729), sym__0__1712959636608595962(__sym__0__1712959636608595962), sym__0___45_1741951889491243926(__sym__0___45_1741951889491243926), sym__0__227891603776809608(__sym__0__227891603776809608), sym__0__6207099447983295614(__sym__0__6207099447983295614), sym__0__335880342687986000(__sym__0__335880342687986000), sym__0__2784917890152007524(__sym__0__2784917890152007524), sym__0___45_5840348331744817409(__sym__0___45_5840348331744817409), sym__0__3675426241071643741(__sym__0__3675426241071643741), sym__0___45_1268803172874807067(__sym__0___45_1268803172874807067), sym__0__3110451695433832699(__sym__0__3110451695433832699), sym__0__5854013247755242004(__sym__0__5854013247755242004), sym__0___45_1478737863530599082(__sym__0___45_1478737863530599082), sym__0___45_6827442181954889560(__sym__0___45_6827442181954889560), sym__0__6943297173895896986(__sym__0__6943297173895896986), sym__0__5526031557462726759(__sym__0__5526031557462726759), sym__0__2016251883409854356(__sym__0__2016251883409854356)
  {
  }
  Record1() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_8906884911160954364 << " | " << arrToString(sym__0__2799000292371979828) << " | " << arrToString(sym__0__8867920250735627162) << " | " << arrToString(sym__0___45_7576867150402000331) << " | " << sym__0___45_9125225545914939837 << " | " << sym__0__4589167397936411269 << " | " << arrToString(sym__0__8920142377705747532) << " | " << sym__0___45_4196858516486091897 << " | " << sym__0__1195773552714325740 << " | " << sym__0___45_38686532604732124 << " | " << sym__0__1274631840214437554 << " | " << sym__0__8445040522489018709 << " | " << arrToString(sym__0__2331348265799254080) << " | " << arrToString(sym__0___45_1510963300986711992) << " | " << arrToString(sym__0__5289830658136776009) << " | " << arrToString(sym__0__7499328126409916481) << " | " << arrToString(sym__0__7533033195406205003) << " | " << sym__0___45_6428147039213761908 << " | " << arrToString(sym__0__871736690247302132) << " | " << arrToString(sym__0___45_8362046498826819058) << " | " << arrToString(sym__0___45_7133132985918421512) << " | " << arrToString(sym__0___45_3959357838844936686) << " | " << arrToString(sym__0___45_7197031512662271633) << " | " << arrToString(sym__0__8583356070728849524) << " | " << arrToString(sym__0__1967597999057704256) << " | " << sym__0__5132421367677851272 << " | " << sym__0__5071922315287763570 << " | " << sym__0___45_3637991104308692870 << " | " << sym__0__4948888373840408220 << " | " << sym__0___45_7808961130681314221 << " | " << sym__0__1746575405116951454 << " | " << arrToString(sym__0__2153939297276247251) << " | " << sym__0__5199185301403060729 << " | " << arrToString(sym__0__1712959636608595962) << " | " << sym__0___45_1741951889491243926 << " | " << sym__0__227891603776809608 << " | " << sym__0__6207099447983295614 << " | " << sym__0__335880342687986000 << " | " << sym__0__2784917890152007524 << " | " << sym__0___45_5840348331744817409 << " | " << sym__0__3675426241071643741 << " | " << arrToString(sym__0___45_1268803172874807067) << " | " << sym__0__3110451695433832699 << " | " << arrToString(sym__0__5854013247755242004) << " | " << arrToString(sym__0___45_1478737863530599082) << " | " << arrToString(sym__0___45_6827442181954889560) << " | " << arrToString(sym__0__6943297173895896986) << " | " << arrToString(sym__0__5526031557462726759) << " | " << arrToString(sym__0__2016251883409854356);
    return o.str();
  }
  bool operator <(const Record1& otherRec) const{
    return (otherRec.sym__0___45_8906884911160954364 < sym__0___45_8906884911160954364 && (otherRec.sym__0__2799000292371979828 < sym__0__2799000292371979828 && (otherRec.sym__0__8867920250735627162 < sym__0__8867920250735627162 && (otherRec.sym__0___45_7576867150402000331 < sym__0___45_7576867150402000331 && (otherRec.sym__0___45_9125225545914939837 < sym__0___45_9125225545914939837 && (otherRec.sym__0__4589167397936411269 < sym__0__4589167397936411269 && (otherRec.sym__0__8920142377705747532 < sym__0__8920142377705747532 && (otherRec.sym__0___45_4196858516486091897 < sym__0___45_4196858516486091897 && (otherRec.sym__0__1195773552714325740 < sym__0__1195773552714325740 && (otherRec.sym__0___45_38686532604732124 < sym__0___45_38686532604732124 && (otherRec.sym__0__1274631840214437554 < sym__0__1274631840214437554 && (otherRec.sym__0__8445040522489018709 < sym__0__8445040522489018709 && (otherRec.sym__0__2331348265799254080 < sym__0__2331348265799254080 && (otherRec.sym__0___45_1510963300986711992 < sym__0___45_1510963300986711992 && (otherRec.sym__0__5289830658136776009 < sym__0__5289830658136776009 && (otherRec.sym__0__7499328126409916481 < sym__0__7499328126409916481 && (otherRec.sym__0__7533033195406205003 < sym__0__7533033195406205003 && (otherRec.sym__0___45_6428147039213761908 < sym__0___45_6428147039213761908 && (otherRec.sym__0__871736690247302132 < sym__0__871736690247302132 && (otherRec.sym__0___45_8362046498826819058 < sym__0___45_8362046498826819058 && (otherRec.sym__0___45_7133132985918421512 < sym__0___45_7133132985918421512 && (otherRec.sym__0___45_3959357838844936686 < sym__0___45_3959357838844936686 && (otherRec.sym__0___45_7197031512662271633 < sym__0___45_7197031512662271633 && (otherRec.sym__0__8583356070728849524 < sym__0__8583356070728849524 && (otherRec.sym__0__1967597999057704256 < sym__0__1967597999057704256 && (otherRec.sym__0__5132421367677851272 < sym__0__5132421367677851272 && (otherRec.sym__0__5071922315287763570 < sym__0__5071922315287763570 && (otherRec.sym__0___45_3637991104308692870 < sym__0___45_3637991104308692870 && (otherRec.sym__0__4948888373840408220 < sym__0__4948888373840408220 && (otherRec.sym__0___45_7808961130681314221 < sym__0___45_7808961130681314221 && (otherRec.sym__0__1746575405116951454 < sym__0__1746575405116951454 && (otherRec.sym__0__2153939297276247251 < sym__0__2153939297276247251 && (otherRec.sym__0__5199185301403060729 < sym__0__5199185301403060729 && (otherRec.sym__0__1712959636608595962 < sym__0__1712959636608595962 && (otherRec.sym__0___45_1741951889491243926 < sym__0___45_1741951889491243926 && (otherRec.sym__0__227891603776809608 < sym__0__227891603776809608 && (otherRec.sym__0__6207099447983295614 < sym__0__6207099447983295614 && (otherRec.sym__0__335880342687986000 < sym__0__335880342687986000 && (otherRec.sym__0__2784917890152007524 < sym__0__2784917890152007524 && (otherRec.sym__0___45_5840348331744817409 < sym__0___45_5840348331744817409 && (otherRec.sym__0__3675426241071643741 < sym__0__3675426241071643741 && (otherRec.sym__0___45_1268803172874807067 < sym__0___45_1268803172874807067 && (otherRec.sym__0__3110451695433832699 < sym__0__3110451695433832699 && (otherRec.sym__0__5854013247755242004 < sym__0__5854013247755242004 && (otherRec.sym__0___45_1478737863530599082 < sym__0___45_1478737863530599082 && (otherRec.sym__0___45_6827442181954889560 < sym__0___45_6827442181954889560 && (otherRec.sym__0__6943297173895896986 < sym__0__6943297173895896986 && (otherRec.sym__0__5526031557462726759 < sym__0__5526031557462726759 && otherRec.sym__0__2016251883409854356 < sym__0__2016251883409854356))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record1& otherRec) const{
    return (otherRec.sym__0___45_8906884911160954364 == sym__0___45_8906884911160954364 && (otherRec.sym__0__2799000292371979828 == sym__0__2799000292371979828 && (otherRec.sym__0__8867920250735627162 == sym__0__8867920250735627162 && (otherRec.sym__0___45_7576867150402000331 == sym__0___45_7576867150402000331 && (otherRec.sym__0___45_9125225545914939837 == sym__0___45_9125225545914939837 && (otherRec.sym__0__4589167397936411269 == sym__0__4589167397936411269 && (otherRec.sym__0__8920142377705747532 == sym__0__8920142377705747532 && (otherRec.sym__0___45_4196858516486091897 == sym__0___45_4196858516486091897 && (otherRec.sym__0__1195773552714325740 == sym__0__1195773552714325740 && (otherRec.sym__0___45_38686532604732124 == sym__0___45_38686532604732124 && (otherRec.sym__0__1274631840214437554 == sym__0__1274631840214437554 && (otherRec.sym__0__8445040522489018709 == sym__0__8445040522489018709 && (otherRec.sym__0__2331348265799254080 == sym__0__2331348265799254080 && (otherRec.sym__0___45_1510963300986711992 == sym__0___45_1510963300986711992 && (otherRec.sym__0__5289830658136776009 == sym__0__5289830658136776009 && (otherRec.sym__0__7499328126409916481 == sym__0__7499328126409916481 && (otherRec.sym__0__7533033195406205003 == sym__0__7533033195406205003 && (otherRec.sym__0___45_6428147039213761908 == sym__0___45_6428147039213761908 && (otherRec.sym__0__871736690247302132 == sym__0__871736690247302132 && (otherRec.sym__0___45_8362046498826819058 == sym__0___45_8362046498826819058 && (otherRec.sym__0___45_7133132985918421512 == sym__0___45_7133132985918421512 && (otherRec.sym__0___45_3959357838844936686 == sym__0___45_3959357838844936686 && (otherRec.sym__0___45_7197031512662271633 == sym__0___45_7197031512662271633 && (otherRec.sym__0__8583356070728849524 == sym__0__8583356070728849524 && (otherRec.sym__0__1967597999057704256 == sym__0__1967597999057704256 && (otherRec.sym__0__5132421367677851272 == sym__0__5132421367677851272 && (otherRec.sym__0__5071922315287763570 == sym__0__5071922315287763570 && (otherRec.sym__0___45_3637991104308692870 == sym__0___45_3637991104308692870 && (otherRec.sym__0__4948888373840408220 == sym__0__4948888373840408220 && (otherRec.sym__0___45_7808961130681314221 == sym__0___45_7808961130681314221 && (otherRec.sym__0__1746575405116951454 == sym__0__1746575405116951454 && (otherRec.sym__0__2153939297276247251 == sym__0__2153939297276247251 && (otherRec.sym__0__5199185301403060729 == sym__0__5199185301403060729 && (otherRec.sym__0__1712959636608595962 == sym__0__1712959636608595962 && (otherRec.sym__0___45_1741951889491243926 == sym__0___45_1741951889491243926 && (otherRec.sym__0__227891603776809608 == sym__0__227891603776809608 && (otherRec.sym__0__6207099447983295614 == sym__0__6207099447983295614 && (otherRec.sym__0__335880342687986000 == sym__0__335880342687986000 && (otherRec.sym__0__2784917890152007524 == sym__0__2784917890152007524 && (otherRec.sym__0___45_5840348331744817409 == sym__0___45_5840348331744817409 && (otherRec.sym__0__3675426241071643741 == sym__0__3675426241071643741 && (otherRec.sym__0___45_1268803172874807067 == sym__0___45_1268803172874807067 && (otherRec.sym__0__3110451695433832699 == sym__0__3110451695433832699 && (otherRec.sym__0__5854013247755242004 == sym__0__5854013247755242004 && (otherRec.sym__0___45_1478737863530599082 == sym__0___45_1478737863530599082 && (otherRec.sym__0___45_6827442181954889560 == sym__0___45_6827442181954889560 && (otherRec.sym__0__6943297173895896986 == sym__0__6943297173895896986 && (otherRec.sym__0__5526031557462726759 == sym__0__5526031557462726759 && otherRec.sym__0__2016251883409854356 == sym__0__2016251883409854356))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record1& otherRec) const{
    return (otherRec.sym__0___45_8906884911160954364 != sym__0___45_8906884911160954364 || (otherRec.sym__0__2799000292371979828 != sym__0__2799000292371979828 || (otherRec.sym__0__8867920250735627162 != sym__0__8867920250735627162 || (otherRec.sym__0___45_7576867150402000331 != sym__0___45_7576867150402000331 || (otherRec.sym__0___45_9125225545914939837 != sym__0___45_9125225545914939837 || (otherRec.sym__0__4589167397936411269 != sym__0__4589167397936411269 || (otherRec.sym__0__8920142377705747532 != sym__0__8920142377705747532 || (otherRec.sym__0___45_4196858516486091897 != sym__0___45_4196858516486091897 || (otherRec.sym__0__1195773552714325740 != sym__0__1195773552714325740 || (otherRec.sym__0___45_38686532604732124 != sym__0___45_38686532604732124 || (otherRec.sym__0__1274631840214437554 != sym__0__1274631840214437554 || (otherRec.sym__0__8445040522489018709 != sym__0__8445040522489018709 || (otherRec.sym__0__2331348265799254080 != sym__0__2331348265799254080 || (otherRec.sym__0___45_1510963300986711992 != sym__0___45_1510963300986711992 || (otherRec.sym__0__5289830658136776009 != sym__0__5289830658136776009 || (otherRec.sym__0__7499328126409916481 != sym__0__7499328126409916481 || (otherRec.sym__0__7533033195406205003 != sym__0__7533033195406205003 || (otherRec.sym__0___45_6428147039213761908 != sym__0___45_6428147039213761908 || (otherRec.sym__0__871736690247302132 != sym__0__871736690247302132 || (otherRec.sym__0___45_8362046498826819058 != sym__0___45_8362046498826819058 || (otherRec.sym__0___45_7133132985918421512 != sym__0___45_7133132985918421512 || (otherRec.sym__0___45_3959357838844936686 != sym__0___45_3959357838844936686 || (otherRec.sym__0___45_7197031512662271633 != sym__0___45_7197031512662271633 || (otherRec.sym__0__8583356070728849524 != sym__0__8583356070728849524 || (otherRec.sym__0__1967597999057704256 != sym__0__1967597999057704256 || (otherRec.sym__0__5132421367677851272 != sym__0__5132421367677851272 || (otherRec.sym__0__5071922315287763570 != sym__0__5071922315287763570 || (otherRec.sym__0___45_3637991104308692870 != sym__0___45_3637991104308692870 || (otherRec.sym__0__4948888373840408220 != sym__0__4948888373840408220 || (otherRec.sym__0___45_7808961130681314221 != sym__0___45_7808961130681314221 || (otherRec.sym__0__1746575405116951454 != sym__0__1746575405116951454 || (otherRec.sym__0__2153939297276247251 != sym__0__2153939297276247251 || (otherRec.sym__0__5199185301403060729 != sym__0__5199185301403060729 || (otherRec.sym__0__1712959636608595962 != sym__0__1712959636608595962 || (otherRec.sym__0___45_1741951889491243926 != sym__0___45_1741951889491243926 || (otherRec.sym__0__227891603776809608 != sym__0__227891603776809608 || (otherRec.sym__0__6207099447983295614 != sym__0__6207099447983295614 || (otherRec.sym__0__335880342687986000 != sym__0__335880342687986000 || (otherRec.sym__0__2784917890152007524 != sym__0__2784917890152007524 || (otherRec.sym__0___45_5840348331744817409 != sym__0___45_5840348331744817409 || (otherRec.sym__0__3675426241071643741 != sym__0__3675426241071643741 || (otherRec.sym__0___45_1268803172874807067 != sym__0___45_1268803172874807067 || (otherRec.sym__0__3110451695433832699 != sym__0__3110451695433832699 || (otherRec.sym__0__5854013247755242004 != sym__0__5854013247755242004 || (otherRec.sym__0___45_1478737863530599082 != sym__0___45_1478737863530599082 || (otherRec.sym__0___45_6827442181954889560 != sym__0___45_6827442181954889560 || (otherRec.sym__0__6943297173895896986 != sym__0__6943297173895896986 || (otherRec.sym__0__5526031557462726759 != sym__0__5526031557462726759 || otherRec.sym__0__2016251883409854356 != sym__0__2016251883409854356))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_8906884911160954364;
  fluidb_string<18> sym__0__2799000292371979828;
  fluidb_string<9> sym__0__8867920250735627162;
  fluidb_string<9> sym__0___45_7576867150402000331;
  unsigned sym__0___45_9125225545914939837;
  unsigned sym__0__4589167397936411269;
  fluidb_string<7> sym__0__8920142377705747532;
  unsigned sym__0___45_4196858516486091897;
  unsigned sym__0__1195773552714325740;
  unsigned sym__0___45_38686532604732124;
  unsigned sym__0__1274631840214437554;
  unsigned sym__0__8445040522489018709;
  fluidb_string<15> sym__0__2331348265799254080;
  fluidb_string<2> sym__0___45_1510963300986711992;
  fluidb_string<2> sym__0__5289830658136776009;
  fluidb_string<2> sym__0__7499328126409916481;
  fluidb_string<2> sym__0__7533033195406205003;
  unsigned sym__0___45_6428147039213761908;
  fluidb_string<18> sym__0__871736690247302132;
  fluidb_string<40> sym__0___45_8362046498826819058;
  fluidb_string<11> sym__0___45_7133132985918421512;
  fluidb_string<15> sym__0___45_3959357838844936686;
  fluidb_string<13> sym__0___45_7197031512662271633;
  fluidb_string<15> sym__0__8583356070728849524;
  fluidb_string<21> sym__0__1967597999057704256;
  unsigned sym__0__5132421367677851272;
  int sym__0__5071922315287763570;
  unsigned sym__0___45_3637991104308692870;
  unsigned sym__0__4948888373840408220;
  unsigned sym__0___45_7808961130681314221;
  unsigned sym__0__1746575405116951454;
  fluidb_string<21> sym__0__2153939297276247251;
  unsigned sym__0__5199185301403060729;
  fluidb_string<10> sym__0__1712959636608595962;
  unsigned sym__0___45_1741951889491243926;
  double sym__0__227891603776809608;
  unsigned sym__0__6207099447983295614;
  double sym__0__335880342687986000;
  unsigned sym__0__2784917890152007524;
  unsigned sym__0___45_5840348331744817409;
  double sym__0__3675426241071643741;
  fluidb_string<13> sym__0___45_1268803172874807067;
  unsigned sym__0__3110451695433832699;
  fluidb_string<25> sym__0__5854013247755242004;
  fluidb_string<40> sym__0___45_1478737863530599082;
  fluidb_string<16> sym__0___45_6827442181954889560;
  fluidb_string<16> sym__0__6943297173895896986;
  fluidb_string<13> sym__0__5526031557462726759;
  fluidb_string<15> sym__0__2016251883409854356;
 private:
};


class Record2 {
 public:
  Record2(unsigned __sym__0___45_2544647080140891779, fluidb_string<18> __sym__0___45_4581931629044260499, fluidb_string<9> __sym__0__3511844764913402723, fluidb_string<9> __sym__0__2581750769096843740, unsigned __sym__0___45_6031048599860414622, unsigned __sym__0__8084343433543173228, fluidb_string<7> __sym__0___45_3664881058840515771, unsigned __sym__0___45_1924199962958349658, unsigned __sym__0__7769469128992998949, unsigned __sym__0__7818554603565865821, unsigned __sym__0__4360634980582143419, unsigned __sym__0___45_7492593539880285892, fluidb_string<15> __sym__0__1706094538935295417, fluidb_string<2> __sym__0__6114638120282452033, fluidb_string<2> __sym__0___45_78261027814563536, fluidb_string<2> __sym__0__2648420561950371368, fluidb_string<2> __sym__0__3807806894063626346, unsigned __sym__0__3010211381236373125, fluidb_string<18> __sym__0__3300613616795216173, fluidb_string<40> __sym__0___45_3130123223234281513, fluidb_string<11> __sym__0__8189415442579395633, fluidb_string<15> __sym__0__3248231192614790363, fluidb_string<13> __sym__0__1734593865430170446, fluidb_string<15> __sym__0___45_8167422549222682195, fluidb_string<21> __sym__0__2936268515493900473, unsigned __sym__0__2661490882974477953, int __sym__0___45_6833151998909895557, unsigned __sym__0___45_6379152824683587325, unsigned __sym__0__3389381886574775957, unsigned __sym__0___45_3006394417042584462, unsigned __sym__0__5708853396861436519, fluidb_string<21> __sym__0__2510302245253987058, unsigned __sym__0___45_8268616720440236384, fluidb_string<10> __sym__0___45_2145747097567105917, unsigned __sym__0___45_6747202196090936717, double __sym__0___45_980129616638612863, unsigned __sym__0__7935787287177824775, double __sym__0___45_1765426731373793463, unsigned __sym__0__2312911666975909277, unsigned __sym__0__8713898721580785886, double __sym__0__5274362417922015940, fluidb_string<13> __sym__0___45_5950462958936866676, unsigned __sym__0__5599391359954735578, fluidb_string<25> __sym__0__4014184007857207821, fluidb_string<40> __sym__0___45_7146441527183610849, fluidb_string<16> __sym__0___45_8891100078062559775, fluidb_string<16> __sym__0___45_5365202057839317149, fluidb_string<13> __sym__0__5177313860806756678, fluidb_string<15> __sym__0___45_6139660049171508851, unsigned __sym__0__5600261570499839795, fluidb_string<55> __sym__0__7033726162709406531, fluidb_string<25> __sym__0___45_2028921051824210768, fluidb_string<7> __sym__0__1510822012344354762, fluidb_string<10> __sym__0___45_2462553484168592128, fluidb_string<11> __sym__0__6826615390864986324, fluidb_string<25> __sym__0__1653057618405204038, unsigned __sym__0__1042393484014954953, fluidb_string<10> __sym__0___45_4797345940361177504) : sym__0___45_2544647080140891779(__sym__0___45_2544647080140891779), sym__0___45_4581931629044260499(__sym__0___45_4581931629044260499), sym__0__3511844764913402723(__sym__0__3511844764913402723), sym__0__2581750769096843740(__sym__0__2581750769096843740), sym__0___45_6031048599860414622(__sym__0___45_6031048599860414622), sym__0__8084343433543173228(__sym__0__8084343433543173228), sym__0___45_3664881058840515771(__sym__0___45_3664881058840515771), sym__0___45_1924199962958349658(__sym__0___45_1924199962958349658), sym__0__7769469128992998949(__sym__0__7769469128992998949), sym__0__7818554603565865821(__sym__0__7818554603565865821), sym__0__4360634980582143419(__sym__0__4360634980582143419), sym__0___45_7492593539880285892(__sym__0___45_7492593539880285892), sym__0__1706094538935295417(__sym__0__1706094538935295417), sym__0__6114638120282452033(__sym__0__6114638120282452033), sym__0___45_78261027814563536(__sym__0___45_78261027814563536), sym__0__2648420561950371368(__sym__0__2648420561950371368), sym__0__3807806894063626346(__sym__0__3807806894063626346), sym__0__3010211381236373125(__sym__0__3010211381236373125), sym__0__3300613616795216173(__sym__0__3300613616795216173), sym__0___45_3130123223234281513(__sym__0___45_3130123223234281513), sym__0__8189415442579395633(__sym__0__8189415442579395633), sym__0__3248231192614790363(__sym__0__3248231192614790363), sym__0__1734593865430170446(__sym__0__1734593865430170446), sym__0___45_8167422549222682195(__sym__0___45_8167422549222682195), sym__0__2936268515493900473(__sym__0__2936268515493900473), sym__0__2661490882974477953(__sym__0__2661490882974477953), sym__0___45_6833151998909895557(__sym__0___45_6833151998909895557), sym__0___45_6379152824683587325(__sym__0___45_6379152824683587325), sym__0__3389381886574775957(__sym__0__3389381886574775957), sym__0___45_3006394417042584462(__sym__0___45_3006394417042584462), sym__0__5708853396861436519(__sym__0__5708853396861436519), sym__0__2510302245253987058(__sym__0__2510302245253987058), sym__0___45_8268616720440236384(__sym__0___45_8268616720440236384), sym__0___45_2145747097567105917(__sym__0___45_2145747097567105917), sym__0___45_6747202196090936717(__sym__0___45_6747202196090936717), sym__0___45_980129616638612863(__sym__0___45_980129616638612863), sym__0__7935787287177824775(__sym__0__7935787287177824775), sym__0___45_1765426731373793463(__sym__0___45_1765426731373793463), sym__0__2312911666975909277(__sym__0__2312911666975909277), sym__0__8713898721580785886(__sym__0__8713898721580785886), sym__0__5274362417922015940(__sym__0__5274362417922015940), sym__0___45_5950462958936866676(__sym__0___45_5950462958936866676), sym__0__5599391359954735578(__sym__0__5599391359954735578), sym__0__4014184007857207821(__sym__0__4014184007857207821), sym__0___45_7146441527183610849(__sym__0___45_7146441527183610849), sym__0___45_8891100078062559775(__sym__0___45_8891100078062559775), sym__0___45_5365202057839317149(__sym__0___45_5365202057839317149), sym__0__5177313860806756678(__sym__0__5177313860806756678), sym__0___45_6139660049171508851(__sym__0___45_6139660049171508851), sym__0__5600261570499839795(__sym__0__5600261570499839795), sym__0__7033726162709406531(__sym__0__7033726162709406531), sym__0___45_2028921051824210768(__sym__0___45_2028921051824210768), sym__0__1510822012344354762(__sym__0__1510822012344354762), sym__0___45_2462553484168592128(__sym__0___45_2462553484168592128), sym__0__6826615390864986324(__sym__0__6826615390864986324), sym__0__1653057618405204038(__sym__0__1653057618405204038), sym__0__1042393484014954953(__sym__0__1042393484014954953), sym__0___45_4797345940361177504(__sym__0___45_4797345940361177504)
  {
  }
  Record2() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_2544647080140891779 << " | " << arrToString(sym__0___45_4581931629044260499) << " | " << arrToString(sym__0__3511844764913402723) << " | " << arrToString(sym__0__2581750769096843740) << " | " << sym__0___45_6031048599860414622 << " | " << sym__0__8084343433543173228 << " | " << arrToString(sym__0___45_3664881058840515771) << " | " << sym__0___45_1924199962958349658 << " | " << sym__0__7769469128992998949 << " | " << sym__0__7818554603565865821 << " | " << sym__0__4360634980582143419 << " | " << sym__0___45_7492593539880285892 << " | " << arrToString(sym__0__1706094538935295417) << " | " << arrToString(sym__0__6114638120282452033) << " | " << arrToString(sym__0___45_78261027814563536) << " | " << arrToString(sym__0__2648420561950371368) << " | " << arrToString(sym__0__3807806894063626346) << " | " << sym__0__3010211381236373125 << " | " << arrToString(sym__0__3300613616795216173) << " | " << arrToString(sym__0___45_3130123223234281513) << " | " << arrToString(sym__0__8189415442579395633) << " | " << arrToString(sym__0__3248231192614790363) << " | " << arrToString(sym__0__1734593865430170446) << " | " << arrToString(sym__0___45_8167422549222682195) << " | " << arrToString(sym__0__2936268515493900473) << " | " << sym__0__2661490882974477953 << " | " << sym__0___45_6833151998909895557 << " | " << sym__0___45_6379152824683587325 << " | " << sym__0__3389381886574775957 << " | " << sym__0___45_3006394417042584462 << " | " << sym__0__5708853396861436519 << " | " << arrToString(sym__0__2510302245253987058) << " | " << sym__0___45_8268616720440236384 << " | " << arrToString(sym__0___45_2145747097567105917) << " | " << sym__0___45_6747202196090936717 << " | " << sym__0___45_980129616638612863 << " | " << sym__0__7935787287177824775 << " | " << sym__0___45_1765426731373793463 << " | " << sym__0__2312911666975909277 << " | " << sym__0__8713898721580785886 << " | " << sym__0__5274362417922015940 << " | " << arrToString(sym__0___45_5950462958936866676) << " | " << sym__0__5599391359954735578 << " | " << arrToString(sym__0__4014184007857207821) << " | " << arrToString(sym__0___45_7146441527183610849) << " | " << arrToString(sym__0___45_8891100078062559775) << " | " << arrToString(sym__0___45_5365202057839317149) << " | " << arrToString(sym__0__5177313860806756678) << " | " << arrToString(sym__0___45_6139660049171508851) << " | " << sym__0__5600261570499839795 << " | " << arrToString(sym__0__7033726162709406531) << " | " << arrToString(sym__0___45_2028921051824210768) << " | " << arrToString(sym__0__1510822012344354762) << " | " << arrToString(sym__0___45_2462553484168592128) << " | " << arrToString(sym__0__6826615390864986324) << " | " << arrToString(sym__0__1653057618405204038) << " | " << sym__0__1042393484014954953 << " | " << arrToString(sym__0___45_4797345940361177504);
    return o.str();
  }
  bool operator <(const Record2& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 < sym__0___45_2544647080140891779 && (otherRec.sym__0___45_4581931629044260499 < sym__0___45_4581931629044260499 && (otherRec.sym__0__3511844764913402723 < sym__0__3511844764913402723 && (otherRec.sym__0__2581750769096843740 < sym__0__2581750769096843740 && (otherRec.sym__0___45_6031048599860414622 < sym__0___45_6031048599860414622 && (otherRec.sym__0__8084343433543173228 < sym__0__8084343433543173228 && (otherRec.sym__0___45_3664881058840515771 < sym__0___45_3664881058840515771 && (otherRec.sym__0___45_1924199962958349658 < sym__0___45_1924199962958349658 && (otherRec.sym__0__7769469128992998949 < sym__0__7769469128992998949 && (otherRec.sym__0__7818554603565865821 < sym__0__7818554603565865821 && (otherRec.sym__0__4360634980582143419 < sym__0__4360634980582143419 && (otherRec.sym__0___45_7492593539880285892 < sym__0___45_7492593539880285892 && (otherRec.sym__0__1706094538935295417 < sym__0__1706094538935295417 && (otherRec.sym__0__6114638120282452033 < sym__0__6114638120282452033 && (otherRec.sym__0___45_78261027814563536 < sym__0___45_78261027814563536 && (otherRec.sym__0__2648420561950371368 < sym__0__2648420561950371368 && (otherRec.sym__0__3807806894063626346 < sym__0__3807806894063626346 && (otherRec.sym__0__3010211381236373125 < sym__0__3010211381236373125 && (otherRec.sym__0__3300613616795216173 < sym__0__3300613616795216173 && (otherRec.sym__0___45_3130123223234281513 < sym__0___45_3130123223234281513 && (otherRec.sym__0__8189415442579395633 < sym__0__8189415442579395633 && (otherRec.sym__0__3248231192614790363 < sym__0__3248231192614790363 && (otherRec.sym__0__1734593865430170446 < sym__0__1734593865430170446 && (otherRec.sym__0___45_8167422549222682195 < sym__0___45_8167422549222682195 && (otherRec.sym__0__2936268515493900473 < sym__0__2936268515493900473 && (otherRec.sym__0__2661490882974477953 < sym__0__2661490882974477953 && (otherRec.sym__0___45_6833151998909895557 < sym__0___45_6833151998909895557 && (otherRec.sym__0___45_6379152824683587325 < sym__0___45_6379152824683587325 && (otherRec.sym__0__3389381886574775957 < sym__0__3389381886574775957 && (otherRec.sym__0___45_3006394417042584462 < sym__0___45_3006394417042584462 && (otherRec.sym__0__5708853396861436519 < sym__0__5708853396861436519 && (otherRec.sym__0__2510302245253987058 < sym__0__2510302245253987058 && (otherRec.sym__0___45_8268616720440236384 < sym__0___45_8268616720440236384 && (otherRec.sym__0___45_2145747097567105917 < sym__0___45_2145747097567105917 && (otherRec.sym__0___45_6747202196090936717 < sym__0___45_6747202196090936717 && (otherRec.sym__0___45_980129616638612863 < sym__0___45_980129616638612863 && (otherRec.sym__0__7935787287177824775 < sym__0__7935787287177824775 && (otherRec.sym__0___45_1765426731373793463 < sym__0___45_1765426731373793463 && (otherRec.sym__0__2312911666975909277 < sym__0__2312911666975909277 && (otherRec.sym__0__8713898721580785886 < sym__0__8713898721580785886 && (otherRec.sym__0__5274362417922015940 < sym__0__5274362417922015940 && (otherRec.sym__0___45_5950462958936866676 < sym__0___45_5950462958936866676 && (otherRec.sym__0__5599391359954735578 < sym__0__5599391359954735578 && (otherRec.sym__0__4014184007857207821 < sym__0__4014184007857207821 && (otherRec.sym__0___45_7146441527183610849 < sym__0___45_7146441527183610849 && (otherRec.sym__0___45_8891100078062559775 < sym__0___45_8891100078062559775 && (otherRec.sym__0___45_5365202057839317149 < sym__0___45_5365202057839317149 && (otherRec.sym__0__5177313860806756678 < sym__0__5177313860806756678 && (otherRec.sym__0___45_6139660049171508851 < sym__0___45_6139660049171508851 && (otherRec.sym__0__5600261570499839795 < sym__0__5600261570499839795 && (otherRec.sym__0__7033726162709406531 < sym__0__7033726162709406531 && (otherRec.sym__0___45_2028921051824210768 < sym__0___45_2028921051824210768 && (otherRec.sym__0__1510822012344354762 < sym__0__1510822012344354762 && (otherRec.sym__0___45_2462553484168592128 < sym__0___45_2462553484168592128 && (otherRec.sym__0__6826615390864986324 < sym__0__6826615390864986324 && (otherRec.sym__0__1653057618405204038 < sym__0__1653057618405204038 && (otherRec.sym__0__1042393484014954953 < sym__0__1042393484014954953 && otherRec.sym__0___45_4797345940361177504 < sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record2& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 == sym__0___45_2544647080140891779 && (otherRec.sym__0___45_4581931629044260499 == sym__0___45_4581931629044260499 && (otherRec.sym__0__3511844764913402723 == sym__0__3511844764913402723 && (otherRec.sym__0__2581750769096843740 == sym__0__2581750769096843740 && (otherRec.sym__0___45_6031048599860414622 == sym__0___45_6031048599860414622 && (otherRec.sym__0__8084343433543173228 == sym__0__8084343433543173228 && (otherRec.sym__0___45_3664881058840515771 == sym__0___45_3664881058840515771 && (otherRec.sym__0___45_1924199962958349658 == sym__0___45_1924199962958349658 && (otherRec.sym__0__7769469128992998949 == sym__0__7769469128992998949 && (otherRec.sym__0__7818554603565865821 == sym__0__7818554603565865821 && (otherRec.sym__0__4360634980582143419 == sym__0__4360634980582143419 && (otherRec.sym__0___45_7492593539880285892 == sym__0___45_7492593539880285892 && (otherRec.sym__0__1706094538935295417 == sym__0__1706094538935295417 && (otherRec.sym__0__6114638120282452033 == sym__0__6114638120282452033 && (otherRec.sym__0___45_78261027814563536 == sym__0___45_78261027814563536 && (otherRec.sym__0__2648420561950371368 == sym__0__2648420561950371368 && (otherRec.sym__0__3807806894063626346 == sym__0__3807806894063626346 && (otherRec.sym__0__3010211381236373125 == sym__0__3010211381236373125 && (otherRec.sym__0__3300613616795216173 == sym__0__3300613616795216173 && (otherRec.sym__0___45_3130123223234281513 == sym__0___45_3130123223234281513 && (otherRec.sym__0__8189415442579395633 == sym__0__8189415442579395633 && (otherRec.sym__0__3248231192614790363 == sym__0__3248231192614790363 && (otherRec.sym__0__1734593865430170446 == sym__0__1734593865430170446 && (otherRec.sym__0___45_8167422549222682195 == sym__0___45_8167422549222682195 && (otherRec.sym__0__2936268515493900473 == sym__0__2936268515493900473 && (otherRec.sym__0__2661490882974477953 == sym__0__2661490882974477953 && (otherRec.sym__0___45_6833151998909895557 == sym__0___45_6833151998909895557 && (otherRec.sym__0___45_6379152824683587325 == sym__0___45_6379152824683587325 && (otherRec.sym__0__3389381886574775957 == sym__0__3389381886574775957 && (otherRec.sym__0___45_3006394417042584462 == sym__0___45_3006394417042584462 && (otherRec.sym__0__5708853396861436519 == sym__0__5708853396861436519 && (otherRec.sym__0__2510302245253987058 == sym__0__2510302245253987058 && (otherRec.sym__0___45_8268616720440236384 == sym__0___45_8268616720440236384 && (otherRec.sym__0___45_2145747097567105917 == sym__0___45_2145747097567105917 && (otherRec.sym__0___45_6747202196090936717 == sym__0___45_6747202196090936717 && (otherRec.sym__0___45_980129616638612863 == sym__0___45_980129616638612863 && (otherRec.sym__0__7935787287177824775 == sym__0__7935787287177824775 && (otherRec.sym__0___45_1765426731373793463 == sym__0___45_1765426731373793463 && (otherRec.sym__0__2312911666975909277 == sym__0__2312911666975909277 && (otherRec.sym__0__8713898721580785886 == sym__0__8713898721580785886 && (otherRec.sym__0__5274362417922015940 == sym__0__5274362417922015940 && (otherRec.sym__0___45_5950462958936866676 == sym__0___45_5950462958936866676 && (otherRec.sym__0__5599391359954735578 == sym__0__5599391359954735578 && (otherRec.sym__0__4014184007857207821 == sym__0__4014184007857207821 && (otherRec.sym__0___45_7146441527183610849 == sym__0___45_7146441527183610849 && (otherRec.sym__0___45_8891100078062559775 == sym__0___45_8891100078062559775 && (otherRec.sym__0___45_5365202057839317149 == sym__0___45_5365202057839317149 && (otherRec.sym__0__5177313860806756678 == sym__0__5177313860806756678 && (otherRec.sym__0___45_6139660049171508851 == sym__0___45_6139660049171508851 && (otherRec.sym__0__5600261570499839795 == sym__0__5600261570499839795 && (otherRec.sym__0__7033726162709406531 == sym__0__7033726162709406531 && (otherRec.sym__0___45_2028921051824210768 == sym__0___45_2028921051824210768 && (otherRec.sym__0__1510822012344354762 == sym__0__1510822012344354762 && (otherRec.sym__0___45_2462553484168592128 == sym__0___45_2462553484168592128 && (otherRec.sym__0__6826615390864986324 == sym__0__6826615390864986324 && (otherRec.sym__0__1653057618405204038 == sym__0__1653057618405204038 && (otherRec.sym__0__1042393484014954953 == sym__0__1042393484014954953 && otherRec.sym__0___45_4797345940361177504 == sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record2& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 != sym__0___45_2544647080140891779 || (otherRec.sym__0___45_4581931629044260499 != sym__0___45_4581931629044260499 || (otherRec.sym__0__3511844764913402723 != sym__0__3511844764913402723 || (otherRec.sym__0__2581750769096843740 != sym__0__2581750769096843740 || (otherRec.sym__0___45_6031048599860414622 != sym__0___45_6031048599860414622 || (otherRec.sym__0__8084343433543173228 != sym__0__8084343433543173228 || (otherRec.sym__0___45_3664881058840515771 != sym__0___45_3664881058840515771 || (otherRec.sym__0___45_1924199962958349658 != sym__0___45_1924199962958349658 || (otherRec.sym__0__7769469128992998949 != sym__0__7769469128992998949 || (otherRec.sym__0__7818554603565865821 != sym__0__7818554603565865821 || (otherRec.sym__0__4360634980582143419 != sym__0__4360634980582143419 || (otherRec.sym__0___45_7492593539880285892 != sym__0___45_7492593539880285892 || (otherRec.sym__0__1706094538935295417 != sym__0__1706094538935295417 || (otherRec.sym__0__6114638120282452033 != sym__0__6114638120282452033 || (otherRec.sym__0___45_78261027814563536 != sym__0___45_78261027814563536 || (otherRec.sym__0__2648420561950371368 != sym__0__2648420561950371368 || (otherRec.sym__0__3807806894063626346 != sym__0__3807806894063626346 || (otherRec.sym__0__3010211381236373125 != sym__0__3010211381236373125 || (otherRec.sym__0__3300613616795216173 != sym__0__3300613616795216173 || (otherRec.sym__0___45_3130123223234281513 != sym__0___45_3130123223234281513 || (otherRec.sym__0__8189415442579395633 != sym__0__8189415442579395633 || (otherRec.sym__0__3248231192614790363 != sym__0__3248231192614790363 || (otherRec.sym__0__1734593865430170446 != sym__0__1734593865430170446 || (otherRec.sym__0___45_8167422549222682195 != sym__0___45_8167422549222682195 || (otherRec.sym__0__2936268515493900473 != sym__0__2936268515493900473 || (otherRec.sym__0__2661490882974477953 != sym__0__2661490882974477953 || (otherRec.sym__0___45_6833151998909895557 != sym__0___45_6833151998909895557 || (otherRec.sym__0___45_6379152824683587325 != sym__0___45_6379152824683587325 || (otherRec.sym__0__3389381886574775957 != sym__0__3389381886574775957 || (otherRec.sym__0___45_3006394417042584462 != sym__0___45_3006394417042584462 || (otherRec.sym__0__5708853396861436519 != sym__0__5708853396861436519 || (otherRec.sym__0__2510302245253987058 != sym__0__2510302245253987058 || (otherRec.sym__0___45_8268616720440236384 != sym__0___45_8268616720440236384 || (otherRec.sym__0___45_2145747097567105917 != sym__0___45_2145747097567105917 || (otherRec.sym__0___45_6747202196090936717 != sym__0___45_6747202196090936717 || (otherRec.sym__0___45_980129616638612863 != sym__0___45_980129616638612863 || (otherRec.sym__0__7935787287177824775 != sym__0__7935787287177824775 || (otherRec.sym__0___45_1765426731373793463 != sym__0___45_1765426731373793463 || (otherRec.sym__0__2312911666975909277 != sym__0__2312911666975909277 || (otherRec.sym__0__8713898721580785886 != sym__0__8713898721580785886 || (otherRec.sym__0__5274362417922015940 != sym__0__5274362417922015940 || (otherRec.sym__0___45_5950462958936866676 != sym__0___45_5950462958936866676 || (otherRec.sym__0__5599391359954735578 != sym__0__5599391359954735578 || (otherRec.sym__0__4014184007857207821 != sym__0__4014184007857207821 || (otherRec.sym__0___45_7146441527183610849 != sym__0___45_7146441527183610849 || (otherRec.sym__0___45_8891100078062559775 != sym__0___45_8891100078062559775 || (otherRec.sym__0___45_5365202057839317149 != sym__0___45_5365202057839317149 || (otherRec.sym__0__5177313860806756678 != sym__0__5177313860806756678 || (otherRec.sym__0___45_6139660049171508851 != sym__0___45_6139660049171508851 || (otherRec.sym__0__5600261570499839795 != sym__0__5600261570499839795 || (otherRec.sym__0__7033726162709406531 != sym__0__7033726162709406531 || (otherRec.sym__0___45_2028921051824210768 != sym__0___45_2028921051824210768 || (otherRec.sym__0__1510822012344354762 != sym__0__1510822012344354762 || (otherRec.sym__0___45_2462553484168592128 != sym__0___45_2462553484168592128 || (otherRec.sym__0__6826615390864986324 != sym__0__6826615390864986324 || (otherRec.sym__0__1653057618405204038 != sym__0__1653057618405204038 || (otherRec.sym__0__1042393484014954953 != sym__0__1042393484014954953 || otherRec.sym__0___45_4797345940361177504 != sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_2544647080140891779;
  fluidb_string<18> sym__0___45_4581931629044260499;
  fluidb_string<9> sym__0__3511844764913402723;
  fluidb_string<9> sym__0__2581750769096843740;
  unsigned sym__0___45_6031048599860414622;
  unsigned sym__0__8084343433543173228;
  fluidb_string<7> sym__0___45_3664881058840515771;
  unsigned sym__0___45_1924199962958349658;
  unsigned sym__0__7769469128992998949;
  unsigned sym__0__7818554603565865821;
  unsigned sym__0__4360634980582143419;
  unsigned sym__0___45_7492593539880285892;
  fluidb_string<15> sym__0__1706094538935295417;
  fluidb_string<2> sym__0__6114638120282452033;
  fluidb_string<2> sym__0___45_78261027814563536;
  fluidb_string<2> sym__0__2648420561950371368;
  fluidb_string<2> sym__0__3807806894063626346;
  unsigned sym__0__3010211381236373125;
  fluidb_string<18> sym__0__3300613616795216173;
  fluidb_string<40> sym__0___45_3130123223234281513;
  fluidb_string<11> sym__0__8189415442579395633;
  fluidb_string<15> sym__0__3248231192614790363;
  fluidb_string<13> sym__0__1734593865430170446;
  fluidb_string<15> sym__0___45_8167422549222682195;
  fluidb_string<21> sym__0__2936268515493900473;
  unsigned sym__0__2661490882974477953;
  int sym__0___45_6833151998909895557;
  unsigned sym__0___45_6379152824683587325;
  unsigned sym__0__3389381886574775957;
  unsigned sym__0___45_3006394417042584462;
  unsigned sym__0__5708853396861436519;
  fluidb_string<21> sym__0__2510302245253987058;
  unsigned sym__0___45_8268616720440236384;
  fluidb_string<10> sym__0___45_2145747097567105917;
  unsigned sym__0___45_6747202196090936717;
  double sym__0___45_980129616638612863;
  unsigned sym__0__7935787287177824775;
  double sym__0___45_1765426731373793463;
  unsigned sym__0__2312911666975909277;
  unsigned sym__0__8713898721580785886;
  double sym__0__5274362417922015940;
  fluidb_string<13> sym__0___45_5950462958936866676;
  unsigned sym__0__5599391359954735578;
  fluidb_string<25> sym__0__4014184007857207821;
  fluidb_string<40> sym__0___45_7146441527183610849;
  fluidb_string<16> sym__0___45_8891100078062559775;
  fluidb_string<16> sym__0___45_5365202057839317149;
  fluidb_string<13> sym__0__5177313860806756678;
  fluidb_string<15> sym__0___45_6139660049171508851;
  unsigned sym__0__5600261570499839795;
  fluidb_string<55> sym__0__7033726162709406531;
  fluidb_string<25> sym__0___45_2028921051824210768;
  fluidb_string<7> sym__0__1510822012344354762;
  fluidb_string<10> sym__0___45_2462553484168592128;
  fluidb_string<11> sym__0__6826615390864986324;
  fluidb_string<25> sym__0__1653057618405204038;
  unsigned sym__0__1042393484014954953;
  fluidb_string<10> sym__0___45_4797345940361177504;
 private:
};


class Record12 {
 public:
  Record12(unsigned __sym__0___45_5856119524029611077, fluidb_string<25> __sym__0___45_6117756446690137488, fluidb_string<40> __sym__0___45_1224041454770943330, fluidb_string<16> __sym__0__3812587929888833564, fluidb_string<16> __sym__0___45_8008422244145826406, fluidb_string<13> __sym__0___45_4939322251048870433, fluidb_string<15> __sym__0__9053752194642805744, unsigned __sym__0__7640136232660398972, int __sym__0__3289943100803186450, unsigned __sym__0___45_5627701903624601606, unsigned __sym__0___45_863299618022773480, unsigned __sym__0__8136723066761439923, unsigned __sym__0___45_8900710125615980474, fluidb_string<21> __sym__0__3462758906763983155, unsigned __sym__0__3593248492832864765, fluidb_string<10> __sym__0__570789152911192442, unsigned __sym__0___45_898962213167368918, double __sym__0__8374566300773412732, unsigned __sym__0__3427059227198728358, double __sym__0___45_6183981215901482044, unsigned __sym__0__5401582859916018176, unsigned __sym__0___45_5742182270645980233, double __sym__0___45_6866160564727197111, fluidb_string<13> __sym__0__5391279297800068881, unsigned __sym__0__6547894395141806496, fluidb_string<18> __sym__0___45_3537255481618975984, fluidb_string<9> __sym__0___45_489602595012032102, fluidb_string<9> __sym__0___45_4289355322834357343, unsigned __sym__0__3088708723790424355, unsigned __sym__0__7661335306996867761, fluidb_string<7> __sym__0__5988258660856233160, unsigned __sym__0__9055435109332708863, unsigned __sym__0___45_8293017417291819416, unsigned __sym__0__6710199602869345088, unsigned __sym__0___45_6808136983507392814, unsigned __sym__0__4732268644213463873, fluidb_string<15> __sym__0___45_9054202570868277068, fluidb_string<2> __sym__0___45_2078724704519105348, fluidb_string<2> __sym__0__1821380049868269517, fluidb_string<2> __sym__0__9082608366399799653, fluidb_string<2> __sym__0__3719923678451811915, unsigned __sym__0___45_4532026337430972310, fluidb_string<55> __sym__0__5967878085860026810, fluidb_string<25> __sym__0__4437551601976402253, fluidb_string<7> __sym__0___45_8824352318197405717, fluidb_string<10> __sym__0__462272293144630813, fluidb_string<11> __sym__0__6951672169272331993, fluidb_string<25> __sym__0__8001753553028231903, unsigned __sym__0__7959165797094177348, fluidb_string<10> __sym__0__3796606591825283389) : sym__0___45_5856119524029611077(__sym__0___45_5856119524029611077), sym__0___45_6117756446690137488(__sym__0___45_6117756446690137488), sym__0___45_1224041454770943330(__sym__0___45_1224041454770943330), sym__0__3812587929888833564(__sym__0__3812587929888833564), sym__0___45_8008422244145826406(__sym__0___45_8008422244145826406), sym__0___45_4939322251048870433(__sym__0___45_4939322251048870433), sym__0__9053752194642805744(__sym__0__9053752194642805744), sym__0__7640136232660398972(__sym__0__7640136232660398972), sym__0__3289943100803186450(__sym__0__3289943100803186450), sym__0___45_5627701903624601606(__sym__0___45_5627701903624601606), sym__0___45_863299618022773480(__sym__0___45_863299618022773480), sym__0__8136723066761439923(__sym__0__8136723066761439923), sym__0___45_8900710125615980474(__sym__0___45_8900710125615980474), sym__0__3462758906763983155(__sym__0__3462758906763983155), sym__0__3593248492832864765(__sym__0__3593248492832864765), sym__0__570789152911192442(__sym__0__570789152911192442), sym__0___45_898962213167368918(__sym__0___45_898962213167368918), sym__0__8374566300773412732(__sym__0__8374566300773412732), sym__0__3427059227198728358(__sym__0__3427059227198728358), sym__0___45_6183981215901482044(__sym__0___45_6183981215901482044), sym__0__5401582859916018176(__sym__0__5401582859916018176), sym__0___45_5742182270645980233(__sym__0___45_5742182270645980233), sym__0___45_6866160564727197111(__sym__0___45_6866160564727197111), sym__0__5391279297800068881(__sym__0__5391279297800068881), sym__0__6547894395141806496(__sym__0__6547894395141806496), sym__0___45_3537255481618975984(__sym__0___45_3537255481618975984), sym__0___45_489602595012032102(__sym__0___45_489602595012032102), sym__0___45_4289355322834357343(__sym__0___45_4289355322834357343), sym__0__3088708723790424355(__sym__0__3088708723790424355), sym__0__7661335306996867761(__sym__0__7661335306996867761), sym__0__5988258660856233160(__sym__0__5988258660856233160), sym__0__9055435109332708863(__sym__0__9055435109332708863), sym__0___45_8293017417291819416(__sym__0___45_8293017417291819416), sym__0__6710199602869345088(__sym__0__6710199602869345088), sym__0___45_6808136983507392814(__sym__0___45_6808136983507392814), sym__0__4732268644213463873(__sym__0__4732268644213463873), sym__0___45_9054202570868277068(__sym__0___45_9054202570868277068), sym__0___45_2078724704519105348(__sym__0___45_2078724704519105348), sym__0__1821380049868269517(__sym__0__1821380049868269517), sym__0__9082608366399799653(__sym__0__9082608366399799653), sym__0__3719923678451811915(__sym__0__3719923678451811915), sym__0___45_4532026337430972310(__sym__0___45_4532026337430972310), sym__0__5967878085860026810(__sym__0__5967878085860026810), sym__0__4437551601976402253(__sym__0__4437551601976402253), sym__0___45_8824352318197405717(__sym__0___45_8824352318197405717), sym__0__462272293144630813(__sym__0__462272293144630813), sym__0__6951672169272331993(__sym__0__6951672169272331993), sym__0__8001753553028231903(__sym__0__8001753553028231903), sym__0__7959165797094177348(__sym__0__7959165797094177348), sym__0__3796606591825283389(__sym__0__3796606591825283389)
  {
  }
  Record12() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_5856119524029611077 << " | " << arrToString(sym__0___45_6117756446690137488) << " | " << arrToString(sym__0___45_1224041454770943330) << " | " << arrToString(sym__0__3812587929888833564) << " | " << arrToString(sym__0___45_8008422244145826406) << " | " << arrToString(sym__0___45_4939322251048870433) << " | " << arrToString(sym__0__9053752194642805744) << " | " << sym__0__7640136232660398972 << " | " << sym__0__3289943100803186450 << " | " << sym__0___45_5627701903624601606 << " | " << sym__0___45_863299618022773480 << " | " << sym__0__8136723066761439923 << " | " << sym__0___45_8900710125615980474 << " | " << arrToString(sym__0__3462758906763983155) << " | " << sym__0__3593248492832864765 << " | " << arrToString(sym__0__570789152911192442) << " | " << sym__0___45_898962213167368918 << " | " << sym__0__8374566300773412732 << " | " << sym__0__3427059227198728358 << " | " << sym__0___45_6183981215901482044 << " | " << sym__0__5401582859916018176 << " | " << sym__0___45_5742182270645980233 << " | " << sym__0___45_6866160564727197111 << " | " << arrToString(sym__0__5391279297800068881) << " | " << sym__0__6547894395141806496 << " | " << arrToString(sym__0___45_3537255481618975984) << " | " << arrToString(sym__0___45_489602595012032102) << " | " << arrToString(sym__0___45_4289355322834357343) << " | " << sym__0__3088708723790424355 << " | " << sym__0__7661335306996867761 << " | " << arrToString(sym__0__5988258660856233160) << " | " << sym__0__9055435109332708863 << " | " << sym__0___45_8293017417291819416 << " | " << sym__0__6710199602869345088 << " | " << sym__0___45_6808136983507392814 << " | " << sym__0__4732268644213463873 << " | " << arrToString(sym__0___45_9054202570868277068) << " | " << arrToString(sym__0___45_2078724704519105348) << " | " << arrToString(sym__0__1821380049868269517) << " | " << arrToString(sym__0__9082608366399799653) << " | " << arrToString(sym__0__3719923678451811915) << " | " << sym__0___45_4532026337430972310 << " | " << arrToString(sym__0__5967878085860026810) << " | " << arrToString(sym__0__4437551601976402253) << " | " << arrToString(sym__0___45_8824352318197405717) << " | " << arrToString(sym__0__462272293144630813) << " | " << arrToString(sym__0__6951672169272331993) << " | " << arrToString(sym__0__8001753553028231903) << " | " << sym__0__7959165797094177348 << " | " << arrToString(sym__0__3796606591825283389);
    return o.str();
  }
  bool operator <(const Record12& otherRec) const{
    return (otherRec.sym__0___45_5856119524029611077 < sym__0___45_5856119524029611077 && (otherRec.sym__0___45_6117756446690137488 < sym__0___45_6117756446690137488 && (otherRec.sym__0___45_1224041454770943330 < sym__0___45_1224041454770943330 && (otherRec.sym__0__3812587929888833564 < sym__0__3812587929888833564 && (otherRec.sym__0___45_8008422244145826406 < sym__0___45_8008422244145826406 && (otherRec.sym__0___45_4939322251048870433 < sym__0___45_4939322251048870433 && (otherRec.sym__0__9053752194642805744 < sym__0__9053752194642805744 && (otherRec.sym__0__7640136232660398972 < sym__0__7640136232660398972 && (otherRec.sym__0__3289943100803186450 < sym__0__3289943100803186450 && (otherRec.sym__0___45_5627701903624601606 < sym__0___45_5627701903624601606 && (otherRec.sym__0___45_863299618022773480 < sym__0___45_863299618022773480 && (otherRec.sym__0__8136723066761439923 < sym__0__8136723066761439923 && (otherRec.sym__0___45_8900710125615980474 < sym__0___45_8900710125615980474 && (otherRec.sym__0__3462758906763983155 < sym__0__3462758906763983155 && (otherRec.sym__0__3593248492832864765 < sym__0__3593248492832864765 && (otherRec.sym__0__570789152911192442 < sym__0__570789152911192442 && (otherRec.sym__0___45_898962213167368918 < sym__0___45_898962213167368918 && (otherRec.sym__0__8374566300773412732 < sym__0__8374566300773412732 && (otherRec.sym__0__3427059227198728358 < sym__0__3427059227198728358 && (otherRec.sym__0___45_6183981215901482044 < sym__0___45_6183981215901482044 && (otherRec.sym__0__5401582859916018176 < sym__0__5401582859916018176 && (otherRec.sym__0___45_5742182270645980233 < sym__0___45_5742182270645980233 && (otherRec.sym__0___45_6866160564727197111 < sym__0___45_6866160564727197111 && (otherRec.sym__0__5391279297800068881 < sym__0__5391279297800068881 && (otherRec.sym__0__6547894395141806496 < sym__0__6547894395141806496 && (otherRec.sym__0___45_3537255481618975984 < sym__0___45_3537255481618975984 && (otherRec.sym__0___45_489602595012032102 < sym__0___45_489602595012032102 && (otherRec.sym__0___45_4289355322834357343 < sym__0___45_4289355322834357343 && (otherRec.sym__0__3088708723790424355 < sym__0__3088708723790424355 && (otherRec.sym__0__7661335306996867761 < sym__0__7661335306996867761 && (otherRec.sym__0__5988258660856233160 < sym__0__5988258660856233160 && (otherRec.sym__0__9055435109332708863 < sym__0__9055435109332708863 && (otherRec.sym__0___45_8293017417291819416 < sym__0___45_8293017417291819416 && (otherRec.sym__0__6710199602869345088 < sym__0__6710199602869345088 && (otherRec.sym__0___45_6808136983507392814 < sym__0___45_6808136983507392814 && (otherRec.sym__0__4732268644213463873 < sym__0__4732268644213463873 && (otherRec.sym__0___45_9054202570868277068 < sym__0___45_9054202570868277068 && (otherRec.sym__0___45_2078724704519105348 < sym__0___45_2078724704519105348 && (otherRec.sym__0__1821380049868269517 < sym__0__1821380049868269517 && (otherRec.sym__0__9082608366399799653 < sym__0__9082608366399799653 && (otherRec.sym__0__3719923678451811915 < sym__0__3719923678451811915 && (otherRec.sym__0___45_4532026337430972310 < sym__0___45_4532026337430972310 && (otherRec.sym__0__5967878085860026810 < sym__0__5967878085860026810 && (otherRec.sym__0__4437551601976402253 < sym__0__4437551601976402253 && (otherRec.sym__0___45_8824352318197405717 < sym__0___45_8824352318197405717 && (otherRec.sym__0__462272293144630813 < sym__0__462272293144630813 && (otherRec.sym__0__6951672169272331993 < sym__0__6951672169272331993 && (otherRec.sym__0__8001753553028231903 < sym__0__8001753553028231903 && (otherRec.sym__0__7959165797094177348 < sym__0__7959165797094177348 && otherRec.sym__0__3796606591825283389 < sym__0__3796606591825283389)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record12& otherRec) const{
    return (otherRec.sym__0___45_5856119524029611077 == sym__0___45_5856119524029611077 && (otherRec.sym__0___45_6117756446690137488 == sym__0___45_6117756446690137488 && (otherRec.sym__0___45_1224041454770943330 == sym__0___45_1224041454770943330 && (otherRec.sym__0__3812587929888833564 == sym__0__3812587929888833564 && (otherRec.sym__0___45_8008422244145826406 == sym__0___45_8008422244145826406 && (otherRec.sym__0___45_4939322251048870433 == sym__0___45_4939322251048870433 && (otherRec.sym__0__9053752194642805744 == sym__0__9053752194642805744 && (otherRec.sym__0__7640136232660398972 == sym__0__7640136232660398972 && (otherRec.sym__0__3289943100803186450 == sym__0__3289943100803186450 && (otherRec.sym__0___45_5627701903624601606 == sym__0___45_5627701903624601606 && (otherRec.sym__0___45_863299618022773480 == sym__0___45_863299618022773480 && (otherRec.sym__0__8136723066761439923 == sym__0__8136723066761439923 && (otherRec.sym__0___45_8900710125615980474 == sym__0___45_8900710125615980474 && (otherRec.sym__0__3462758906763983155 == sym__0__3462758906763983155 && (otherRec.sym__0__3593248492832864765 == sym__0__3593248492832864765 && (otherRec.sym__0__570789152911192442 == sym__0__570789152911192442 && (otherRec.sym__0___45_898962213167368918 == sym__0___45_898962213167368918 && (otherRec.sym__0__8374566300773412732 == sym__0__8374566300773412732 && (otherRec.sym__0__3427059227198728358 == sym__0__3427059227198728358 && (otherRec.sym__0___45_6183981215901482044 == sym__0___45_6183981215901482044 && (otherRec.sym__0__5401582859916018176 == sym__0__5401582859916018176 && (otherRec.sym__0___45_5742182270645980233 == sym__0___45_5742182270645980233 && (otherRec.sym__0___45_6866160564727197111 == sym__0___45_6866160564727197111 && (otherRec.sym__0__5391279297800068881 == sym__0__5391279297800068881 && (otherRec.sym__0__6547894395141806496 == sym__0__6547894395141806496 && (otherRec.sym__0___45_3537255481618975984 == sym__0___45_3537255481618975984 && (otherRec.sym__0___45_489602595012032102 == sym__0___45_489602595012032102 && (otherRec.sym__0___45_4289355322834357343 == sym__0___45_4289355322834357343 && (otherRec.sym__0__3088708723790424355 == sym__0__3088708723790424355 && (otherRec.sym__0__7661335306996867761 == sym__0__7661335306996867761 && (otherRec.sym__0__5988258660856233160 == sym__0__5988258660856233160 && (otherRec.sym__0__9055435109332708863 == sym__0__9055435109332708863 && (otherRec.sym__0___45_8293017417291819416 == sym__0___45_8293017417291819416 && (otherRec.sym__0__6710199602869345088 == sym__0__6710199602869345088 && (otherRec.sym__0___45_6808136983507392814 == sym__0___45_6808136983507392814 && (otherRec.sym__0__4732268644213463873 == sym__0__4732268644213463873 && (otherRec.sym__0___45_9054202570868277068 == sym__0___45_9054202570868277068 && (otherRec.sym__0___45_2078724704519105348 == sym__0___45_2078724704519105348 && (otherRec.sym__0__1821380049868269517 == sym__0__1821380049868269517 && (otherRec.sym__0__9082608366399799653 == sym__0__9082608366399799653 && (otherRec.sym__0__3719923678451811915 == sym__0__3719923678451811915 && (otherRec.sym__0___45_4532026337430972310 == sym__0___45_4532026337430972310 && (otherRec.sym__0__5967878085860026810 == sym__0__5967878085860026810 && (otherRec.sym__0__4437551601976402253 == sym__0__4437551601976402253 && (otherRec.sym__0___45_8824352318197405717 == sym__0___45_8824352318197405717 && (otherRec.sym__0__462272293144630813 == sym__0__462272293144630813 && (otherRec.sym__0__6951672169272331993 == sym__0__6951672169272331993 && (otherRec.sym__0__8001753553028231903 == sym__0__8001753553028231903 && (otherRec.sym__0__7959165797094177348 == sym__0__7959165797094177348 && otherRec.sym__0__3796606591825283389 == sym__0__3796606591825283389)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record12& otherRec) const{
    return (otherRec.sym__0___45_5856119524029611077 != sym__0___45_5856119524029611077 || (otherRec.sym__0___45_6117756446690137488 != sym__0___45_6117756446690137488 || (otherRec.sym__0___45_1224041454770943330 != sym__0___45_1224041454770943330 || (otherRec.sym__0__3812587929888833564 != sym__0__3812587929888833564 || (otherRec.sym__0___45_8008422244145826406 != sym__0___45_8008422244145826406 || (otherRec.sym__0___45_4939322251048870433 != sym__0___45_4939322251048870433 || (otherRec.sym__0__9053752194642805744 != sym__0__9053752194642805744 || (otherRec.sym__0__7640136232660398972 != sym__0__7640136232660398972 || (otherRec.sym__0__3289943100803186450 != sym__0__3289943100803186450 || (otherRec.sym__0___45_5627701903624601606 != sym__0___45_5627701903624601606 || (otherRec.sym__0___45_863299618022773480 != sym__0___45_863299618022773480 || (otherRec.sym__0__8136723066761439923 != sym__0__8136723066761439923 || (otherRec.sym__0___45_8900710125615980474 != sym__0___45_8900710125615980474 || (otherRec.sym__0__3462758906763983155 != sym__0__3462758906763983155 || (otherRec.sym__0__3593248492832864765 != sym__0__3593248492832864765 || (otherRec.sym__0__570789152911192442 != sym__0__570789152911192442 || (otherRec.sym__0___45_898962213167368918 != sym__0___45_898962213167368918 || (otherRec.sym__0__8374566300773412732 != sym__0__8374566300773412732 || (otherRec.sym__0__3427059227198728358 != sym__0__3427059227198728358 || (otherRec.sym__0___45_6183981215901482044 != sym__0___45_6183981215901482044 || (otherRec.sym__0__5401582859916018176 != sym__0__5401582859916018176 || (otherRec.sym__0___45_5742182270645980233 != sym__0___45_5742182270645980233 || (otherRec.sym__0___45_6866160564727197111 != sym__0___45_6866160564727197111 || (otherRec.sym__0__5391279297800068881 != sym__0__5391279297800068881 || (otherRec.sym__0__6547894395141806496 != sym__0__6547894395141806496 || (otherRec.sym__0___45_3537255481618975984 != sym__0___45_3537255481618975984 || (otherRec.sym__0___45_489602595012032102 != sym__0___45_489602595012032102 || (otherRec.sym__0___45_4289355322834357343 != sym__0___45_4289355322834357343 || (otherRec.sym__0__3088708723790424355 != sym__0__3088708723790424355 || (otherRec.sym__0__7661335306996867761 != sym__0__7661335306996867761 || (otherRec.sym__0__5988258660856233160 != sym__0__5988258660856233160 || (otherRec.sym__0__9055435109332708863 != sym__0__9055435109332708863 || (otherRec.sym__0___45_8293017417291819416 != sym__0___45_8293017417291819416 || (otherRec.sym__0__6710199602869345088 != sym__0__6710199602869345088 || (otherRec.sym__0___45_6808136983507392814 != sym__0___45_6808136983507392814 || (otherRec.sym__0__4732268644213463873 != sym__0__4732268644213463873 || (otherRec.sym__0___45_9054202570868277068 != sym__0___45_9054202570868277068 || (otherRec.sym__0___45_2078724704519105348 != sym__0___45_2078724704519105348 || (otherRec.sym__0__1821380049868269517 != sym__0__1821380049868269517 || (otherRec.sym__0__9082608366399799653 != sym__0__9082608366399799653 || (otherRec.sym__0__3719923678451811915 != sym__0__3719923678451811915 || (otherRec.sym__0___45_4532026337430972310 != sym__0___45_4532026337430972310 || (otherRec.sym__0__5967878085860026810 != sym__0__5967878085860026810 || (otherRec.sym__0__4437551601976402253 != sym__0__4437551601976402253 || (otherRec.sym__0___45_8824352318197405717 != sym__0___45_8824352318197405717 || (otherRec.sym__0__462272293144630813 != sym__0__462272293144630813 || (otherRec.sym__0__6951672169272331993 != sym__0__6951672169272331993 || (otherRec.sym__0__8001753553028231903 != sym__0__8001753553028231903 || (otherRec.sym__0__7959165797094177348 != sym__0__7959165797094177348 || otherRec.sym__0__3796606591825283389 != sym__0__3796606591825283389)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_5856119524029611077;
  fluidb_string<25> sym__0___45_6117756446690137488;
  fluidb_string<40> sym__0___45_1224041454770943330;
  fluidb_string<16> sym__0__3812587929888833564;
  fluidb_string<16> sym__0___45_8008422244145826406;
  fluidb_string<13> sym__0___45_4939322251048870433;
  fluidb_string<15> sym__0__9053752194642805744;
  unsigned sym__0__7640136232660398972;
  int sym__0__3289943100803186450;
  unsigned sym__0___45_5627701903624601606;
  unsigned sym__0___45_863299618022773480;
  unsigned sym__0__8136723066761439923;
  unsigned sym__0___45_8900710125615980474;
  fluidb_string<21> sym__0__3462758906763983155;
  unsigned sym__0__3593248492832864765;
  fluidb_string<10> sym__0__570789152911192442;
  unsigned sym__0___45_898962213167368918;
  double sym__0__8374566300773412732;
  unsigned sym__0__3427059227198728358;
  double sym__0___45_6183981215901482044;
  unsigned sym__0__5401582859916018176;
  unsigned sym__0___45_5742182270645980233;
  double sym__0___45_6866160564727197111;
  fluidb_string<13> sym__0__5391279297800068881;
  unsigned sym__0__6547894395141806496;
  fluidb_string<18> sym__0___45_3537255481618975984;
  fluidb_string<9> sym__0___45_489602595012032102;
  fluidb_string<9> sym__0___45_4289355322834357343;
  unsigned sym__0__3088708723790424355;
  unsigned sym__0__7661335306996867761;
  fluidb_string<7> sym__0__5988258660856233160;
  unsigned sym__0__9055435109332708863;
  unsigned sym__0___45_8293017417291819416;
  unsigned sym__0__6710199602869345088;
  unsigned sym__0___45_6808136983507392814;
  unsigned sym__0__4732268644213463873;
  fluidb_string<15> sym__0___45_9054202570868277068;
  fluidb_string<2> sym__0___45_2078724704519105348;
  fluidb_string<2> sym__0__1821380049868269517;
  fluidb_string<2> sym__0__9082608366399799653;
  fluidb_string<2> sym__0__3719923678451811915;
  unsigned sym__0___45_4532026337430972310;
  fluidb_string<55> sym__0__5967878085860026810;
  fluidb_string<25> sym__0__4437551601976402253;
  fluidb_string<7> sym__0___45_8824352318197405717;
  fluidb_string<10> sym__0__462272293144630813;
  fluidb_string<11> sym__0__6951672169272331993;
  fluidb_string<25> sym__0__8001753553028231903;
  unsigned sym__0__7959165797094177348;
  fluidb_string<10> sym__0__3796606591825283389;
 private:
};


class Record4 {
 public:
  Record4(unsigned __sym__0__7178003535380331304, fluidb_string<55> __sym__0___45_7020257275696364520, fluidb_string<25> __sym__0___45_6307179734719967033, fluidb_string<7> __sym__0__4568304886257136061, fluidb_string<10> __sym__0___45_6291097039630000265, fluidb_string<11> __sym__0__551327770031967739, fluidb_string<25> __sym__0__3827696365022297353, unsigned __sym__0___45_1779543743759935870, fluidb_string<10> __sym__0__3752090135924368535) : sym__0__7178003535380331304(__sym__0__7178003535380331304), sym__0___45_7020257275696364520(__sym__0___45_7020257275696364520), sym__0___45_6307179734719967033(__sym__0___45_6307179734719967033), sym__0__4568304886257136061(__sym__0__4568304886257136061), sym__0___45_6291097039630000265(__sym__0___45_6291097039630000265), sym__0__551327770031967739(__sym__0__551327770031967739), sym__0__3827696365022297353(__sym__0__3827696365022297353), sym__0___45_1779543743759935870(__sym__0___45_1779543743759935870), sym__0__3752090135924368535(__sym__0__3752090135924368535)
  {
  }
  Record4() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__7178003535380331304 << " | " << arrToString(sym__0___45_7020257275696364520) << " | " << arrToString(sym__0___45_6307179734719967033) << " | " << arrToString(sym__0__4568304886257136061) << " | " << arrToString(sym__0___45_6291097039630000265) << " | " << arrToString(sym__0__551327770031967739) << " | " << arrToString(sym__0__3827696365022297353) << " | " << sym__0___45_1779543743759935870 << " | " << arrToString(sym__0__3752090135924368535);
    return o.str();
  }
  bool operator <(const Record4& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 < sym__0__7178003535380331304 && (otherRec.sym__0___45_7020257275696364520 < sym__0___45_7020257275696364520 && (otherRec.sym__0___45_6307179734719967033 < sym__0___45_6307179734719967033 && (otherRec.sym__0__4568304886257136061 < sym__0__4568304886257136061 && (otherRec.sym__0___45_6291097039630000265 < sym__0___45_6291097039630000265 && (otherRec.sym__0__551327770031967739 < sym__0__551327770031967739 && (otherRec.sym__0__3827696365022297353 < sym__0__3827696365022297353 && (otherRec.sym__0___45_1779543743759935870 < sym__0___45_1779543743759935870 && otherRec.sym__0__3752090135924368535 < sym__0__3752090135924368535))))))));
  }
  bool operator ==(const Record4& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 == sym__0__7178003535380331304 && (otherRec.sym__0___45_7020257275696364520 == sym__0___45_7020257275696364520 && (otherRec.sym__0___45_6307179734719967033 == sym__0___45_6307179734719967033 && (otherRec.sym__0__4568304886257136061 == sym__0__4568304886257136061 && (otherRec.sym__0___45_6291097039630000265 == sym__0___45_6291097039630000265 && (otherRec.sym__0__551327770031967739 == sym__0__551327770031967739 && (otherRec.sym__0__3827696365022297353 == sym__0__3827696365022297353 && (otherRec.sym__0___45_1779543743759935870 == sym__0___45_1779543743759935870 && otherRec.sym__0__3752090135924368535 == sym__0__3752090135924368535))))))));
  }
  bool operator !=(const Record4& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 != sym__0__7178003535380331304 || (otherRec.sym__0___45_7020257275696364520 != sym__0___45_7020257275696364520 || (otherRec.sym__0___45_6307179734719967033 != sym__0___45_6307179734719967033 || (otherRec.sym__0__4568304886257136061 != sym__0__4568304886257136061 || (otherRec.sym__0___45_6291097039630000265 != sym__0___45_6291097039630000265 || (otherRec.sym__0__551327770031967739 != sym__0__551327770031967739 || (otherRec.sym__0__3827696365022297353 != sym__0__3827696365022297353 || (otherRec.sym__0___45_1779543743759935870 != sym__0___45_1779543743759935870 || otherRec.sym__0__3752090135924368535 != sym__0__3752090135924368535))))))));
  }
  unsigned sym__0__7178003535380331304;
  fluidb_string<55> sym__0___45_7020257275696364520;
  fluidb_string<25> sym__0___45_6307179734719967033;
  fluidb_string<7> sym__0__4568304886257136061;
  fluidb_string<10> sym__0___45_6291097039630000265;
  fluidb_string<11> sym__0__551327770031967739;
  fluidb_string<25> sym__0__3827696365022297353;
  unsigned sym__0___45_1779543743759935870;
  fluidb_string<10> sym__0__3752090135924368535;
 private:
};


class Record22 {
 public:
  Record22(unsigned __sym__0___45_7743617557643973661, unsigned __sym__0___45_6261698000977207925, fluidb_string<10> __sym__0__1631598784897141641) : sym__0___45_7743617557643973661(__sym__0___45_7743617557643973661), sym__0___45_6261698000977207925(__sym__0___45_6261698000977207925), sym__0__1631598784897141641(__sym__0__1631598784897141641)
  {
  }
  Record22() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_7743617557643973661 << " | " << sym__0___45_6261698000977207925 << " | " << arrToString(sym__0__1631598784897141641);
    return o.str();
  }
  bool operator <(const Record22& otherRec) const{
    return (otherRec.sym__0___45_7743617557643973661 < sym__0___45_7743617557643973661 && (otherRec.sym__0___45_6261698000977207925 < sym__0___45_6261698000977207925 && otherRec.sym__0__1631598784897141641 < sym__0__1631598784897141641));
  }
  bool operator ==(const Record22& otherRec) const{
    return (otherRec.sym__0___45_7743617557643973661 == sym__0___45_7743617557643973661 && (otherRec.sym__0___45_6261698000977207925 == sym__0___45_6261698000977207925 && otherRec.sym__0__1631598784897141641 == sym__0__1631598784897141641));
  }
  bool operator !=(const Record22& otherRec) const{
    return (otherRec.sym__0___45_7743617557643973661 != sym__0___45_7743617557643973661 || (otherRec.sym__0___45_6261698000977207925 != sym__0___45_6261698000977207925 || otherRec.sym__0__1631598784897141641 != sym__0__1631598784897141641));
  }
  unsigned sym__0___45_7743617557643973661;
  unsigned sym__0___45_6261698000977207925;
  fluidb_string<10> sym__0__1631598784897141641;
 private:
};


class Record24 {
 public:
  Record24(unsigned __sym__0___45_531840894949671910, fluidb_string<25> __sym__0___45_7594568260455252811, fluidb_string<40> __sym__0___45_4224396157642132841, fluidb_string<16> __sym__0___45_5121813103072643223, fluidb_string<16> __sym__0__3627274254091843899, fluidb_string<13> __sym__0___45_519289659968682554, fluidb_string<15> __sym__0__5824930074457018933, unsigned __sym__0__8300140134385342025, int __sym__0___45_4363113810210080717, unsigned __sym__0___45_2180998471546424549, unsigned __sym__0___45_591129746765413155, unsigned __sym__0___45_4416720451126861422, unsigned __sym__0___45_2100514126469912481, fluidb_string<21> __sym__0__3750234095707159570, unsigned __sym__0___45_7960421939889289288, fluidb_string<10> __sym__0___45_8655770192480484197, unsigned __sym__0__2072590499357086155, double __sym__0__8268830136148095561, unsigned __sym__0___45_678210870537240385, double __sym__0__6112270341236569873, unsigned __sym__0__8598037934431251909, unsigned __sym__0__5291402561130019774, double __sym__0___45_7851524774395097220, fluidb_string<13> __sym__0__1291698872846441412, unsigned __sym__0__8986418791032324453, fluidb_string<18> __sym__0__2167360253537002837, fluidb_string<9> __sym__0__8141858625439628603, fluidb_string<9> __sym__0___45_7931886843684217772, unsigned __sym__0___45_2549139954849286782, unsigned __sym__0___45_1691445119060855580, fluidb_string<7> __sym__0__7474331622035256461, unsigned __sym__0___45_667953329600979866, unsigned __sym__0___45_3035057609626888019, unsigned __sym__0___45_8476599677752189563, unsigned __sym__0___45_6389391189957387661, unsigned __sym__0___45_6486695610681891724, fluidb_string<15> __sym__0__4796994603556539905, fluidb_string<2> __sym__0___45_6306286879286504951, fluidb_string<2> __sym__0___45_922796240211516024, fluidb_string<2> __sym__0__2810436566368623008, fluidb_string<2> __sym__0__7272995257348976042, unsigned __sym__0__1928421907625115531, fluidb_string<55> __sym__0__6254739572024865371, fluidb_string<25> __sym__0___45_5257913184343802104, fluidb_string<7> __sym__0___45_1520289822717538230, fluidb_string<10> __sym__0___45_8628415396103686184, fluidb_string<11> __sym__0__2109492732871942412, fluidb_string<25> __sym__0__5385658520341277382, unsigned __sym__0__3660583386293997969, fluidb_string<10> __sym__0___45_3013711856665730696) : sym__0___45_531840894949671910(__sym__0___45_531840894949671910), sym__0___45_7594568260455252811(__sym__0___45_7594568260455252811), sym__0___45_4224396157642132841(__sym__0___45_4224396157642132841), sym__0___45_5121813103072643223(__sym__0___45_5121813103072643223), sym__0__3627274254091843899(__sym__0__3627274254091843899), sym__0___45_519289659968682554(__sym__0___45_519289659968682554), sym__0__5824930074457018933(__sym__0__5824930074457018933), sym__0__8300140134385342025(__sym__0__8300140134385342025), sym__0___45_4363113810210080717(__sym__0___45_4363113810210080717), sym__0___45_2180998471546424549(__sym__0___45_2180998471546424549), sym__0___45_591129746765413155(__sym__0___45_591129746765413155), sym__0___45_4416720451126861422(__sym__0___45_4416720451126861422), sym__0___45_2100514126469912481(__sym__0___45_2100514126469912481), sym__0__3750234095707159570(__sym__0__3750234095707159570), sym__0___45_7960421939889289288(__sym__0___45_7960421939889289288), sym__0___45_8655770192480484197(__sym__0___45_8655770192480484197), sym__0__2072590499357086155(__sym__0__2072590499357086155), sym__0__8268830136148095561(__sym__0__8268830136148095561), sym__0___45_678210870537240385(__sym__0___45_678210870537240385), sym__0__6112270341236569873(__sym__0__6112270341236569873), sym__0__8598037934431251909(__sym__0__8598037934431251909), sym__0__5291402561130019774(__sym__0__5291402561130019774), sym__0___45_7851524774395097220(__sym__0___45_7851524774395097220), sym__0__1291698872846441412(__sym__0__1291698872846441412), sym__0__8986418791032324453(__sym__0__8986418791032324453), sym__0__2167360253537002837(__sym__0__2167360253537002837), sym__0__8141858625439628603(__sym__0__8141858625439628603), sym__0___45_7931886843684217772(__sym__0___45_7931886843684217772), sym__0___45_2549139954849286782(__sym__0___45_2549139954849286782), sym__0___45_1691445119060855580(__sym__0___45_1691445119060855580), sym__0__7474331622035256461(__sym__0__7474331622035256461), sym__0___45_667953329600979866(__sym__0___45_667953329600979866), sym__0___45_3035057609626888019(__sym__0___45_3035057609626888019), sym__0___45_8476599677752189563(__sym__0___45_8476599677752189563), sym__0___45_6389391189957387661(__sym__0___45_6389391189957387661), sym__0___45_6486695610681891724(__sym__0___45_6486695610681891724), sym__0__4796994603556539905(__sym__0__4796994603556539905), sym__0___45_6306286879286504951(__sym__0___45_6306286879286504951), sym__0___45_922796240211516024(__sym__0___45_922796240211516024), sym__0__2810436566368623008(__sym__0__2810436566368623008), sym__0__7272995257348976042(__sym__0__7272995257348976042), sym__0__1928421907625115531(__sym__0__1928421907625115531), sym__0__6254739572024865371(__sym__0__6254739572024865371), sym__0___45_5257913184343802104(__sym__0___45_5257913184343802104), sym__0___45_1520289822717538230(__sym__0___45_1520289822717538230), sym__0___45_8628415396103686184(__sym__0___45_8628415396103686184), sym__0__2109492732871942412(__sym__0__2109492732871942412), sym__0__5385658520341277382(__sym__0__5385658520341277382), sym__0__3660583386293997969(__sym__0__3660583386293997969), sym__0___45_3013711856665730696(__sym__0___45_3013711856665730696)
  {
  }
  Record24() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_531840894949671910 << " | " << arrToString(sym__0___45_7594568260455252811) << " | " << arrToString(sym__0___45_4224396157642132841) << " | " << arrToString(sym__0___45_5121813103072643223) << " | " << arrToString(sym__0__3627274254091843899) << " | " << arrToString(sym__0___45_519289659968682554) << " | " << arrToString(sym__0__5824930074457018933) << " | " << sym__0__8300140134385342025 << " | " << sym__0___45_4363113810210080717 << " | " << sym__0___45_2180998471546424549 << " | " << sym__0___45_591129746765413155 << " | " << sym__0___45_4416720451126861422 << " | " << sym__0___45_2100514126469912481 << " | " << arrToString(sym__0__3750234095707159570) << " | " << sym__0___45_7960421939889289288 << " | " << arrToString(sym__0___45_8655770192480484197) << " | " << sym__0__2072590499357086155 << " | " << sym__0__8268830136148095561 << " | " << sym__0___45_678210870537240385 << " | " << sym__0__6112270341236569873 << " | " << sym__0__8598037934431251909 << " | " << sym__0__5291402561130019774 << " | " << sym__0___45_7851524774395097220 << " | " << arrToString(sym__0__1291698872846441412) << " | " << sym__0__8986418791032324453 << " | " << arrToString(sym__0__2167360253537002837) << " | " << arrToString(sym__0__8141858625439628603) << " | " << arrToString(sym__0___45_7931886843684217772) << " | " << sym__0___45_2549139954849286782 << " | " << sym__0___45_1691445119060855580 << " | " << arrToString(sym__0__7474331622035256461) << " | " << sym__0___45_667953329600979866 << " | " << sym__0___45_3035057609626888019 << " | " << sym__0___45_8476599677752189563 << " | " << sym__0___45_6389391189957387661 << " | " << sym__0___45_6486695610681891724 << " | " << arrToString(sym__0__4796994603556539905) << " | " << arrToString(sym__0___45_6306286879286504951) << " | " << arrToString(sym__0___45_922796240211516024) << " | " << arrToString(sym__0__2810436566368623008) << " | " << arrToString(sym__0__7272995257348976042) << " | " << sym__0__1928421907625115531 << " | " << arrToString(sym__0__6254739572024865371) << " | " << arrToString(sym__0___45_5257913184343802104) << " | " << arrToString(sym__0___45_1520289822717538230) << " | " << arrToString(sym__0___45_8628415396103686184) << " | " << arrToString(sym__0__2109492732871942412) << " | " << arrToString(sym__0__5385658520341277382) << " | " << sym__0__3660583386293997969 << " | " << arrToString(sym__0___45_3013711856665730696);
    return o.str();
  }
  bool operator <(const Record24& otherRec) const{
    return (otherRec.sym__0___45_531840894949671910 < sym__0___45_531840894949671910 && (otherRec.sym__0___45_7594568260455252811 < sym__0___45_7594568260455252811 && (otherRec.sym__0___45_4224396157642132841 < sym__0___45_4224396157642132841 && (otherRec.sym__0___45_5121813103072643223 < sym__0___45_5121813103072643223 && (otherRec.sym__0__3627274254091843899 < sym__0__3627274254091843899 && (otherRec.sym__0___45_519289659968682554 < sym__0___45_519289659968682554 && (otherRec.sym__0__5824930074457018933 < sym__0__5824930074457018933 && (otherRec.sym__0__8300140134385342025 < sym__0__8300140134385342025 && (otherRec.sym__0___45_4363113810210080717 < sym__0___45_4363113810210080717 && (otherRec.sym__0___45_2180998471546424549 < sym__0___45_2180998471546424549 && (otherRec.sym__0___45_591129746765413155 < sym__0___45_591129746765413155 && (otherRec.sym__0___45_4416720451126861422 < sym__0___45_4416720451126861422 && (otherRec.sym__0___45_2100514126469912481 < sym__0___45_2100514126469912481 && (otherRec.sym__0__3750234095707159570 < sym__0__3750234095707159570 && (otherRec.sym__0___45_7960421939889289288 < sym__0___45_7960421939889289288 && (otherRec.sym__0___45_8655770192480484197 < sym__0___45_8655770192480484197 && (otherRec.sym__0__2072590499357086155 < sym__0__2072590499357086155 && (otherRec.sym__0__8268830136148095561 < sym__0__8268830136148095561 && (otherRec.sym__0___45_678210870537240385 < sym__0___45_678210870537240385 && (otherRec.sym__0__6112270341236569873 < sym__0__6112270341236569873 && (otherRec.sym__0__8598037934431251909 < sym__0__8598037934431251909 && (otherRec.sym__0__5291402561130019774 < sym__0__5291402561130019774 && (otherRec.sym__0___45_7851524774395097220 < sym__0___45_7851524774395097220 && (otherRec.sym__0__1291698872846441412 < sym__0__1291698872846441412 && (otherRec.sym__0__8986418791032324453 < sym__0__8986418791032324453 && (otherRec.sym__0__2167360253537002837 < sym__0__2167360253537002837 && (otherRec.sym__0__8141858625439628603 < sym__0__8141858625439628603 && (otherRec.sym__0___45_7931886843684217772 < sym__0___45_7931886843684217772 && (otherRec.sym__0___45_2549139954849286782 < sym__0___45_2549139954849286782 && (otherRec.sym__0___45_1691445119060855580 < sym__0___45_1691445119060855580 && (otherRec.sym__0__7474331622035256461 < sym__0__7474331622035256461 && (otherRec.sym__0___45_667953329600979866 < sym__0___45_667953329600979866 && (otherRec.sym__0___45_3035057609626888019 < sym__0___45_3035057609626888019 && (otherRec.sym__0___45_8476599677752189563 < sym__0___45_8476599677752189563 && (otherRec.sym__0___45_6389391189957387661 < sym__0___45_6389391189957387661 && (otherRec.sym__0___45_6486695610681891724 < sym__0___45_6486695610681891724 && (otherRec.sym__0__4796994603556539905 < sym__0__4796994603556539905 && (otherRec.sym__0___45_6306286879286504951 < sym__0___45_6306286879286504951 && (otherRec.sym__0___45_922796240211516024 < sym__0___45_922796240211516024 && (otherRec.sym__0__2810436566368623008 < sym__0__2810436566368623008 && (otherRec.sym__0__7272995257348976042 < sym__0__7272995257348976042 && (otherRec.sym__0__1928421907625115531 < sym__0__1928421907625115531 && (otherRec.sym__0__6254739572024865371 < sym__0__6254739572024865371 && (otherRec.sym__0___45_5257913184343802104 < sym__0___45_5257913184343802104 && (otherRec.sym__0___45_1520289822717538230 < sym__0___45_1520289822717538230 && (otherRec.sym__0___45_8628415396103686184 < sym__0___45_8628415396103686184 && (otherRec.sym__0__2109492732871942412 < sym__0__2109492732871942412 && (otherRec.sym__0__5385658520341277382 < sym__0__5385658520341277382 && (otherRec.sym__0__3660583386293997969 < sym__0__3660583386293997969 && otherRec.sym__0___45_3013711856665730696 < sym__0___45_3013711856665730696)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record24& otherRec) const{
    return (otherRec.sym__0___45_531840894949671910 == sym__0___45_531840894949671910 && (otherRec.sym__0___45_7594568260455252811 == sym__0___45_7594568260455252811 && (otherRec.sym__0___45_4224396157642132841 == sym__0___45_4224396157642132841 && (otherRec.sym__0___45_5121813103072643223 == sym__0___45_5121813103072643223 && (otherRec.sym__0__3627274254091843899 == sym__0__3627274254091843899 && (otherRec.sym__0___45_519289659968682554 == sym__0___45_519289659968682554 && (otherRec.sym__0__5824930074457018933 == sym__0__5824930074457018933 && (otherRec.sym__0__8300140134385342025 == sym__0__8300140134385342025 && (otherRec.sym__0___45_4363113810210080717 == sym__0___45_4363113810210080717 && (otherRec.sym__0___45_2180998471546424549 == sym__0___45_2180998471546424549 && (otherRec.sym__0___45_591129746765413155 == sym__0___45_591129746765413155 && (otherRec.sym__0___45_4416720451126861422 == sym__0___45_4416720451126861422 && (otherRec.sym__0___45_2100514126469912481 == sym__0___45_2100514126469912481 && (otherRec.sym__0__3750234095707159570 == sym__0__3750234095707159570 && (otherRec.sym__0___45_7960421939889289288 == sym__0___45_7960421939889289288 && (otherRec.sym__0___45_8655770192480484197 == sym__0___45_8655770192480484197 && (otherRec.sym__0__2072590499357086155 == sym__0__2072590499357086155 && (otherRec.sym__0__8268830136148095561 == sym__0__8268830136148095561 && (otherRec.sym__0___45_678210870537240385 == sym__0___45_678210870537240385 && (otherRec.sym__0__6112270341236569873 == sym__0__6112270341236569873 && (otherRec.sym__0__8598037934431251909 == sym__0__8598037934431251909 && (otherRec.sym__0__5291402561130019774 == sym__0__5291402561130019774 && (otherRec.sym__0___45_7851524774395097220 == sym__0___45_7851524774395097220 && (otherRec.sym__0__1291698872846441412 == sym__0__1291698872846441412 && (otherRec.sym__0__8986418791032324453 == sym__0__8986418791032324453 && (otherRec.sym__0__2167360253537002837 == sym__0__2167360253537002837 && (otherRec.sym__0__8141858625439628603 == sym__0__8141858625439628603 && (otherRec.sym__0___45_7931886843684217772 == sym__0___45_7931886843684217772 && (otherRec.sym__0___45_2549139954849286782 == sym__0___45_2549139954849286782 && (otherRec.sym__0___45_1691445119060855580 == sym__0___45_1691445119060855580 && (otherRec.sym__0__7474331622035256461 == sym__0__7474331622035256461 && (otherRec.sym__0___45_667953329600979866 == sym__0___45_667953329600979866 && (otherRec.sym__0___45_3035057609626888019 == sym__0___45_3035057609626888019 && (otherRec.sym__0___45_8476599677752189563 == sym__0___45_8476599677752189563 && (otherRec.sym__0___45_6389391189957387661 == sym__0___45_6389391189957387661 && (otherRec.sym__0___45_6486695610681891724 == sym__0___45_6486695610681891724 && (otherRec.sym__0__4796994603556539905 == sym__0__4796994603556539905 && (otherRec.sym__0___45_6306286879286504951 == sym__0___45_6306286879286504951 && (otherRec.sym__0___45_922796240211516024 == sym__0___45_922796240211516024 && (otherRec.sym__0__2810436566368623008 == sym__0__2810436566368623008 && (otherRec.sym__0__7272995257348976042 == sym__0__7272995257348976042 && (otherRec.sym__0__1928421907625115531 == sym__0__1928421907625115531 && (otherRec.sym__0__6254739572024865371 == sym__0__6254739572024865371 && (otherRec.sym__0___45_5257913184343802104 == sym__0___45_5257913184343802104 && (otherRec.sym__0___45_1520289822717538230 == sym__0___45_1520289822717538230 && (otherRec.sym__0___45_8628415396103686184 == sym__0___45_8628415396103686184 && (otherRec.sym__0__2109492732871942412 == sym__0__2109492732871942412 && (otherRec.sym__0__5385658520341277382 == sym__0__5385658520341277382 && (otherRec.sym__0__3660583386293997969 == sym__0__3660583386293997969 && otherRec.sym__0___45_3013711856665730696 == sym__0___45_3013711856665730696)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record24& otherRec) const{
    return (otherRec.sym__0___45_531840894949671910 != sym__0___45_531840894949671910 || (otherRec.sym__0___45_7594568260455252811 != sym__0___45_7594568260455252811 || (otherRec.sym__0___45_4224396157642132841 != sym__0___45_4224396157642132841 || (otherRec.sym__0___45_5121813103072643223 != sym__0___45_5121813103072643223 || (otherRec.sym__0__3627274254091843899 != sym__0__3627274254091843899 || (otherRec.sym__0___45_519289659968682554 != sym__0___45_519289659968682554 || (otherRec.sym__0__5824930074457018933 != sym__0__5824930074457018933 || (otherRec.sym__0__8300140134385342025 != sym__0__8300140134385342025 || (otherRec.sym__0___45_4363113810210080717 != sym__0___45_4363113810210080717 || (otherRec.sym__0___45_2180998471546424549 != sym__0___45_2180998471546424549 || (otherRec.sym__0___45_591129746765413155 != sym__0___45_591129746765413155 || (otherRec.sym__0___45_4416720451126861422 != sym__0___45_4416720451126861422 || (otherRec.sym__0___45_2100514126469912481 != sym__0___45_2100514126469912481 || (otherRec.sym__0__3750234095707159570 != sym__0__3750234095707159570 || (otherRec.sym__0___45_7960421939889289288 != sym__0___45_7960421939889289288 || (otherRec.sym__0___45_8655770192480484197 != sym__0___45_8655770192480484197 || (otherRec.sym__0__2072590499357086155 != sym__0__2072590499357086155 || (otherRec.sym__0__8268830136148095561 != sym__0__8268830136148095561 || (otherRec.sym__0___45_678210870537240385 != sym__0___45_678210870537240385 || (otherRec.sym__0__6112270341236569873 != sym__0__6112270341236569873 || (otherRec.sym__0__8598037934431251909 != sym__0__8598037934431251909 || (otherRec.sym__0__5291402561130019774 != sym__0__5291402561130019774 || (otherRec.sym__0___45_7851524774395097220 != sym__0___45_7851524774395097220 || (otherRec.sym__0__1291698872846441412 != sym__0__1291698872846441412 || (otherRec.sym__0__8986418791032324453 != sym__0__8986418791032324453 || (otherRec.sym__0__2167360253537002837 != sym__0__2167360253537002837 || (otherRec.sym__0__8141858625439628603 != sym__0__8141858625439628603 || (otherRec.sym__0___45_7931886843684217772 != sym__0___45_7931886843684217772 || (otherRec.sym__0___45_2549139954849286782 != sym__0___45_2549139954849286782 || (otherRec.sym__0___45_1691445119060855580 != sym__0___45_1691445119060855580 || (otherRec.sym__0__7474331622035256461 != sym__0__7474331622035256461 || (otherRec.sym__0___45_667953329600979866 != sym__0___45_667953329600979866 || (otherRec.sym__0___45_3035057609626888019 != sym__0___45_3035057609626888019 || (otherRec.sym__0___45_8476599677752189563 != sym__0___45_8476599677752189563 || (otherRec.sym__0___45_6389391189957387661 != sym__0___45_6389391189957387661 || (otherRec.sym__0___45_6486695610681891724 != sym__0___45_6486695610681891724 || (otherRec.sym__0__4796994603556539905 != sym__0__4796994603556539905 || (otherRec.sym__0___45_6306286879286504951 != sym__0___45_6306286879286504951 || (otherRec.sym__0___45_922796240211516024 != sym__0___45_922796240211516024 || (otherRec.sym__0__2810436566368623008 != sym__0__2810436566368623008 || (otherRec.sym__0__7272995257348976042 != sym__0__7272995257348976042 || (otherRec.sym__0__1928421907625115531 != sym__0__1928421907625115531 || (otherRec.sym__0__6254739572024865371 != sym__0__6254739572024865371 || (otherRec.sym__0___45_5257913184343802104 != sym__0___45_5257913184343802104 || (otherRec.sym__0___45_1520289822717538230 != sym__0___45_1520289822717538230 || (otherRec.sym__0___45_8628415396103686184 != sym__0___45_8628415396103686184 || (otherRec.sym__0__2109492732871942412 != sym__0__2109492732871942412 || (otherRec.sym__0__5385658520341277382 != sym__0__5385658520341277382 || (otherRec.sym__0__3660583386293997969 != sym__0__3660583386293997969 || otherRec.sym__0___45_3013711856665730696 != sym__0___45_3013711856665730696)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_531840894949671910;
  fluidb_string<25> sym__0___45_7594568260455252811;
  fluidb_string<40> sym__0___45_4224396157642132841;
  fluidb_string<16> sym__0___45_5121813103072643223;
  fluidb_string<16> sym__0__3627274254091843899;
  fluidb_string<13> sym__0___45_519289659968682554;
  fluidb_string<15> sym__0__5824930074457018933;
  unsigned sym__0__8300140134385342025;
  int sym__0___45_4363113810210080717;
  unsigned sym__0___45_2180998471546424549;
  unsigned sym__0___45_591129746765413155;
  unsigned sym__0___45_4416720451126861422;
  unsigned sym__0___45_2100514126469912481;
  fluidb_string<21> sym__0__3750234095707159570;
  unsigned sym__0___45_7960421939889289288;
  fluidb_string<10> sym__0___45_8655770192480484197;
  unsigned sym__0__2072590499357086155;
  double sym__0__8268830136148095561;
  unsigned sym__0___45_678210870537240385;
  double sym__0__6112270341236569873;
  unsigned sym__0__8598037934431251909;
  unsigned sym__0__5291402561130019774;
  double sym__0___45_7851524774395097220;
  fluidb_string<13> sym__0__1291698872846441412;
  unsigned sym__0__8986418791032324453;
  fluidb_string<18> sym__0__2167360253537002837;
  fluidb_string<9> sym__0__8141858625439628603;
  fluidb_string<9> sym__0___45_7931886843684217772;
  unsigned sym__0___45_2549139954849286782;
  unsigned sym__0___45_1691445119060855580;
  fluidb_string<7> sym__0__7474331622035256461;
  unsigned sym__0___45_667953329600979866;
  unsigned sym__0___45_3035057609626888019;
  unsigned sym__0___45_8476599677752189563;
  unsigned sym__0___45_6389391189957387661;
  unsigned sym__0___45_6486695610681891724;
  fluidb_string<15> sym__0__4796994603556539905;
  fluidb_string<2> sym__0___45_6306286879286504951;
  fluidb_string<2> sym__0___45_922796240211516024;
  fluidb_string<2> sym__0__2810436566368623008;
  fluidb_string<2> sym__0__7272995257348976042;
  unsigned sym__0__1928421907625115531;
  fluidb_string<55> sym__0__6254739572024865371;
  fluidb_string<25> sym__0___45_5257913184343802104;
  fluidb_string<7> sym__0___45_1520289822717538230;
  fluidb_string<10> sym__0___45_8628415396103686184;
  fluidb_string<11> sym__0__2109492732871942412;
  fluidb_string<25> sym__0__5385658520341277382;
  unsigned sym__0__3660583386293997969;
  fluidb_string<10> sym__0___45_3013711856665730696;
 private:
};


class Record14 {
 public:
  Record14(unsigned __sortElem0) : sortElem0(__sortElem0)
  {
  }
  Record14() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0;
    return o.str();
  }
  bool operator <(const Record14& otherRec) const{
    return otherRec.sortElem0 < sortElem0;
  }
  bool operator ==(const Record14& otherRec) const{
    return otherRec.sortElem0 == sortElem0;
  }
  bool operator !=(const Record14& otherRec) const{
    return otherRec.sortElem0 != sortElem0;
  }
  unsigned sortElem0;
 private:
};


class Record7 {
 public:
  Record7(unsigned __sym__0__2102316481828394123, fluidb_string<25> __sym__0__1780257040091145452, fluidb_string<40> __sym__0__3109939911660640430, fluidb_string<16> __sym__0___45_2175199227983174320, fluidb_string<16> __sym__0__2274992661292194562, fluidb_string<13> __sym__0___45_52536403880094569, fluidb_string<15> __sym__0__8474116574285927276, unsigned __sym__0__1835503384076924528, int __sym__0__586412267723269786, unsigned __sym__0__1353367320182642978, unsigned __sym__0___45_6351222752813626636, unsigned __sym__0___45_805067702695824989, unsigned __sym__0__914509637812701046, fluidb_string<21> __sym__0__7895450651221174051, unsigned __sym__0__5942285589324576545, fluidb_string<10> __sym__0__3979382234526804898, unsigned __sym__0___45_6103522369909819246, double __sym__0__1873148039180761712, unsigned __sym__0__1430551526674366102, double __sym__0__1048818672001592248, unsigned __sym__0__5723353836447658492, unsigned __sym__0___45_2233273278156881105, double __sym__0___45_1120880788595637835, fluidb_string<13> __sym__0___45_6361490230660137987, unsigned __sym__0___45_7131249874638266788, fluidb_string<18> __sym__0__7265729621635359692, fluidb_string<9> __sym__0___45_2986035740159621374, fluidb_string<9> __sym__0__5081664509798388941, unsigned __sym__0___45_8518596434939314413, unsigned __sym__0__1988221653138390749, fluidb_string<7> __sym__0___45_8801377200944175068, unsigned __sym__0___45_4634183629139578121, unsigned __sym__0__806472603637564420, unsigned __sym__0__1725829484083430844, unsigned __sym__0___45_5279274827282678566, unsigned __sym__0___45_9129247388617675603, fluidb_string<15> __sym__0__1232225844204183080, fluidb_string<2> __sym__0__9184663680502119984, fluidb_string<2> __sym__0___45_9023997483659527503, fluidb_string<2> __sym__0___45_1026604631201554135, fluidb_string<2> __sym__0___45_7189754320372197989) : sym__0__2102316481828394123(__sym__0__2102316481828394123), sym__0__1780257040091145452(__sym__0__1780257040091145452), sym__0__3109939911660640430(__sym__0__3109939911660640430), sym__0___45_2175199227983174320(__sym__0___45_2175199227983174320), sym__0__2274992661292194562(__sym__0__2274992661292194562), sym__0___45_52536403880094569(__sym__0___45_52536403880094569), sym__0__8474116574285927276(__sym__0__8474116574285927276), sym__0__1835503384076924528(__sym__0__1835503384076924528), sym__0__586412267723269786(__sym__0__586412267723269786), sym__0__1353367320182642978(__sym__0__1353367320182642978), sym__0___45_6351222752813626636(__sym__0___45_6351222752813626636), sym__0___45_805067702695824989(__sym__0___45_805067702695824989), sym__0__914509637812701046(__sym__0__914509637812701046), sym__0__7895450651221174051(__sym__0__7895450651221174051), sym__0__5942285589324576545(__sym__0__5942285589324576545), sym__0__3979382234526804898(__sym__0__3979382234526804898), sym__0___45_6103522369909819246(__sym__0___45_6103522369909819246), sym__0__1873148039180761712(__sym__0__1873148039180761712), sym__0__1430551526674366102(__sym__0__1430551526674366102), sym__0__1048818672001592248(__sym__0__1048818672001592248), sym__0__5723353836447658492(__sym__0__5723353836447658492), sym__0___45_2233273278156881105(__sym__0___45_2233273278156881105), sym__0___45_1120880788595637835(__sym__0___45_1120880788595637835), sym__0___45_6361490230660137987(__sym__0___45_6361490230660137987), sym__0___45_7131249874638266788(__sym__0___45_7131249874638266788), sym__0__7265729621635359692(__sym__0__7265729621635359692), sym__0___45_2986035740159621374(__sym__0___45_2986035740159621374), sym__0__5081664509798388941(__sym__0__5081664509798388941), sym__0___45_8518596434939314413(__sym__0___45_8518596434939314413), sym__0__1988221653138390749(__sym__0__1988221653138390749), sym__0___45_8801377200944175068(__sym__0___45_8801377200944175068), sym__0___45_4634183629139578121(__sym__0___45_4634183629139578121), sym__0__806472603637564420(__sym__0__806472603637564420), sym__0__1725829484083430844(__sym__0__1725829484083430844), sym__0___45_5279274827282678566(__sym__0___45_5279274827282678566), sym__0___45_9129247388617675603(__sym__0___45_9129247388617675603), sym__0__1232225844204183080(__sym__0__1232225844204183080), sym__0__9184663680502119984(__sym__0__9184663680502119984), sym__0___45_9023997483659527503(__sym__0___45_9023997483659527503), sym__0___45_1026604631201554135(__sym__0___45_1026604631201554135), sym__0___45_7189754320372197989(__sym__0___45_7189754320372197989)
  {
  }
  Record7() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__2102316481828394123 << " | " << arrToString(sym__0__1780257040091145452) << " | " << arrToString(sym__0__3109939911660640430) << " | " << arrToString(sym__0___45_2175199227983174320) << " | " << arrToString(sym__0__2274992661292194562) << " | " << arrToString(sym__0___45_52536403880094569) << " | " << arrToString(sym__0__8474116574285927276) << " | " << sym__0__1835503384076924528 << " | " << sym__0__586412267723269786 << " | " << sym__0__1353367320182642978 << " | " << sym__0___45_6351222752813626636 << " | " << sym__0___45_805067702695824989 << " | " << sym__0__914509637812701046 << " | " << arrToString(sym__0__7895450651221174051) << " | " << sym__0__5942285589324576545 << " | " << arrToString(sym__0__3979382234526804898) << " | " << sym__0___45_6103522369909819246 << " | " << sym__0__1873148039180761712 << " | " << sym__0__1430551526674366102 << " | " << sym__0__1048818672001592248 << " | " << sym__0__5723353836447658492 << " | " << sym__0___45_2233273278156881105 << " | " << sym__0___45_1120880788595637835 << " | " << arrToString(sym__0___45_6361490230660137987) << " | " << sym__0___45_7131249874638266788 << " | " << arrToString(sym__0__7265729621635359692) << " | " << arrToString(sym__0___45_2986035740159621374) << " | " << arrToString(sym__0__5081664509798388941) << " | " << sym__0___45_8518596434939314413 << " | " << sym__0__1988221653138390749 << " | " << arrToString(sym__0___45_8801377200944175068) << " | " << sym__0___45_4634183629139578121 << " | " << sym__0__806472603637564420 << " | " << sym__0__1725829484083430844 << " | " << sym__0___45_5279274827282678566 << " | " << sym__0___45_9129247388617675603 << " | " << arrToString(sym__0__1232225844204183080) << " | " << arrToString(sym__0__9184663680502119984) << " | " << arrToString(sym__0___45_9023997483659527503) << " | " << arrToString(sym__0___45_1026604631201554135) << " | " << arrToString(sym__0___45_7189754320372197989);
    return o.str();
  }
  bool operator <(const Record7& otherRec) const{
    return (otherRec.sym__0__2102316481828394123 < sym__0__2102316481828394123 && (otherRec.sym__0__1780257040091145452 < sym__0__1780257040091145452 && (otherRec.sym__0__3109939911660640430 < sym__0__3109939911660640430 && (otherRec.sym__0___45_2175199227983174320 < sym__0___45_2175199227983174320 && (otherRec.sym__0__2274992661292194562 < sym__0__2274992661292194562 && (otherRec.sym__0___45_52536403880094569 < sym__0___45_52536403880094569 && (otherRec.sym__0__8474116574285927276 < sym__0__8474116574285927276 && (otherRec.sym__0__1835503384076924528 < sym__0__1835503384076924528 && (otherRec.sym__0__586412267723269786 < sym__0__586412267723269786 && (otherRec.sym__0__1353367320182642978 < sym__0__1353367320182642978 && (otherRec.sym__0___45_6351222752813626636 < sym__0___45_6351222752813626636 && (otherRec.sym__0___45_805067702695824989 < sym__0___45_805067702695824989 && (otherRec.sym__0__914509637812701046 < sym__0__914509637812701046 && (otherRec.sym__0__7895450651221174051 < sym__0__7895450651221174051 && (otherRec.sym__0__5942285589324576545 < sym__0__5942285589324576545 && (otherRec.sym__0__3979382234526804898 < sym__0__3979382234526804898 && (otherRec.sym__0___45_6103522369909819246 < sym__0___45_6103522369909819246 && (otherRec.sym__0__1873148039180761712 < sym__0__1873148039180761712 && (otherRec.sym__0__1430551526674366102 < sym__0__1430551526674366102 && (otherRec.sym__0__1048818672001592248 < sym__0__1048818672001592248 && (otherRec.sym__0__5723353836447658492 < sym__0__5723353836447658492 && (otherRec.sym__0___45_2233273278156881105 < sym__0___45_2233273278156881105 && (otherRec.sym__0___45_1120880788595637835 < sym__0___45_1120880788595637835 && (otherRec.sym__0___45_6361490230660137987 < sym__0___45_6361490230660137987 && (otherRec.sym__0___45_7131249874638266788 < sym__0___45_7131249874638266788 && (otherRec.sym__0__7265729621635359692 < sym__0__7265729621635359692 && (otherRec.sym__0___45_2986035740159621374 < sym__0___45_2986035740159621374 && (otherRec.sym__0__5081664509798388941 < sym__0__5081664509798388941 && (otherRec.sym__0___45_8518596434939314413 < sym__0___45_8518596434939314413 && (otherRec.sym__0__1988221653138390749 < sym__0__1988221653138390749 && (otherRec.sym__0___45_8801377200944175068 < sym__0___45_8801377200944175068 && (otherRec.sym__0___45_4634183629139578121 < sym__0___45_4634183629139578121 && (otherRec.sym__0__806472603637564420 < sym__0__806472603637564420 && (otherRec.sym__0__1725829484083430844 < sym__0__1725829484083430844 && (otherRec.sym__0___45_5279274827282678566 < sym__0___45_5279274827282678566 && (otherRec.sym__0___45_9129247388617675603 < sym__0___45_9129247388617675603 && (otherRec.sym__0__1232225844204183080 < sym__0__1232225844204183080 && (otherRec.sym__0__9184663680502119984 < sym__0__9184663680502119984 && (otherRec.sym__0___45_9023997483659527503 < sym__0___45_9023997483659527503 && (otherRec.sym__0___45_1026604631201554135 < sym__0___45_1026604631201554135 && otherRec.sym__0___45_7189754320372197989 < sym__0___45_7189754320372197989))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record7& otherRec) const{
    return (otherRec.sym__0__2102316481828394123 == sym__0__2102316481828394123 && (otherRec.sym__0__1780257040091145452 == sym__0__1780257040091145452 && (otherRec.sym__0__3109939911660640430 == sym__0__3109939911660640430 && (otherRec.sym__0___45_2175199227983174320 == sym__0___45_2175199227983174320 && (otherRec.sym__0__2274992661292194562 == sym__0__2274992661292194562 && (otherRec.sym__0___45_52536403880094569 == sym__0___45_52536403880094569 && (otherRec.sym__0__8474116574285927276 == sym__0__8474116574285927276 && (otherRec.sym__0__1835503384076924528 == sym__0__1835503384076924528 && (otherRec.sym__0__586412267723269786 == sym__0__586412267723269786 && (otherRec.sym__0__1353367320182642978 == sym__0__1353367320182642978 && (otherRec.sym__0___45_6351222752813626636 == sym__0___45_6351222752813626636 && (otherRec.sym__0___45_805067702695824989 == sym__0___45_805067702695824989 && (otherRec.sym__0__914509637812701046 == sym__0__914509637812701046 && (otherRec.sym__0__7895450651221174051 == sym__0__7895450651221174051 && (otherRec.sym__0__5942285589324576545 == sym__0__5942285589324576545 && (otherRec.sym__0__3979382234526804898 == sym__0__3979382234526804898 && (otherRec.sym__0___45_6103522369909819246 == sym__0___45_6103522369909819246 && (otherRec.sym__0__1873148039180761712 == sym__0__1873148039180761712 && (otherRec.sym__0__1430551526674366102 == sym__0__1430551526674366102 && (otherRec.sym__0__1048818672001592248 == sym__0__1048818672001592248 && (otherRec.sym__0__5723353836447658492 == sym__0__5723353836447658492 && (otherRec.sym__0___45_2233273278156881105 == sym__0___45_2233273278156881105 && (otherRec.sym__0___45_1120880788595637835 == sym__0___45_1120880788595637835 && (otherRec.sym__0___45_6361490230660137987 == sym__0___45_6361490230660137987 && (otherRec.sym__0___45_7131249874638266788 == sym__0___45_7131249874638266788 && (otherRec.sym__0__7265729621635359692 == sym__0__7265729621635359692 && (otherRec.sym__0___45_2986035740159621374 == sym__0___45_2986035740159621374 && (otherRec.sym__0__5081664509798388941 == sym__0__5081664509798388941 && (otherRec.sym__0___45_8518596434939314413 == sym__0___45_8518596434939314413 && (otherRec.sym__0__1988221653138390749 == sym__0__1988221653138390749 && (otherRec.sym__0___45_8801377200944175068 == sym__0___45_8801377200944175068 && (otherRec.sym__0___45_4634183629139578121 == sym__0___45_4634183629139578121 && (otherRec.sym__0__806472603637564420 == sym__0__806472603637564420 && (otherRec.sym__0__1725829484083430844 == sym__0__1725829484083430844 && (otherRec.sym__0___45_5279274827282678566 == sym__0___45_5279274827282678566 && (otherRec.sym__0___45_9129247388617675603 == sym__0___45_9129247388617675603 && (otherRec.sym__0__1232225844204183080 == sym__0__1232225844204183080 && (otherRec.sym__0__9184663680502119984 == sym__0__9184663680502119984 && (otherRec.sym__0___45_9023997483659527503 == sym__0___45_9023997483659527503 && (otherRec.sym__0___45_1026604631201554135 == sym__0___45_1026604631201554135 && otherRec.sym__0___45_7189754320372197989 == sym__0___45_7189754320372197989))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record7& otherRec) const{
    return (otherRec.sym__0__2102316481828394123 != sym__0__2102316481828394123 || (otherRec.sym__0__1780257040091145452 != sym__0__1780257040091145452 || (otherRec.sym__0__3109939911660640430 != sym__0__3109939911660640430 || (otherRec.sym__0___45_2175199227983174320 != sym__0___45_2175199227983174320 || (otherRec.sym__0__2274992661292194562 != sym__0__2274992661292194562 || (otherRec.sym__0___45_52536403880094569 != sym__0___45_52536403880094569 || (otherRec.sym__0__8474116574285927276 != sym__0__8474116574285927276 || (otherRec.sym__0__1835503384076924528 != sym__0__1835503384076924528 || (otherRec.sym__0__586412267723269786 != sym__0__586412267723269786 || (otherRec.sym__0__1353367320182642978 != sym__0__1353367320182642978 || (otherRec.sym__0___45_6351222752813626636 != sym__0___45_6351222752813626636 || (otherRec.sym__0___45_805067702695824989 != sym__0___45_805067702695824989 || (otherRec.sym__0__914509637812701046 != sym__0__914509637812701046 || (otherRec.sym__0__7895450651221174051 != sym__0__7895450651221174051 || (otherRec.sym__0__5942285589324576545 != sym__0__5942285589324576545 || (otherRec.sym__0__3979382234526804898 != sym__0__3979382234526804898 || (otherRec.sym__0___45_6103522369909819246 != sym__0___45_6103522369909819246 || (otherRec.sym__0__1873148039180761712 != sym__0__1873148039180761712 || (otherRec.sym__0__1430551526674366102 != sym__0__1430551526674366102 || (otherRec.sym__0__1048818672001592248 != sym__0__1048818672001592248 || (otherRec.sym__0__5723353836447658492 != sym__0__5723353836447658492 || (otherRec.sym__0___45_2233273278156881105 != sym__0___45_2233273278156881105 || (otherRec.sym__0___45_1120880788595637835 != sym__0___45_1120880788595637835 || (otherRec.sym__0___45_6361490230660137987 != sym__0___45_6361490230660137987 || (otherRec.sym__0___45_7131249874638266788 != sym__0___45_7131249874638266788 || (otherRec.sym__0__7265729621635359692 != sym__0__7265729621635359692 || (otherRec.sym__0___45_2986035740159621374 != sym__0___45_2986035740159621374 || (otherRec.sym__0__5081664509798388941 != sym__0__5081664509798388941 || (otherRec.sym__0___45_8518596434939314413 != sym__0___45_8518596434939314413 || (otherRec.sym__0__1988221653138390749 != sym__0__1988221653138390749 || (otherRec.sym__0___45_8801377200944175068 != sym__0___45_8801377200944175068 || (otherRec.sym__0___45_4634183629139578121 != sym__0___45_4634183629139578121 || (otherRec.sym__0__806472603637564420 != sym__0__806472603637564420 || (otherRec.sym__0__1725829484083430844 != sym__0__1725829484083430844 || (otherRec.sym__0___45_5279274827282678566 != sym__0___45_5279274827282678566 || (otherRec.sym__0___45_9129247388617675603 != sym__0___45_9129247388617675603 || (otherRec.sym__0__1232225844204183080 != sym__0__1232225844204183080 || (otherRec.sym__0__9184663680502119984 != sym__0__9184663680502119984 || (otherRec.sym__0___45_9023997483659527503 != sym__0___45_9023997483659527503 || (otherRec.sym__0___45_1026604631201554135 != sym__0___45_1026604631201554135 || otherRec.sym__0___45_7189754320372197989 != sym__0___45_7189754320372197989))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__2102316481828394123;
  fluidb_string<25> sym__0__1780257040091145452;
  fluidb_string<40> sym__0__3109939911660640430;
  fluidb_string<16> sym__0___45_2175199227983174320;
  fluidb_string<16> sym__0__2274992661292194562;
  fluidb_string<13> sym__0___45_52536403880094569;
  fluidb_string<15> sym__0__8474116574285927276;
  unsigned sym__0__1835503384076924528;
  int sym__0__586412267723269786;
  unsigned sym__0__1353367320182642978;
  unsigned sym__0___45_6351222752813626636;
  unsigned sym__0___45_805067702695824989;
  unsigned sym__0__914509637812701046;
  fluidb_string<21> sym__0__7895450651221174051;
  unsigned sym__0__5942285589324576545;
  fluidb_string<10> sym__0__3979382234526804898;
  unsigned sym__0___45_6103522369909819246;
  double sym__0__1873148039180761712;
  unsigned sym__0__1430551526674366102;
  double sym__0__1048818672001592248;
  unsigned sym__0__5723353836447658492;
  unsigned sym__0___45_2233273278156881105;
  double sym__0___45_1120880788595637835;
  fluidb_string<13> sym__0___45_6361490230660137987;
  unsigned sym__0___45_7131249874638266788;
  fluidb_string<18> sym__0__7265729621635359692;
  fluidb_string<9> sym__0___45_2986035740159621374;
  fluidb_string<9> sym__0__5081664509798388941;
  unsigned sym__0___45_8518596434939314413;
  unsigned sym__0__1988221653138390749;
  fluidb_string<7> sym__0___45_8801377200944175068;
  unsigned sym__0___45_4634183629139578121;
  unsigned sym__0__806472603637564420;
  unsigned sym__0__1725829484083430844;
  unsigned sym__0___45_5279274827282678566;
  unsigned sym__0___45_9129247388617675603;
  fluidb_string<15> sym__0__1232225844204183080;
  fluidb_string<2> sym__0__9184663680502119984;
  fluidb_string<2> sym__0___45_9023997483659527503;
  fluidb_string<2> sym__0___45_1026604631201554135;
  fluidb_string<2> sym__0___45_7189754320372197989;
 private:
};


class Record11 {
 public:
  Record11(unsigned __sym__0___45_395632927433559406, fluidb_string<25> __sym__0__3500080010252534473, fluidb_string<40> __sym__0__2800931817820227903, fluidb_string<16> __sym__0__7557617225319929765, fluidb_string<16> __sym__0___45_3980497182018067045, fluidb_string<13> __sym__0__2235173403257069670, fluidb_string<15> __sym__0___45_6641253057665067959, unsigned __sym__0__1255259528474633157, int __sym__0___45_4404182672923859309, unsigned __sym__0___45_614365468487006021, unsigned __sym__0__5021292656532353329, unsigned __sym__0__4343635027495243018, unsigned __sym__0___45_3654849337237924089, fluidb_string<21> __sym__0__6124017931208230794, unsigned __sym__0__2631968767089293636, fluidb_string<10> __sym__0__8161280318223951419, unsigned __sym__0__6646444558267925131, double __sym__0___45_371840055694522427, unsigned __sym__0__1207871997281537063, double __sym__0___45_8251624728007457683, unsigned __sym__0___45_1977777050929051591, unsigned __sym__0__5291527997285077246, double __sym__0__1945446523025649920, fluidb_string<13> __sym__0__8649969499362766248, unsigned __sym__0___45_9152772373621530983, fluidb_string<18> __sym__0__4661399151085104809, fluidb_string<9> __sym__0___45_2328336135844765285, fluidb_string<9> __sym__0__7204907144595482904, unsigned __sym__0__6947146092885793306, unsigned __sym__0___45_4879039772515408504, fluidb_string<7> __sym__0___45_3380765295385793791, unsigned __sym__0__1357424853380084934, unsigned __sym__0__1623525206981402081, unsigned __sym__0___45_7738248275094052359, unsigned __sym__0___45_5520726833947609389, unsigned __sym__0__7046675501704695032, fluidb_string<15> __sym__0___45_6418041259452967043, fluidb_string<2> __sym__0___45_1891834319792150395, fluidb_string<2> __sym__0__8613816579654205812, fluidb_string<2> __sym__0__4752565720665066828, fluidb_string<2> __sym__0___45_4077601550282544382) : sym__0___45_395632927433559406(__sym__0___45_395632927433559406), sym__0__3500080010252534473(__sym__0__3500080010252534473), sym__0__2800931817820227903(__sym__0__2800931817820227903), sym__0__7557617225319929765(__sym__0__7557617225319929765), sym__0___45_3980497182018067045(__sym__0___45_3980497182018067045), sym__0__2235173403257069670(__sym__0__2235173403257069670), sym__0___45_6641253057665067959(__sym__0___45_6641253057665067959), sym__0__1255259528474633157(__sym__0__1255259528474633157), sym__0___45_4404182672923859309(__sym__0___45_4404182672923859309), sym__0___45_614365468487006021(__sym__0___45_614365468487006021), sym__0__5021292656532353329(__sym__0__5021292656532353329), sym__0__4343635027495243018(__sym__0__4343635027495243018), sym__0___45_3654849337237924089(__sym__0___45_3654849337237924089), sym__0__6124017931208230794(__sym__0__6124017931208230794), sym__0__2631968767089293636(__sym__0__2631968767089293636), sym__0__8161280318223951419(__sym__0__8161280318223951419), sym__0__6646444558267925131(__sym__0__6646444558267925131), sym__0___45_371840055694522427(__sym__0___45_371840055694522427), sym__0__1207871997281537063(__sym__0__1207871997281537063), sym__0___45_8251624728007457683(__sym__0___45_8251624728007457683), sym__0___45_1977777050929051591(__sym__0___45_1977777050929051591), sym__0__5291527997285077246(__sym__0__5291527997285077246), sym__0__1945446523025649920(__sym__0__1945446523025649920), sym__0__8649969499362766248(__sym__0__8649969499362766248), sym__0___45_9152772373621530983(__sym__0___45_9152772373621530983), sym__0__4661399151085104809(__sym__0__4661399151085104809), sym__0___45_2328336135844765285(__sym__0___45_2328336135844765285), sym__0__7204907144595482904(__sym__0__7204907144595482904), sym__0__6947146092885793306(__sym__0__6947146092885793306), sym__0___45_4879039772515408504(__sym__0___45_4879039772515408504), sym__0___45_3380765295385793791(__sym__0___45_3380765295385793791), sym__0__1357424853380084934(__sym__0__1357424853380084934), sym__0__1623525206981402081(__sym__0__1623525206981402081), sym__0___45_7738248275094052359(__sym__0___45_7738248275094052359), sym__0___45_5520726833947609389(__sym__0___45_5520726833947609389), sym__0__7046675501704695032(__sym__0__7046675501704695032), sym__0___45_6418041259452967043(__sym__0___45_6418041259452967043), sym__0___45_1891834319792150395(__sym__0___45_1891834319792150395), sym__0__8613816579654205812(__sym__0__8613816579654205812), sym__0__4752565720665066828(__sym__0__4752565720665066828), sym__0___45_4077601550282544382(__sym__0___45_4077601550282544382)
  {
  }
  Record11() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_395632927433559406 << " | " << arrToString(sym__0__3500080010252534473) << " | " << arrToString(sym__0__2800931817820227903) << " | " << arrToString(sym__0__7557617225319929765) << " | " << arrToString(sym__0___45_3980497182018067045) << " | " << arrToString(sym__0__2235173403257069670) << " | " << arrToString(sym__0___45_6641253057665067959) << " | " << sym__0__1255259528474633157 << " | " << sym__0___45_4404182672923859309 << " | " << sym__0___45_614365468487006021 << " | " << sym__0__5021292656532353329 << " | " << sym__0__4343635027495243018 << " | " << sym__0___45_3654849337237924089 << " | " << arrToString(sym__0__6124017931208230794) << " | " << sym__0__2631968767089293636 << " | " << arrToString(sym__0__8161280318223951419) << " | " << sym__0__6646444558267925131 << " | " << sym__0___45_371840055694522427 << " | " << sym__0__1207871997281537063 << " | " << sym__0___45_8251624728007457683 << " | " << sym__0___45_1977777050929051591 << " | " << sym__0__5291527997285077246 << " | " << sym__0__1945446523025649920 << " | " << arrToString(sym__0__8649969499362766248) << " | " << sym__0___45_9152772373621530983 << " | " << arrToString(sym__0__4661399151085104809) << " | " << arrToString(sym__0___45_2328336135844765285) << " | " << arrToString(sym__0__7204907144595482904) << " | " << sym__0__6947146092885793306 << " | " << sym__0___45_4879039772515408504 << " | " << arrToString(sym__0___45_3380765295385793791) << " | " << sym__0__1357424853380084934 << " | " << sym__0__1623525206981402081 << " | " << sym__0___45_7738248275094052359 << " | " << sym__0___45_5520726833947609389 << " | " << sym__0__7046675501704695032 << " | " << arrToString(sym__0___45_6418041259452967043) << " | " << arrToString(sym__0___45_1891834319792150395) << " | " << arrToString(sym__0__8613816579654205812) << " | " << arrToString(sym__0__4752565720665066828) << " | " << arrToString(sym__0___45_4077601550282544382);
    return o.str();
  }
  bool operator <(const Record11& otherRec) const{
    return (otherRec.sym__0___45_395632927433559406 < sym__0___45_395632927433559406 && (otherRec.sym__0__3500080010252534473 < sym__0__3500080010252534473 && (otherRec.sym__0__2800931817820227903 < sym__0__2800931817820227903 && (otherRec.sym__0__7557617225319929765 < sym__0__7557617225319929765 && (otherRec.sym__0___45_3980497182018067045 < sym__0___45_3980497182018067045 && (otherRec.sym__0__2235173403257069670 < sym__0__2235173403257069670 && (otherRec.sym__0___45_6641253057665067959 < sym__0___45_6641253057665067959 && (otherRec.sym__0__1255259528474633157 < sym__0__1255259528474633157 && (otherRec.sym__0___45_4404182672923859309 < sym__0___45_4404182672923859309 && (otherRec.sym__0___45_614365468487006021 < sym__0___45_614365468487006021 && (otherRec.sym__0__5021292656532353329 < sym__0__5021292656532353329 && (otherRec.sym__0__4343635027495243018 < sym__0__4343635027495243018 && (otherRec.sym__0___45_3654849337237924089 < sym__0___45_3654849337237924089 && (otherRec.sym__0__6124017931208230794 < sym__0__6124017931208230794 && (otherRec.sym__0__2631968767089293636 < sym__0__2631968767089293636 && (otherRec.sym__0__8161280318223951419 < sym__0__8161280318223951419 && (otherRec.sym__0__6646444558267925131 < sym__0__6646444558267925131 && (otherRec.sym__0___45_371840055694522427 < sym__0___45_371840055694522427 && (otherRec.sym__0__1207871997281537063 < sym__0__1207871997281537063 && (otherRec.sym__0___45_8251624728007457683 < sym__0___45_8251624728007457683 && (otherRec.sym__0___45_1977777050929051591 < sym__0___45_1977777050929051591 && (otherRec.sym__0__5291527997285077246 < sym__0__5291527997285077246 && (otherRec.sym__0__1945446523025649920 < sym__0__1945446523025649920 && (otherRec.sym__0__8649969499362766248 < sym__0__8649969499362766248 && (otherRec.sym__0___45_9152772373621530983 < sym__0___45_9152772373621530983 && (otherRec.sym__0__4661399151085104809 < sym__0__4661399151085104809 && (otherRec.sym__0___45_2328336135844765285 < sym__0___45_2328336135844765285 && (otherRec.sym__0__7204907144595482904 < sym__0__7204907144595482904 && (otherRec.sym__0__6947146092885793306 < sym__0__6947146092885793306 && (otherRec.sym__0___45_4879039772515408504 < sym__0___45_4879039772515408504 && (otherRec.sym__0___45_3380765295385793791 < sym__0___45_3380765295385793791 && (otherRec.sym__0__1357424853380084934 < sym__0__1357424853380084934 && (otherRec.sym__0__1623525206981402081 < sym__0__1623525206981402081 && (otherRec.sym__0___45_7738248275094052359 < sym__0___45_7738248275094052359 && (otherRec.sym__0___45_5520726833947609389 < sym__0___45_5520726833947609389 && (otherRec.sym__0__7046675501704695032 < sym__0__7046675501704695032 && (otherRec.sym__0___45_6418041259452967043 < sym__0___45_6418041259452967043 && (otherRec.sym__0___45_1891834319792150395 < sym__0___45_1891834319792150395 && (otherRec.sym__0__8613816579654205812 < sym__0__8613816579654205812 && (otherRec.sym__0__4752565720665066828 < sym__0__4752565720665066828 && otherRec.sym__0___45_4077601550282544382 < sym__0___45_4077601550282544382))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record11& otherRec) const{
    return (otherRec.sym__0___45_395632927433559406 == sym__0___45_395632927433559406 && (otherRec.sym__0__3500080010252534473 == sym__0__3500080010252534473 && (otherRec.sym__0__2800931817820227903 == sym__0__2800931817820227903 && (otherRec.sym__0__7557617225319929765 == sym__0__7557617225319929765 && (otherRec.sym__0___45_3980497182018067045 == sym__0___45_3980497182018067045 && (otherRec.sym__0__2235173403257069670 == sym__0__2235173403257069670 && (otherRec.sym__0___45_6641253057665067959 == sym__0___45_6641253057665067959 && (otherRec.sym__0__1255259528474633157 == sym__0__1255259528474633157 && (otherRec.sym__0___45_4404182672923859309 == sym__0___45_4404182672923859309 && (otherRec.sym__0___45_614365468487006021 == sym__0___45_614365468487006021 && (otherRec.sym__0__5021292656532353329 == sym__0__5021292656532353329 && (otherRec.sym__0__4343635027495243018 == sym__0__4343635027495243018 && (otherRec.sym__0___45_3654849337237924089 == sym__0___45_3654849337237924089 && (otherRec.sym__0__6124017931208230794 == sym__0__6124017931208230794 && (otherRec.sym__0__2631968767089293636 == sym__0__2631968767089293636 && (otherRec.sym__0__8161280318223951419 == sym__0__8161280318223951419 && (otherRec.sym__0__6646444558267925131 == sym__0__6646444558267925131 && (otherRec.sym__0___45_371840055694522427 == sym__0___45_371840055694522427 && (otherRec.sym__0__1207871997281537063 == sym__0__1207871997281537063 && (otherRec.sym__0___45_8251624728007457683 == sym__0___45_8251624728007457683 && (otherRec.sym__0___45_1977777050929051591 == sym__0___45_1977777050929051591 && (otherRec.sym__0__5291527997285077246 == sym__0__5291527997285077246 && (otherRec.sym__0__1945446523025649920 == sym__0__1945446523025649920 && (otherRec.sym__0__8649969499362766248 == sym__0__8649969499362766248 && (otherRec.sym__0___45_9152772373621530983 == sym__0___45_9152772373621530983 && (otherRec.sym__0__4661399151085104809 == sym__0__4661399151085104809 && (otherRec.sym__0___45_2328336135844765285 == sym__0___45_2328336135844765285 && (otherRec.sym__0__7204907144595482904 == sym__0__7204907144595482904 && (otherRec.sym__0__6947146092885793306 == sym__0__6947146092885793306 && (otherRec.sym__0___45_4879039772515408504 == sym__0___45_4879039772515408504 && (otherRec.sym__0___45_3380765295385793791 == sym__0___45_3380765295385793791 && (otherRec.sym__0__1357424853380084934 == sym__0__1357424853380084934 && (otherRec.sym__0__1623525206981402081 == sym__0__1623525206981402081 && (otherRec.sym__0___45_7738248275094052359 == sym__0___45_7738248275094052359 && (otherRec.sym__0___45_5520726833947609389 == sym__0___45_5520726833947609389 && (otherRec.sym__0__7046675501704695032 == sym__0__7046675501704695032 && (otherRec.sym__0___45_6418041259452967043 == sym__0___45_6418041259452967043 && (otherRec.sym__0___45_1891834319792150395 == sym__0___45_1891834319792150395 && (otherRec.sym__0__8613816579654205812 == sym__0__8613816579654205812 && (otherRec.sym__0__4752565720665066828 == sym__0__4752565720665066828 && otherRec.sym__0___45_4077601550282544382 == sym__0___45_4077601550282544382))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record11& otherRec) const{
    return (otherRec.sym__0___45_395632927433559406 != sym__0___45_395632927433559406 || (otherRec.sym__0__3500080010252534473 != sym__0__3500080010252534473 || (otherRec.sym__0__2800931817820227903 != sym__0__2800931817820227903 || (otherRec.sym__0__7557617225319929765 != sym__0__7557617225319929765 || (otherRec.sym__0___45_3980497182018067045 != sym__0___45_3980497182018067045 || (otherRec.sym__0__2235173403257069670 != sym__0__2235173403257069670 || (otherRec.sym__0___45_6641253057665067959 != sym__0___45_6641253057665067959 || (otherRec.sym__0__1255259528474633157 != sym__0__1255259528474633157 || (otherRec.sym__0___45_4404182672923859309 != sym__0___45_4404182672923859309 || (otherRec.sym__0___45_614365468487006021 != sym__0___45_614365468487006021 || (otherRec.sym__0__5021292656532353329 != sym__0__5021292656532353329 || (otherRec.sym__0__4343635027495243018 != sym__0__4343635027495243018 || (otherRec.sym__0___45_3654849337237924089 != sym__0___45_3654849337237924089 || (otherRec.sym__0__6124017931208230794 != sym__0__6124017931208230794 || (otherRec.sym__0__2631968767089293636 != sym__0__2631968767089293636 || (otherRec.sym__0__8161280318223951419 != sym__0__8161280318223951419 || (otherRec.sym__0__6646444558267925131 != sym__0__6646444558267925131 || (otherRec.sym__0___45_371840055694522427 != sym__0___45_371840055694522427 || (otherRec.sym__0__1207871997281537063 != sym__0__1207871997281537063 || (otherRec.sym__0___45_8251624728007457683 != sym__0___45_8251624728007457683 || (otherRec.sym__0___45_1977777050929051591 != sym__0___45_1977777050929051591 || (otherRec.sym__0__5291527997285077246 != sym__0__5291527997285077246 || (otherRec.sym__0__1945446523025649920 != sym__0__1945446523025649920 || (otherRec.sym__0__8649969499362766248 != sym__0__8649969499362766248 || (otherRec.sym__0___45_9152772373621530983 != sym__0___45_9152772373621530983 || (otherRec.sym__0__4661399151085104809 != sym__0__4661399151085104809 || (otherRec.sym__0___45_2328336135844765285 != sym__0___45_2328336135844765285 || (otherRec.sym__0__7204907144595482904 != sym__0__7204907144595482904 || (otherRec.sym__0__6947146092885793306 != sym__0__6947146092885793306 || (otherRec.sym__0___45_4879039772515408504 != sym__0___45_4879039772515408504 || (otherRec.sym__0___45_3380765295385793791 != sym__0___45_3380765295385793791 || (otherRec.sym__0__1357424853380084934 != sym__0__1357424853380084934 || (otherRec.sym__0__1623525206981402081 != sym__0__1623525206981402081 || (otherRec.sym__0___45_7738248275094052359 != sym__0___45_7738248275094052359 || (otherRec.sym__0___45_5520726833947609389 != sym__0___45_5520726833947609389 || (otherRec.sym__0__7046675501704695032 != sym__0__7046675501704695032 || (otherRec.sym__0___45_6418041259452967043 != sym__0___45_6418041259452967043 || (otherRec.sym__0___45_1891834319792150395 != sym__0___45_1891834319792150395 || (otherRec.sym__0__8613816579654205812 != sym__0__8613816579654205812 || (otherRec.sym__0__4752565720665066828 != sym__0__4752565720665066828 || otherRec.sym__0___45_4077601550282544382 != sym__0___45_4077601550282544382))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_395632927433559406;
  fluidb_string<25> sym__0__3500080010252534473;
  fluidb_string<40> sym__0__2800931817820227903;
  fluidb_string<16> sym__0__7557617225319929765;
  fluidb_string<16> sym__0___45_3980497182018067045;
  fluidb_string<13> sym__0__2235173403257069670;
  fluidb_string<15> sym__0___45_6641253057665067959;
  unsigned sym__0__1255259528474633157;
  int sym__0___45_4404182672923859309;
  unsigned sym__0___45_614365468487006021;
  unsigned sym__0__5021292656532353329;
  unsigned sym__0__4343635027495243018;
  unsigned sym__0___45_3654849337237924089;
  fluidb_string<21> sym__0__6124017931208230794;
  unsigned sym__0__2631968767089293636;
  fluidb_string<10> sym__0__8161280318223951419;
  unsigned sym__0__6646444558267925131;
  double sym__0___45_371840055694522427;
  unsigned sym__0__1207871997281537063;
  double sym__0___45_8251624728007457683;
  unsigned sym__0___45_1977777050929051591;
  unsigned sym__0__5291527997285077246;
  double sym__0__1945446523025649920;
  fluidb_string<13> sym__0__8649969499362766248;
  unsigned sym__0___45_9152772373621530983;
  fluidb_string<18> sym__0__4661399151085104809;
  fluidb_string<9> sym__0___45_2328336135844765285;
  fluidb_string<9> sym__0__7204907144595482904;
  unsigned sym__0__6947146092885793306;
  unsigned sym__0___45_4879039772515408504;
  fluidb_string<7> sym__0___45_3380765295385793791;
  unsigned sym__0__1357424853380084934;
  unsigned sym__0__1623525206981402081;
  unsigned sym__0___45_7738248275094052359;
  unsigned sym__0___45_5520726833947609389;
  unsigned sym__0__7046675501704695032;
  fluidb_string<15> sym__0___45_6418041259452967043;
  fluidb_string<2> sym__0___45_1891834319792150395;
  fluidb_string<2> sym__0__8613816579654205812;
  fluidb_string<2> sym__0__4752565720665066828;
  fluidb_string<2> sym__0___45_4077601550282544382;
 private:
};


class CallableClass16 {
 public:
  Record14 operator()(const Record11& record15) {
    return Record14(record15.sym__0__5021292656532353329);
  }
  typedef Record14 Codomain;
  typedef Record11 Domain0;
 private:
};


class CallableClass3 {
 public:
  Record1 operator()(const Record2& record0) {
    return Record1(record0.sym__0___45_2544647080140891779, record0.sym__0___45_4581931629044260499, record0.sym__0__3511844764913402723, record0.sym__0__2581750769096843740, record0.sym__0___45_6031048599860414622, record0.sym__0__8084343433543173228, record0.sym__0___45_3664881058840515771, record0.sym__0___45_1924199962958349658, record0.sym__0__7769469128992998949, record0.sym__0__7818554603565865821, record0.sym__0__4360634980582143419, record0.sym__0___45_7492593539880285892, record0.sym__0__1706094538935295417, record0.sym__0__6114638120282452033, record0.sym__0___45_78261027814563536, record0.sym__0__2648420561950371368, record0.sym__0__3807806894063626346, record0.sym__0__3010211381236373125, record0.sym__0__3300613616795216173, record0.sym__0___45_3130123223234281513, record0.sym__0__8189415442579395633, record0.sym__0__3248231192614790363, record0.sym__0__1734593865430170446, record0.sym__0___45_8167422549222682195, record0.sym__0__2936268515493900473, record0.sym__0__2661490882974477953, record0.sym__0___45_6833151998909895557, record0.sym__0___45_6379152824683587325, record0.sym__0__3389381886574775957, record0.sym__0___45_3006394417042584462, record0.sym__0__5708853396861436519, record0.sym__0__2510302245253987058, record0.sym__0___45_8268616720440236384, record0.sym__0___45_2145747097567105917, record0.sym__0___45_6747202196090936717, record0.sym__0___45_980129616638612863, record0.sym__0__7935787287177824775, record0.sym__0___45_1765426731373793463, record0.sym__0__2312911666975909277, record0.sym__0__8713898721580785886, record0.sym__0__5274362417922015940, record0.sym__0___45_5950462958936866676, record0.sym__0__5599391359954735578, record0.sym__0__4014184007857207821, record0.sym__0___45_7146441527183610849, record0.sym__0___45_8891100078062559775, record0.sym__0___45_5365202057839317149, record0.sym__0__5177313860806756678, record0.sym__0___45_6139660049171508851);
  }
  typedef Record1 Codomain;
  typedef Record2 Domain0;
 private:
};


class CallableClass29 {
 public:
  Record28 operator()(const Record24& record21) {
    return Record28(record21.sym__0___45_2549139954849286782, record21.sym__0___45_8628415396103686184);
  }
  typedef Record28 Codomain;
  typedef Record24 Domain0;
 private:
};


class CallableClass5 {
 public:
  Record4 operator()(const Record2& record0) {
    return Record4(record0.sym__0__5600261570499839795, record0.sym__0__7033726162709406531, record0.sym__0___45_2028921051824210768, record0.sym__0__1510822012344354762, record0.sym__0___45_2462553484168592128, record0.sym__0__6826615390864986324, record0.sym__0__1653057618405204038, record0.sym__0__1042393484014954953, record0.sym__0___45_4797345940361177504);
  }
  typedef Record4 Codomain;
  typedef Record2 Domain0;
 private:
};


class CallableClass31 {
 public:
  Record28 operator()(const Record22& record30) {
    return Record28(record30.sym__0___45_6261698000977207925, record30.sym__0__1631598784897141641);
  }
  typedef Record28 Codomain;
  typedef Record22 Domain0;
 private:
};


class CallableClass27 {
 public:
  Record22 operator()(const Record24& record21) {
    return Record22(vAggrSum23(record21.sym__0__8598037934431251909), vAggrFirst25(record21.sym__0___45_2549139954849286782), vAggrFirst26(record21.sym__0___45_8628415396103686184));
  }
  typedef Record22 Codomain;
  typedef Record24 Domain0;
 private:
  AggrSum<unsigned> vAggrSum23;
  AggrFirst<unsigned> vAggrFirst25;
  AggrFirst<fluidb_string<10>> vAggrFirst26;
};


class CallableClass20 {
 public:
  bool operator()(const Record12& record19) {
    return like(record19.sym__0___45_8824352318197405717, "MFGR#12");
  }
  typedef bool Codomain;
  typedef Record12 Domain0;
 private:
};


class CallableClass8 {
 public:
  bool operator()(const Record7& record6) {
    return like(record6.sym__0___45_52536403880094569, "AMERICA");
  }
  typedef bool Codomain;
  typedef Record7 Domain0;
 private:
};


class CallableClass18 {
 public:
  Record14 operator()(const Record4& record17) {
    return Record14(record17.sym__0__7178003535380331304);
  }
  typedef Record14 Codomain;
  typedef Record4 Domain0;
 private:
};


class CallableClass13 {
 public:
  Record12 operator()(const Record11& record9, const Record4& record10) {
    return Record12(record9.sym__0___45_395632927433559406, record9.sym__0__3500080010252534473, record9.sym__0__2800931817820227903, record9.sym__0__7557617225319929765, record9.sym__0___45_3980497182018067045, record9.sym__0__2235173403257069670, record9.sym__0___45_6641253057665067959, record9.sym__0__1255259528474633157, record9.sym__0___45_4404182672923859309, record9.sym__0___45_614365468487006021, record9.sym__0__5021292656532353329, record9.sym__0__4343635027495243018, record9.sym__0___45_3654849337237924089, record9.sym__0__6124017931208230794, record9.sym__0__2631968767089293636, record9.sym__0__8161280318223951419, record9.sym__0__6646444558267925131, record9.sym__0___45_371840055694522427, record9.sym__0__1207871997281537063, record9.sym__0___45_8251624728007457683, record9.sym__0___45_1977777050929051591, record9.sym__0__5291527997285077246, record9.sym__0__1945446523025649920, record9.sym__0__8649969499362766248, record9.sym__0___45_9152772373621530983, record9.sym__0__4661399151085104809, record9.sym__0___45_2328336135844765285, record9.sym__0__7204907144595482904, record9.sym__0__6947146092885793306, record9.sym__0___45_4879039772515408504, record9.sym__0___45_3380765295385793791, record9.sym__0__1357424853380084934, record9.sym__0__1623525206981402081, record9.sym__0___45_7738248275094052359, record9.sym__0___45_5520726833947609389, record9.sym__0__7046675501704695032, record9.sym__0___45_6418041259452967043, record9.sym__0___45_1891834319792150395, record9.sym__0__8613816579654205812, record9.sym__0__4752565720665066828, record9.sym__0___45_4077601550282544382, record10.sym__0__7178003535380331304, record10.sym__0___45_7020257275696364520, record10.sym__0___45_6307179734719967033, record10.sym__0__4568304886257136061, record10.sym__0___45_6291097039630000265, record10.sym__0__551327770031967739, record10.sym__0__3827696365022297353, record10.sym__0___45_1779543743759935870, record10.sym__0__3752090135924368535);
  }
  typedef Record12 Codomain;
  typedef Record11 Domain0;
  typedef Record4 Domain1;
 private:
};






int main() {
  // ReverseTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_partkey"))) 
  //               (R0 (E0 (ESym "p_partkey")))))
  std::cout << "ReverseTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_partkey\"))) \n              (R0 (E0 (ESym \"p_partkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkUnJoin<CallableClass3, CallableClass5>(Just("/tmp/fluidb_store/data316.dat"), Nothing(), Just("/tmp/fluidb_store/data317.dat"), Nothing(), Just("/tmp/fluidb_store/data2.dat"));
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       PAnd 
  //       (P0 
  //         (R2 REq (R0 (E0 (ESym "d_weeknuminyear"))) (R0 (E0 (EInt 6))))) 
  //       (P0 (R2 REq (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1994))))))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      PAnd \n      (P0 \n        (R2 REq (R0 (E0 (ESym \"d_weeknuminyear\"))) (R0 (E0 (EInt 6))))) \n      (P0 (R2 REq (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1994))))))) \n  (Q0 (TSymbol \"date\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data26.dat");
  // Delete: (Q1 
  //   (QGroup 
  //     [
  //      (
  //        ESym "revenue",
  //        E0 
  //           (NAggr 
  //             AggrSum 
  //             (E2 EMul 
  //                 (E0 (ESym "lo_extendedprice")) 
  //                 (E0 (ESym "lo_discount"))))
  //       )
  //     ] 
  //     []) 
  //   (S 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P0 
  //             (R2 RLe (R0 (E0 (EInt 5))) (R0 (E0 (ESym "lo_discount"))))) 
  //           (P0 
  //             (R2 RLe (R0 (E0 (ESym "lo_discount"))) (R0 (E0 (EInt 7)))))) 
  //         (P0 (R2 RLe (R0 (E0 (EInt 26))) (R0 (E0 (ESym "lo_quantity")))))) 
  //       (P0 (R2 RLe (R0 (E0 (ESym "lo_quantity"))) (R0 (E0 (EInt 35)))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_orderdate"))) 
  //             (R0 (E0 (ESym "d_datekey"))))) 
  //       (S 
  //         (P2 
  //           PAnd 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "d_weeknuminyear"))) 
  //                 (R0 (E0 (EInt 6))))) 
  //           (P0 (R2 REq (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1994)))))) 
  //         (Q0 (TSymbol "date"))) 
  std::cout << "Delete: (Q1 \n  (QGroup \n    [\n     (\n       ESym \"revenue\",\n       E0 \n          (NAggr \n            AggrSum \n            (E2 EMul \n                (E0 (ESym \"lo_extendedprice\")) \n                (E0 (ESym \"lo_discount\"))))\n      )\n    ] \n    []) \n  (S \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P0 \n            (R2 RLe (R0 (E0 (EInt 5))) (R0 (E0 (ESym \"lo_discount\"))))) \n          (P0 \n            (R2 RLe (R0 (E0 (ESym \"lo_discount\"))) (R0 (E0 (EInt 7)))))) \n        (P0 (R2 RLe (R0 (E0 (EInt 26))) (R0 (E0 (ESym \"lo_quantity\")))))) \n      (P0 (R2 RLe (R0 (E0 (ESym \"lo_quantity\"))) (R0 (E0 (EInt 35)))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_orderdate\"))) \n            (R0 (E0 (ESym \"d_datekey\"))))) \n      (S \n        (P2 \n          PAnd \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"d_weeknuminyear\"))) \n                (R0 (E0 (EInt 6))))) \n          (P0 (R2 REq (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1994)))))) \n        (Q0 (TSymbol \"date\"))) \n      (Q0 (TSymbol \"lineorder\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data34.dat");
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P2 
  //       PAnd 
  //       (P2 PAnd 
  //           (P0 (R2 RLe (R0 (E0 (EInt 5))) (R0 (E0 (ESym "lo_discount"))))) 
  //           (P0 (R2 RLe (R0 (E0 (ESym "lo_discount"))) (R0 (E0 (EInt 7)))))) 
  //       (P0 (R2 RLe (R0 (E0 (EInt 26))) (R0 (E0 (ESym "lo_quantity")))))) 
  //     (P0 (R2 RLe (R0 (E0 (ESym "lo_quantity"))) (R0 (E0 (EInt 35)))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey"))))) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P0 
  //           (R2 REq (R0 (E0 (ESym "d_weeknuminyear"))) (R0 (E0 (EInt 6))))) 
  //         (P0 (R2 REq (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1994)))))) 
  //       (Q0 (TSymbol "date"))) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P2 \n      PAnd \n      (P2 PAnd \n          (P0 (R2 RLe (R0 (E0 (EInt 5))) (R0 (E0 (ESym \"lo_discount\"))))) \n          (P0 (R2 RLe (R0 (E0 (ESym \"lo_discount\"))) (R0 (E0 (EInt 7)))))) \n      (P0 (R2 RLe (R0 (E0 (EInt 26))) (R0 (E0 (ESym \"lo_quantity\")))))) \n    (P0 (R2 RLe (R0 (E0 (ESym \"lo_quantity\"))) (R0 (E0 (EInt 35)))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\"))))) \n    (S \n      (P2 \n        PAnd \n        (P0 \n          (R2 REq (R0 (E0 (ESym \"d_weeknuminyear\"))) (R0 (E0 (EInt 6))))) \n        (P0 (R2 REq (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1994)))))) \n      (Q0 (TSymbol \"date\"))) \n    (Q0 (TSymbol \"lineorder\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data32.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey")))))) 
  //   (S 
  //     (P2 
  //       PAnd 
  //       (P0 
  //         (R2 REq (R0 (E0 (ESym "d_weeknuminyear"))) (R0 (E0 (EInt 6))))) 
  //       (P0 (R2 REq (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1994)))))) 
  //     (Q0 (TSymbol "date"))) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\")))))) \n  (S \n    (P2 \n      PAnd \n      (P0 \n        (R2 REq (R0 (E0 (ESym \"d_weeknuminyear\"))) (R0 (E0 (EInt 6))))) \n      (P0 (R2 REq (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1994)))))) \n    (Q0 (TSymbol \"date\"))) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data27.dat");
  std::cout << "Delete: (Q0 (TSymbol \"lineorder\"))" << std::endl;
  deleteFile("/tmp/fluidb_store/data0.dat");
  // Delete: (S 
  //   (P2 PAnd 
  //       (P0 (R2 REq (R0 (E0 (ESym "d_weeknuminyear"))) (R0 (E0 (EInt 6))))) 
  //       (P0 (R2 REq (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1994)))))) 
  std::cout << "Delete: (S \n  (P2 PAnd \n      (P0 (R2 REq (R0 (E0 (ESym \"d_weeknuminyear\"))) (R0 (E0 (EInt 6))))) \n      (P0 (R2 REq (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1994)))))) \n  (Q0 (TSymbol \"date\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data25.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       PAnd 
  //       (P2 PAnd 
  //           (P0 (R2 RLe (R0 (E0 (EInt 1))) (R0 (E0 (ESym "lo_discount"))))) 
  //           (P0 (R2 RLe (R0 (E0 (ESym "lo_discount"))) (R0 (E0 (EInt 3)))))) 
  //       (P0 (R2 RLt (R0 (E0 (ESym "lo_quantity"))) (R0 (E0 (EInt 25))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey"))))) 
  //     (S (P0 (R2 REq (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1993))))) 
  //        (Q0 (TSymbol "date"))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      PAnd \n      (P2 PAnd \n          (P0 (R2 RLe (R0 (E0 (EInt 1))) (R0 (E0 (ESym \"lo_discount\"))))) \n          (P0 (R2 RLe (R0 (E0 (ESym \"lo_discount\"))) (R0 (E0 (EInt 3)))))) \n      (P0 (R2 RLt (R0 (E0 (ESym \"lo_quantity\"))) (R0 (E0 (EInt 25))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\"))))) \n    (S (P0 (R2 REq (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1993))))) \n       (Q0 (TSymbol \"date\"))) \n    (Q0 (TSymbol \"lineorder\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data23.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P0 
  //             (R2 RLe (R0 (E0 (EInt 5))) (R0 (E0 (ESym "lo_discount"))))) 
  //           (P0 
  //             (R2 RLe (R0 (E0 (ESym "lo_discount"))) (R0 (E0 (EInt 7)))))) 
  //         (P0 (R2 RLe (R0 (E0 (EInt 26))) (R0 (E0 (ESym "lo_quantity")))))) 
  //       (P0 (R2 RLe (R0 (E0 (ESym "lo_quantity"))) (R0 (E0 (EInt 35))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey"))))) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P0 
  //           (R2 REq (R0 (E0 (ESym "d_weeknuminyear"))) (R0 (E0 (EInt 6))))) 
  //         (P0 (R2 REq (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1994)))))) 
  //       (Q0 (TSymbol "date"))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P0 \n            (R2 RLe (R0 (E0 (EInt 5))) (R0 (E0 (ESym \"lo_discount\"))))) \n          (P0 \n            (R2 RLe (R0 (E0 (ESym \"lo_discount\"))) (R0 (E0 (EInt 7)))))) \n        (P0 (R2 RLe (R0 (E0 (EInt 26))) (R0 (E0 (ESym \"lo_quantity\")))))) \n      (P0 (R2 RLe (R0 (E0 (ESym \"lo_quantity\"))) (R0 (E0 (EInt 35))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\"))))) \n    (S \n      (P2 \n        PAnd \n        (P0 \n          (R2 REq (R0 (E0 (ESym \"d_weeknuminyear\"))) (R0 (E0 (EInt 6))))) \n        (P0 (R2 REq (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1994)))))) \n      (Q0 (TSymbol \"date\"))) \n    (Q0 (TSymbol \"lineorder\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data33.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_region"))) 
  //               (R0 (E0 (EString "AMERICA")))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_region\"))) \n              (R0 (E0 (EString \"AMERICA\")))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass8>(Just<const std::string>("/tmp/fluidb_store/data52.dat"), Just<const std::string>("/tmp/fluidb_store/data53.dat"), "/tmp/fluidb_store/data41.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S (P0 (R2 REq (R0 (E0 (ESym "d_yearmonthnum"))) (R0 (E0 (EInt 199401))))) 
  std::cout << "Delete: (S (P0 (R2 REq (R0 (E0 (ESym \"d_yearmonthnum\"))) (R0 (E0 (EInt 199401))))) \n   (Q0 (TSymbol \"date\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data5.dat");
  // Delete: (S (P0 (R2 REq (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1993))))) 
  std::cout << "Delete: (S (P0 (R2 REq (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1993))))) \n   (Q0 (TSymbol \"date\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data15.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_partkey"))) 
  //           (R0 (E0 (ESym "p_partkey")))))) 
  //   (S 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "c_region"))) 
  //           (R0 (E0 (EString "AMERICA"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_region"))) 
  //               (R0 (E0 (EString "AMERICA"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_suppkey"))) 
  //                 (R0 (E0 (ESym "s_suppkey"))))) 
  //           (J 
  //             (P0 
  //               (R2 REq 
  //                   (R0 (E0 (ESym "lo_orderdate"))) 
  //                   (R0 (E0 (ESym "d_datekey"))))) 
  //             (Q0 (TSymbol "date")) 
  //             (Q0 (TSymbol "lineorder"))) 
  //           (Q0 (TSymbol "supplier")))) 
  //       (Q0 (TSymbol "customer")))) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_partkey\"))) \n          (R0 (E0 (ESym \"p_partkey\")))))) \n  (S \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"c_region\"))) \n          (R0 (E0 (EString \"AMERICA\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_region\"))) \n              (R0 (E0 (EString \"AMERICA\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_suppkey\"))) \n                (R0 (E0 (ESym \"s_suppkey\"))))) \n          (J \n            (P0 \n              (R2 REq \n                  (R0 (E0 (ESym \"lo_orderdate\"))) \n                  (R0 (E0 (ESym \"d_datekey\"))))) \n            (Q0 (TSymbol \"date\")) \n            (Q0 (TSymbol \"lineorder\"))) \n          (Q0 (TSymbol \"supplier\")))) \n      (Q0 (TSymbol \"customer\")))) \n  (Q0 (TSymbol \"part\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data317.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq (R0 (E0 (ESym "lo_partkey"))) (R0 (E0 (ESym "p_partkey"))))) 
  //   (S 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "c_region"))) 
  //           (R0 (E0 (EString "AMERICA"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_region"))) 
  //               (R0 (E0 (EString "AMERICA"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_suppkey"))) 
  //                 (R0 (E0 (ESym "s_suppkey"))))) 
  //           (J 
  //             (P0 
  //               (R2 REq 
  //                   (R0 (E0 (ESym "lo_orderdate"))) 
  //                   (R0 (E0 (ESym "d_datekey"))))) 
  //             (Q0 (TSymbol "date")) 
  //             (Q0 (TSymbol "lineorder"))) 
  //           (Q0 (TSymbol "supplier")))) 
  //       (Q0 (TSymbol "customer")))) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq (R0 (E0 (ESym \"lo_partkey\"))) (R0 (E0 (ESym \"p_partkey\"))))) \n  (S \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"c_region\"))) \n          (R0 (E0 (EString \"AMERICA\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_region\"))) \n              (R0 (E0 (EString \"AMERICA\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_suppkey\"))) \n                (R0 (E0 (ESym \"s_suppkey\"))))) \n          (J \n            (P0 \n              (R2 REq \n                  (R0 (E0 (ESym \"lo_orderdate\"))) \n                  (R0 (E0 (ESym \"d_datekey\"))))) \n            (Q0 (TSymbol \"date\")) \n            (Q0 (TSymbol \"lineorder\"))) \n          (Q0 (TSymbol \"supplier\")))) \n      (Q0 (TSymbol \"customer\")))) \n  (Q0 (TSymbol \"part\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data316.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "p_mfgr"))) 
  //             (R0 (E0 (EString "MFGR#1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "p_mfgr"))) 
  //             (R0 (E0 (EString "MFGR#2"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_partkey"))) 
  //           (R0 (E0 (ESym "p_partkey"))))) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_region"))) 
  //               (R0 (E0 (EString "AMERICA"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_region"))) 
  //               (R0 (E0 (EString "AMERICA")))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_suppkey"))) 
  //                 (R0 (E0 (ESym "s_suppkey"))))) 
  //           (J 
  //             (P0 
  //               (R2 REq 
  //                   (R0 (E0 (ESym "lo_orderdate"))) 
  //                   (R0 (E0 (ESym "d_datekey"))))) 
  //             (Q0 (TSymbol "date")) 
  //             (Q0 (TSymbol "lineorder"))) 
  //           (Q0 (TSymbol "supplier"))) 
  //         (Q0 (TSymbol "customer")))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"p_mfgr\"))) \n            (R0 (E0 (EString \"MFGR#1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"p_mfgr\"))) \n            (R0 (E0 (EString \"MFGR#2\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_partkey\"))) \n          (R0 (E0 (ESym \"p_partkey\"))))) \n    (S \n      (P2 \n        PAnd \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_region\"))) \n              (R0 (E0 (EString \"AMERICA\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_region\"))) \n              (R0 (E0 (EString \"AMERICA\")))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_suppkey\"))) \n                (R0 (E0 (ESym \"s_suppkey\"))))) \n          (J \n            (P0 \n              (R2 REq \n                  (R0 (E0 (ESym \"lo_orderdate\"))) \n                  (R0 (E0 (ESym \"d_datekey\"))))) \n            (Q0 (TSymbol \"date\")) \n            (Q0 (TSymbol \"lineorder\"))) \n          (Q0 (TSymbol \"supplier\"))) \n        (Q0 (TSymbol \"customer\")))) \n    (Q0 (TSymbol \"part\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data320.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "s_region"))) 
  //           (R0 (E0 (EString "AMERICA")))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_suppkey"))) 
  //             (R0 (E0 (ESym "s_suppkey"))))) 
  //       (Q0 (TSymbol "supplier")) 
  //       (Q0 (TSymbol "lineorder"))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"s_region\"))) \n          (R0 (E0 (EString \"AMERICA\")))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_suppkey\"))) \n            (R0 (E0 (ESym \"s_suppkey\"))))) \n      (Q0 (TSymbol \"supplier\")) \n      (Q0 (TSymbol \"lineorder\"))) \n    (Q0 (TSymbol \"date\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data53.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_partkey"))) 
  //               (R0 (E0 (ESym "p_partkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_partkey\"))) \n              (R0 (E0 (ESym \"p_partkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass16, CallableClass18, CallableClass13>(Just<const std::string>("/tmp/fluidb_store/data67.dat"), Just<const std::string>("/tmp/fluidb_store/data66.dat"), Just<const std::string>("/tmp/fluidb_store/data68.dat"), "/tmp/fluidb_store/data52.dat", "/tmp/fluidb_store/data2.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "c_region"))) 
  //           (R0 (E0 (EString "AMERICA"))))) 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "s_region"))) 
  //           (R0 (E0 (EString "AMERICA")))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (Q0 (TSymbol "lineorder"))) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"c_region\"))) \n          (R0 (E0 (EString \"AMERICA\"))))) \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"s_region\"))) \n          (R0 (E0 (EString \"AMERICA\")))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (Q0 (TSymbol \"lineorder\"))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data301.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq 
  //         (R0 (E0 (ESym "lo_orderdate"))) 
  //         (R0 (E0 (ESym "d_datekey"))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (Q0 (TSymbol "supplier")) 
  //     (Q0 (TSymbol "lineorder"))) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq \n        (R0 (E0 (ESym \"lo_orderdate\"))) \n        (R0 (E0 (ESym \"d_datekey\"))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (Q0 (TSymbol \"supplier\")) \n    (Q0 (TSymbol \"lineorder\"))) \n  (Q0 (TSymbol \"date\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data41.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "p_category"))) 
  //               (R0 (E0 (EString "MFGR#12")))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"p_category\"))) \n              (R0 (E0 (EString \"MFGR#12\")))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass20>(Just<const std::string>("/tmp/fluidb_store/data50.dat"), Just<const std::string>("/tmp/fluidb_store/data71.dat"), "/tmp/fluidb_store/data67.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QGroup 
  //         [(ESym "tmpSym0",E0 (NAggr AggrSum (E0 (ESym "lo_revenue")))),
  //          (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //          (ESym "p_brand1",E0 (NAggr AggrFirst (E0 (ESym "p_brand1"))))] 
  //         [E0 (ESym "d_year"),E0 (ESym "p_brand1")]
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QGroup \n        [(ESym \"tmpSym0\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\")))),\n         (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n         (ESym \"p_brand1\",E0 (NAggr AggrFirst (E0 (ESym \"p_brand1\"))))] \n        [E0 (ESym \"d_year\"),E0 (ESym \"p_brand1\")]\n    ]))" << std::endl;
  {
    auto operation = mkAggregation<CallableClass27, CallableClass29>(Just<const std::string>("/tmp/fluidb_store/data90.dat"), Just<const std::string>("/tmp/fluidb_store/data50.dat"), "/tmp/fluidb_store/data50.dat");
    operation.run();
    operation.print_output(10);
  }
  std::cout << "ForwardTrigger: (Just (Right [QSort [E0 (ESym \"d_year\"),E0 (ESym \"p_brand1\")]]))" << std::endl;
  {
    auto operation = mkSort<CallableClass31>(Just<const std::string>("/tmp/fluidb_store/data91.dat"), Just<const std::string>("/tmp/fluidb_store/data90.dat"), "/tmp/fluidb_store/data90.dat");
    operation.run();
    operation.print_output(10);
  }
  report_counters();
  return 0;
}
