#include <array>

#include <string>

#include <codegen.hh>
class Record4 {
 public:
  Record4(unsigned __sym__0___45_532509241117904863, fluidb_string<15> __sym__0__6879476602096058762, unsigned __sym__0__6336215024333455337) : sym__0___45_532509241117904863(__sym__0___45_532509241117904863), sym__0__6879476602096058762(__sym__0__6879476602096058762), sym__0__6336215024333455337(__sym__0__6336215024333455337)
  {
  }
  Record4() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_532509241117904863 << " | " << arrToString(sym__0__6879476602096058762) << " | " << sym__0__6336215024333455337;
    return o.str();
  }
  bool operator <(const Record4& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 < sym__0___45_532509241117904863 && (otherRec.sym__0__6879476602096058762 < sym__0__6879476602096058762 && otherRec.sym__0__6336215024333455337 < sym__0__6336215024333455337));
  }
  bool operator ==(const Record4& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 == sym__0___45_532509241117904863 && (otherRec.sym__0__6879476602096058762 == sym__0__6879476602096058762 && otherRec.sym__0__6336215024333455337 == sym__0__6336215024333455337));
  }
  bool operator !=(const Record4& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 != sym__0___45_532509241117904863 || (otherRec.sym__0__6879476602096058762 != sym__0__6879476602096058762 || otherRec.sym__0__6336215024333455337 != sym__0__6336215024333455337));
  }
  unsigned sym__0___45_532509241117904863;
  fluidb_string<15> sym__0__6879476602096058762;
  unsigned sym__0__6336215024333455337;
 private:
};


class Record6 {
 public:
  Record6(unsigned __sym__0__751349491586783291, fluidb_string<18> __sym__0__354510891937955499, fluidb_string<9> __sym__0__8685870419913255269, fluidb_string<9> __sym__0___45_1685896364158718066, unsigned __sym__0___45_5677596107407519400, unsigned __sym__0__861815074445021598, fluidb_string<7> __sym__0___45_3872891870093673981, unsigned __sym__0___45_6241898377327069772, unsigned __sym__0__642504737957706403, unsigned __sym__0___45_1374976708771691557, unsigned __sym__0__2339057656064903933, unsigned __sym__0__89048769271346350, fluidb_string<15> __sym__0__6426708041019551759, fluidb_string<2> __sym__0__7008835179244010327, fluidb_string<2> __sym__0___45_4323628884972846406, fluidb_string<2> __sym__0__7828159490610995250, fluidb_string<2> __sym__0__2257718864796675488, unsigned __sym__0__730109080165272259, fluidb_string<18> __sym__0___45_8476449300885475093, fluidb_string<40> __sym__0___45_991149214691090239, fluidb_string<11> __sym__0___45_2212122284055066105, fluidb_string<15> __sym__0___45_2044948362686327715, fluidb_string<13> __sym__0__3321043677072918300, fluidb_string<15> __sym__0___45_226399795464070293, fluidb_string<21> __sym__0__7848733459393176335, unsigned __sym__0___45_4488020782418924777, int __sym__0___45_6919306960004101059, unsigned __sym__0__6018430784935315013, unsigned __sym__0___45_140673424384154541, unsigned __sym__0___45_6038639548629345048, unsigned __sym__0__1559790869847058897, fluidb_string<21> __sym__0___45_4352805721407037080, unsigned __sym__0__4062351712071543146, fluidb_string<10> __sym__0___45_6018880488104713787, unsigned __sym__0___45_6835853099986992139, double __sym__0___45_8089668391442329833, unsigned __sym__0___45_8717135147929398223, double __sym__0___45_7475819144393673057, unsigned __sym__0__9142595129731966875, unsigned __sym__0__2065559644984295980, double __sym__0__2460723449183532278, fluidb_string<13> __sym__0__470592171585028734, unsigned __sym__0__4356580487975201936, fluidb_string<25> __sym__0___45_9184441323043515765, fluidb_string<40> __sym__0__6618707433631942345, fluidb_string<16> __sym__0___45_6275907539891917001, fluidb_string<16> __sym__0___45_2055641227140571803, fluidb_string<13> __sym__0__2004584544714042516, fluidb_string<15> __sym__0__4525776177764059147, unsigned __sym__0__8256595161360863541, fluidb_string<55> __sym__0__2419198459165298437, fluidb_string<25> __sym__0___45_5966236615078693830, fluidb_string<7> __sym__0___45_1194673352705657408, fluidb_string<10> __sym__0__1650700319641029258, fluidb_string<11> __sym__0___45_5413060736990914554, fluidb_string<25> __sym__0__5395318601550732180, unsigned __sym__0___45_4041750310509064417, fluidb_string<10> __sym__0___45_6998494795726951254) : sym__0__751349491586783291(__sym__0__751349491586783291), sym__0__354510891937955499(__sym__0__354510891937955499), sym__0__8685870419913255269(__sym__0__8685870419913255269), sym__0___45_1685896364158718066(__sym__0___45_1685896364158718066), sym__0___45_5677596107407519400(__sym__0___45_5677596107407519400), sym__0__861815074445021598(__sym__0__861815074445021598), sym__0___45_3872891870093673981(__sym__0___45_3872891870093673981), sym__0___45_6241898377327069772(__sym__0___45_6241898377327069772), sym__0__642504737957706403(__sym__0__642504737957706403), sym__0___45_1374976708771691557(__sym__0___45_1374976708771691557), sym__0__2339057656064903933(__sym__0__2339057656064903933), sym__0__89048769271346350(__sym__0__89048769271346350), sym__0__6426708041019551759(__sym__0__6426708041019551759), sym__0__7008835179244010327(__sym__0__7008835179244010327), sym__0___45_4323628884972846406(__sym__0___45_4323628884972846406), sym__0__7828159490610995250(__sym__0__7828159490610995250), sym__0__2257718864796675488(__sym__0__2257718864796675488), sym__0__730109080165272259(__sym__0__730109080165272259), sym__0___45_8476449300885475093(__sym__0___45_8476449300885475093), sym__0___45_991149214691090239(__sym__0___45_991149214691090239), sym__0___45_2212122284055066105(__sym__0___45_2212122284055066105), sym__0___45_2044948362686327715(__sym__0___45_2044948362686327715), sym__0__3321043677072918300(__sym__0__3321043677072918300), sym__0___45_226399795464070293(__sym__0___45_226399795464070293), sym__0__7848733459393176335(__sym__0__7848733459393176335), sym__0___45_4488020782418924777(__sym__0___45_4488020782418924777), sym__0___45_6919306960004101059(__sym__0___45_6919306960004101059), sym__0__6018430784935315013(__sym__0__6018430784935315013), sym__0___45_140673424384154541(__sym__0___45_140673424384154541), sym__0___45_6038639548629345048(__sym__0___45_6038639548629345048), sym__0__1559790869847058897(__sym__0__1559790869847058897), sym__0___45_4352805721407037080(__sym__0___45_4352805721407037080), sym__0__4062351712071543146(__sym__0__4062351712071543146), sym__0___45_6018880488104713787(__sym__0___45_6018880488104713787), sym__0___45_6835853099986992139(__sym__0___45_6835853099986992139), sym__0___45_8089668391442329833(__sym__0___45_8089668391442329833), sym__0___45_8717135147929398223(__sym__0___45_8717135147929398223), sym__0___45_7475819144393673057(__sym__0___45_7475819144393673057), sym__0__9142595129731966875(__sym__0__9142595129731966875), sym__0__2065559644984295980(__sym__0__2065559644984295980), sym__0__2460723449183532278(__sym__0__2460723449183532278), sym__0__470592171585028734(__sym__0__470592171585028734), sym__0__4356580487975201936(__sym__0__4356580487975201936), sym__0___45_9184441323043515765(__sym__0___45_9184441323043515765), sym__0__6618707433631942345(__sym__0__6618707433631942345), sym__0___45_6275907539891917001(__sym__0___45_6275907539891917001), sym__0___45_2055641227140571803(__sym__0___45_2055641227140571803), sym__0__2004584544714042516(__sym__0__2004584544714042516), sym__0__4525776177764059147(__sym__0__4525776177764059147), sym__0__8256595161360863541(__sym__0__8256595161360863541), sym__0__2419198459165298437(__sym__0__2419198459165298437), sym__0___45_5966236615078693830(__sym__0___45_5966236615078693830), sym__0___45_1194673352705657408(__sym__0___45_1194673352705657408), sym__0__1650700319641029258(__sym__0__1650700319641029258), sym__0___45_5413060736990914554(__sym__0___45_5413060736990914554), sym__0__5395318601550732180(__sym__0__5395318601550732180), sym__0___45_4041750310509064417(__sym__0___45_4041750310509064417), sym__0___45_6998494795726951254(__sym__0___45_6998494795726951254)
  {
  }
  Record6() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__751349491586783291 << " | " << arrToString(sym__0__354510891937955499) << " | " << arrToString(sym__0__8685870419913255269) << " | " << arrToString(sym__0___45_1685896364158718066) << " | " << sym__0___45_5677596107407519400 << " | " << sym__0__861815074445021598 << " | " << arrToString(sym__0___45_3872891870093673981) << " | " << sym__0___45_6241898377327069772 << " | " << sym__0__642504737957706403 << " | " << sym__0___45_1374976708771691557 << " | " << sym__0__2339057656064903933 << " | " << sym__0__89048769271346350 << " | " << arrToString(sym__0__6426708041019551759) << " | " << arrToString(sym__0__7008835179244010327) << " | " << arrToString(sym__0___45_4323628884972846406) << " | " << arrToString(sym__0__7828159490610995250) << " | " << arrToString(sym__0__2257718864796675488) << " | " << sym__0__730109080165272259 << " | " << arrToString(sym__0___45_8476449300885475093) << " | " << arrToString(sym__0___45_991149214691090239) << " | " << arrToString(sym__0___45_2212122284055066105) << " | " << arrToString(sym__0___45_2044948362686327715) << " | " << arrToString(sym__0__3321043677072918300) << " | " << arrToString(sym__0___45_226399795464070293) << " | " << arrToString(sym__0__7848733459393176335) << " | " << sym__0___45_4488020782418924777 << " | " << sym__0___45_6919306960004101059 << " | " << sym__0__6018430784935315013 << " | " << sym__0___45_140673424384154541 << " | " << sym__0___45_6038639548629345048 << " | " << sym__0__1559790869847058897 << " | " << arrToString(sym__0___45_4352805721407037080) << " | " << sym__0__4062351712071543146 << " | " << arrToString(sym__0___45_6018880488104713787) << " | " << sym__0___45_6835853099986992139 << " | " << sym__0___45_8089668391442329833 << " | " << sym__0___45_8717135147929398223 << " | " << sym__0___45_7475819144393673057 << " | " << sym__0__9142595129731966875 << " | " << sym__0__2065559644984295980 << " | " << sym__0__2460723449183532278 << " | " << arrToString(sym__0__470592171585028734) << " | " << sym__0__4356580487975201936 << " | " << arrToString(sym__0___45_9184441323043515765) << " | " << arrToString(sym__0__6618707433631942345) << " | " << arrToString(sym__0___45_6275907539891917001) << " | " << arrToString(sym__0___45_2055641227140571803) << " | " << arrToString(sym__0__2004584544714042516) << " | " << arrToString(sym__0__4525776177764059147) << " | " << sym__0__8256595161360863541 << " | " << arrToString(sym__0__2419198459165298437) << " | " << arrToString(sym__0___45_5966236615078693830) << " | " << arrToString(sym__0___45_1194673352705657408) << " | " << arrToString(sym__0__1650700319641029258) << " | " << arrToString(sym__0___45_5413060736990914554) << " | " << arrToString(sym__0__5395318601550732180) << " | " << sym__0___45_4041750310509064417 << " | " << arrToString(sym__0___45_6998494795726951254);
    return o.str();
  }
  bool operator <(const Record6& otherRec) const{
    return (otherRec.sym__0__751349491586783291 < sym__0__751349491586783291 && (otherRec.sym__0__354510891937955499 < sym__0__354510891937955499 && (otherRec.sym__0__8685870419913255269 < sym__0__8685870419913255269 && (otherRec.sym__0___45_1685896364158718066 < sym__0___45_1685896364158718066 && (otherRec.sym__0___45_5677596107407519400 < sym__0___45_5677596107407519400 && (otherRec.sym__0__861815074445021598 < sym__0__861815074445021598 && (otherRec.sym__0___45_3872891870093673981 < sym__0___45_3872891870093673981 && (otherRec.sym__0___45_6241898377327069772 < sym__0___45_6241898377327069772 && (otherRec.sym__0__642504737957706403 < sym__0__642504737957706403 && (otherRec.sym__0___45_1374976708771691557 < sym__0___45_1374976708771691557 && (otherRec.sym__0__2339057656064903933 < sym__0__2339057656064903933 && (otherRec.sym__0__89048769271346350 < sym__0__89048769271346350 && (otherRec.sym__0__6426708041019551759 < sym__0__6426708041019551759 && (otherRec.sym__0__7008835179244010327 < sym__0__7008835179244010327 && (otherRec.sym__0___45_4323628884972846406 < sym__0___45_4323628884972846406 && (otherRec.sym__0__7828159490610995250 < sym__0__7828159490610995250 && (otherRec.sym__0__2257718864796675488 < sym__0__2257718864796675488 && (otherRec.sym__0__730109080165272259 < sym__0__730109080165272259 && (otherRec.sym__0___45_8476449300885475093 < sym__0___45_8476449300885475093 && (otherRec.sym__0___45_991149214691090239 < sym__0___45_991149214691090239 && (otherRec.sym__0___45_2212122284055066105 < sym__0___45_2212122284055066105 && (otherRec.sym__0___45_2044948362686327715 < sym__0___45_2044948362686327715 && (otherRec.sym__0__3321043677072918300 < sym__0__3321043677072918300 && (otherRec.sym__0___45_226399795464070293 < sym__0___45_226399795464070293 && (otherRec.sym__0__7848733459393176335 < sym__0__7848733459393176335 && (otherRec.sym__0___45_4488020782418924777 < sym__0___45_4488020782418924777 && (otherRec.sym__0___45_6919306960004101059 < sym__0___45_6919306960004101059 && (otherRec.sym__0__6018430784935315013 < sym__0__6018430784935315013 && (otherRec.sym__0___45_140673424384154541 < sym__0___45_140673424384154541 && (otherRec.sym__0___45_6038639548629345048 < sym__0___45_6038639548629345048 && (otherRec.sym__0__1559790869847058897 < sym__0__1559790869847058897 && (otherRec.sym__0___45_4352805721407037080 < sym__0___45_4352805721407037080 && (otherRec.sym__0__4062351712071543146 < sym__0__4062351712071543146 && (otherRec.sym__0___45_6018880488104713787 < sym__0___45_6018880488104713787 && (otherRec.sym__0___45_6835853099986992139 < sym__0___45_6835853099986992139 && (otherRec.sym__0___45_8089668391442329833 < sym__0___45_8089668391442329833 && (otherRec.sym__0___45_8717135147929398223 < sym__0___45_8717135147929398223 && (otherRec.sym__0___45_7475819144393673057 < sym__0___45_7475819144393673057 && (otherRec.sym__0__9142595129731966875 < sym__0__9142595129731966875 && (otherRec.sym__0__2065559644984295980 < sym__0__2065559644984295980 && (otherRec.sym__0__2460723449183532278 < sym__0__2460723449183532278 && (otherRec.sym__0__470592171585028734 < sym__0__470592171585028734 && (otherRec.sym__0__4356580487975201936 < sym__0__4356580487975201936 && (otherRec.sym__0___45_9184441323043515765 < sym__0___45_9184441323043515765 && (otherRec.sym__0__6618707433631942345 < sym__0__6618707433631942345 && (otherRec.sym__0___45_6275907539891917001 < sym__0___45_6275907539891917001 && (otherRec.sym__0___45_2055641227140571803 < sym__0___45_2055641227140571803 && (otherRec.sym__0__2004584544714042516 < sym__0__2004584544714042516 && (otherRec.sym__0__4525776177764059147 < sym__0__4525776177764059147 && (otherRec.sym__0__8256595161360863541 < sym__0__8256595161360863541 && (otherRec.sym__0__2419198459165298437 < sym__0__2419198459165298437 && (otherRec.sym__0___45_5966236615078693830 < sym__0___45_5966236615078693830 && (otherRec.sym__0___45_1194673352705657408 < sym__0___45_1194673352705657408 && (otherRec.sym__0__1650700319641029258 < sym__0__1650700319641029258 && (otherRec.sym__0___45_5413060736990914554 < sym__0___45_5413060736990914554 && (otherRec.sym__0__5395318601550732180 < sym__0__5395318601550732180 && (otherRec.sym__0___45_4041750310509064417 < sym__0___45_4041750310509064417 && otherRec.sym__0___45_6998494795726951254 < sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record6& otherRec) const{
    return (otherRec.sym__0__751349491586783291 == sym__0__751349491586783291 && (otherRec.sym__0__354510891937955499 == sym__0__354510891937955499 && (otherRec.sym__0__8685870419913255269 == sym__0__8685870419913255269 && (otherRec.sym__0___45_1685896364158718066 == sym__0___45_1685896364158718066 && (otherRec.sym__0___45_5677596107407519400 == sym__0___45_5677596107407519400 && (otherRec.sym__0__861815074445021598 == sym__0__861815074445021598 && (otherRec.sym__0___45_3872891870093673981 == sym__0___45_3872891870093673981 && (otherRec.sym__0___45_6241898377327069772 == sym__0___45_6241898377327069772 && (otherRec.sym__0__642504737957706403 == sym__0__642504737957706403 && (otherRec.sym__0___45_1374976708771691557 == sym__0___45_1374976708771691557 && (otherRec.sym__0__2339057656064903933 == sym__0__2339057656064903933 && (otherRec.sym__0__89048769271346350 == sym__0__89048769271346350 && (otherRec.sym__0__6426708041019551759 == sym__0__6426708041019551759 && (otherRec.sym__0__7008835179244010327 == sym__0__7008835179244010327 && (otherRec.sym__0___45_4323628884972846406 == sym__0___45_4323628884972846406 && (otherRec.sym__0__7828159490610995250 == sym__0__7828159490610995250 && (otherRec.sym__0__2257718864796675488 == sym__0__2257718864796675488 && (otherRec.sym__0__730109080165272259 == sym__0__730109080165272259 && (otherRec.sym__0___45_8476449300885475093 == sym__0___45_8476449300885475093 && (otherRec.sym__0___45_991149214691090239 == sym__0___45_991149214691090239 && (otherRec.sym__0___45_2212122284055066105 == sym__0___45_2212122284055066105 && (otherRec.sym__0___45_2044948362686327715 == sym__0___45_2044948362686327715 && (otherRec.sym__0__3321043677072918300 == sym__0__3321043677072918300 && (otherRec.sym__0___45_226399795464070293 == sym__0___45_226399795464070293 && (otherRec.sym__0__7848733459393176335 == sym__0__7848733459393176335 && (otherRec.sym__0___45_4488020782418924777 == sym__0___45_4488020782418924777 && (otherRec.sym__0___45_6919306960004101059 == sym__0___45_6919306960004101059 && (otherRec.sym__0__6018430784935315013 == sym__0__6018430784935315013 && (otherRec.sym__0___45_140673424384154541 == sym__0___45_140673424384154541 && (otherRec.sym__0___45_6038639548629345048 == sym__0___45_6038639548629345048 && (otherRec.sym__0__1559790869847058897 == sym__0__1559790869847058897 && (otherRec.sym__0___45_4352805721407037080 == sym__0___45_4352805721407037080 && (otherRec.sym__0__4062351712071543146 == sym__0__4062351712071543146 && (otherRec.sym__0___45_6018880488104713787 == sym__0___45_6018880488104713787 && (otherRec.sym__0___45_6835853099986992139 == sym__0___45_6835853099986992139 && (otherRec.sym__0___45_8089668391442329833 == sym__0___45_8089668391442329833 && (otherRec.sym__0___45_8717135147929398223 == sym__0___45_8717135147929398223 && (otherRec.sym__0___45_7475819144393673057 == sym__0___45_7475819144393673057 && (otherRec.sym__0__9142595129731966875 == sym__0__9142595129731966875 && (otherRec.sym__0__2065559644984295980 == sym__0__2065559644984295980 && (otherRec.sym__0__2460723449183532278 == sym__0__2460723449183532278 && (otherRec.sym__0__470592171585028734 == sym__0__470592171585028734 && (otherRec.sym__0__4356580487975201936 == sym__0__4356580487975201936 && (otherRec.sym__0___45_9184441323043515765 == sym__0___45_9184441323043515765 && (otherRec.sym__0__6618707433631942345 == sym__0__6618707433631942345 && (otherRec.sym__0___45_6275907539891917001 == sym__0___45_6275907539891917001 && (otherRec.sym__0___45_2055641227140571803 == sym__0___45_2055641227140571803 && (otherRec.sym__0__2004584544714042516 == sym__0__2004584544714042516 && (otherRec.sym__0__4525776177764059147 == sym__0__4525776177764059147 && (otherRec.sym__0__8256595161360863541 == sym__0__8256595161360863541 && (otherRec.sym__0__2419198459165298437 == sym__0__2419198459165298437 && (otherRec.sym__0___45_5966236615078693830 == sym__0___45_5966236615078693830 && (otherRec.sym__0___45_1194673352705657408 == sym__0___45_1194673352705657408 && (otherRec.sym__0__1650700319641029258 == sym__0__1650700319641029258 && (otherRec.sym__0___45_5413060736990914554 == sym__0___45_5413060736990914554 && (otherRec.sym__0__5395318601550732180 == sym__0__5395318601550732180 && (otherRec.sym__0___45_4041750310509064417 == sym__0___45_4041750310509064417 && otherRec.sym__0___45_6998494795726951254 == sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record6& otherRec) const{
    return (otherRec.sym__0__751349491586783291 != sym__0__751349491586783291 || (otherRec.sym__0__354510891937955499 != sym__0__354510891937955499 || (otherRec.sym__0__8685870419913255269 != sym__0__8685870419913255269 || (otherRec.sym__0___45_1685896364158718066 != sym__0___45_1685896364158718066 || (otherRec.sym__0___45_5677596107407519400 != sym__0___45_5677596107407519400 || (otherRec.sym__0__861815074445021598 != sym__0__861815074445021598 || (otherRec.sym__0___45_3872891870093673981 != sym__0___45_3872891870093673981 || (otherRec.sym__0___45_6241898377327069772 != sym__0___45_6241898377327069772 || (otherRec.sym__0__642504737957706403 != sym__0__642504737957706403 || (otherRec.sym__0___45_1374976708771691557 != sym__0___45_1374976708771691557 || (otherRec.sym__0__2339057656064903933 != sym__0__2339057656064903933 || (otherRec.sym__0__89048769271346350 != sym__0__89048769271346350 || (otherRec.sym__0__6426708041019551759 != sym__0__6426708041019551759 || (otherRec.sym__0__7008835179244010327 != sym__0__7008835179244010327 || (otherRec.sym__0___45_4323628884972846406 != sym__0___45_4323628884972846406 || (otherRec.sym__0__7828159490610995250 != sym__0__7828159490610995250 || (otherRec.sym__0__2257718864796675488 != sym__0__2257718864796675488 || (otherRec.sym__0__730109080165272259 != sym__0__730109080165272259 || (otherRec.sym__0___45_8476449300885475093 != sym__0___45_8476449300885475093 || (otherRec.sym__0___45_991149214691090239 != sym__0___45_991149214691090239 || (otherRec.sym__0___45_2212122284055066105 != sym__0___45_2212122284055066105 || (otherRec.sym__0___45_2044948362686327715 != sym__0___45_2044948362686327715 || (otherRec.sym__0__3321043677072918300 != sym__0__3321043677072918300 || (otherRec.sym__0___45_226399795464070293 != sym__0___45_226399795464070293 || (otherRec.sym__0__7848733459393176335 != sym__0__7848733459393176335 || (otherRec.sym__0___45_4488020782418924777 != sym__0___45_4488020782418924777 || (otherRec.sym__0___45_6919306960004101059 != sym__0___45_6919306960004101059 || (otherRec.sym__0__6018430784935315013 != sym__0__6018430784935315013 || (otherRec.sym__0___45_140673424384154541 != sym__0___45_140673424384154541 || (otherRec.sym__0___45_6038639548629345048 != sym__0___45_6038639548629345048 || (otherRec.sym__0__1559790869847058897 != sym__0__1559790869847058897 || (otherRec.sym__0___45_4352805721407037080 != sym__0___45_4352805721407037080 || (otherRec.sym__0__4062351712071543146 != sym__0__4062351712071543146 || (otherRec.sym__0___45_6018880488104713787 != sym__0___45_6018880488104713787 || (otherRec.sym__0___45_6835853099986992139 != sym__0___45_6835853099986992139 || (otherRec.sym__0___45_8089668391442329833 != sym__0___45_8089668391442329833 || (otherRec.sym__0___45_8717135147929398223 != sym__0___45_8717135147929398223 || (otherRec.sym__0___45_7475819144393673057 != sym__0___45_7475819144393673057 || (otherRec.sym__0__9142595129731966875 != sym__0__9142595129731966875 || (otherRec.sym__0__2065559644984295980 != sym__0__2065559644984295980 || (otherRec.sym__0__2460723449183532278 != sym__0__2460723449183532278 || (otherRec.sym__0__470592171585028734 != sym__0__470592171585028734 || (otherRec.sym__0__4356580487975201936 != sym__0__4356580487975201936 || (otherRec.sym__0___45_9184441323043515765 != sym__0___45_9184441323043515765 || (otherRec.sym__0__6618707433631942345 != sym__0__6618707433631942345 || (otherRec.sym__0___45_6275907539891917001 != sym__0___45_6275907539891917001 || (otherRec.sym__0___45_2055641227140571803 != sym__0___45_2055641227140571803 || (otherRec.sym__0__2004584544714042516 != sym__0__2004584544714042516 || (otherRec.sym__0__4525776177764059147 != sym__0__4525776177764059147 || (otherRec.sym__0__8256595161360863541 != sym__0__8256595161360863541 || (otherRec.sym__0__2419198459165298437 != sym__0__2419198459165298437 || (otherRec.sym__0___45_5966236615078693830 != sym__0___45_5966236615078693830 || (otherRec.sym__0___45_1194673352705657408 != sym__0___45_1194673352705657408 || (otherRec.sym__0__1650700319641029258 != sym__0__1650700319641029258 || (otherRec.sym__0___45_5413060736990914554 != sym__0___45_5413060736990914554 || (otherRec.sym__0__5395318601550732180 != sym__0__5395318601550732180 || (otherRec.sym__0___45_4041750310509064417 != sym__0___45_4041750310509064417 || otherRec.sym__0___45_6998494795726951254 != sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__751349491586783291;
  fluidb_string<18> sym__0__354510891937955499;
  fluidb_string<9> sym__0__8685870419913255269;
  fluidb_string<9> sym__0___45_1685896364158718066;
  unsigned sym__0___45_5677596107407519400;
  unsigned sym__0__861815074445021598;
  fluidb_string<7> sym__0___45_3872891870093673981;
  unsigned sym__0___45_6241898377327069772;
  unsigned sym__0__642504737957706403;
  unsigned sym__0___45_1374976708771691557;
  unsigned sym__0__2339057656064903933;
  unsigned sym__0__89048769271346350;
  fluidb_string<15> sym__0__6426708041019551759;
  fluidb_string<2> sym__0__7008835179244010327;
  fluidb_string<2> sym__0___45_4323628884972846406;
  fluidb_string<2> sym__0__7828159490610995250;
  fluidb_string<2> sym__0__2257718864796675488;
  unsigned sym__0__730109080165272259;
  fluidb_string<18> sym__0___45_8476449300885475093;
  fluidb_string<40> sym__0___45_991149214691090239;
  fluidb_string<11> sym__0___45_2212122284055066105;
  fluidb_string<15> sym__0___45_2044948362686327715;
  fluidb_string<13> sym__0__3321043677072918300;
  fluidb_string<15> sym__0___45_226399795464070293;
  fluidb_string<21> sym__0__7848733459393176335;
  unsigned sym__0___45_4488020782418924777;
  int sym__0___45_6919306960004101059;
  unsigned sym__0__6018430784935315013;
  unsigned sym__0___45_140673424384154541;
  unsigned sym__0___45_6038639548629345048;
  unsigned sym__0__1559790869847058897;
  fluidb_string<21> sym__0___45_4352805721407037080;
  unsigned sym__0__4062351712071543146;
  fluidb_string<10> sym__0___45_6018880488104713787;
  unsigned sym__0___45_6835853099986992139;
  double sym__0___45_8089668391442329833;
  unsigned sym__0___45_8717135147929398223;
  double sym__0___45_7475819144393673057;
  unsigned sym__0__9142595129731966875;
  unsigned sym__0__2065559644984295980;
  double sym__0__2460723449183532278;
  fluidb_string<13> sym__0__470592171585028734;
  unsigned sym__0__4356580487975201936;
  fluidb_string<25> sym__0___45_9184441323043515765;
  fluidb_string<40> sym__0__6618707433631942345;
  fluidb_string<16> sym__0___45_6275907539891917001;
  fluidb_string<16> sym__0___45_2055641227140571803;
  fluidb_string<13> sym__0__2004584544714042516;
  fluidb_string<15> sym__0__4525776177764059147;
  unsigned sym__0__8256595161360863541;
  fluidb_string<55> sym__0__2419198459165298437;
  fluidb_string<25> sym__0___45_5966236615078693830;
  fluidb_string<7> sym__0___45_1194673352705657408;
  fluidb_string<10> sym__0__1650700319641029258;
  fluidb_string<11> sym__0___45_5413060736990914554;
  fluidb_string<25> sym__0__5395318601550732180;
  unsigned sym__0___45_4041750310509064417;
  fluidb_string<10> sym__0___45_6998494795726951254;
 private:
};


class Record1 {
 public:
  Record1(unsigned __sym__0___45_2544647080140891779, fluidb_string<18> __sym__0___45_4581931629044260499, fluidb_string<9> __sym__0__3511844764913402723, fluidb_string<9> __sym__0__2581750769096843740, unsigned __sym__0___45_6031048599860414622, unsigned __sym__0__8084343433543173228, fluidb_string<7> __sym__0___45_3664881058840515771, unsigned __sym__0___45_1924199962958349658, unsigned __sym__0__7769469128992998949, unsigned __sym__0__7818554603565865821, unsigned __sym__0__4360634980582143419, unsigned __sym__0___45_7492593539880285892, fluidb_string<15> __sym__0__1706094538935295417, fluidb_string<2> __sym__0__6114638120282452033, fluidb_string<2> __sym__0___45_78261027814563536, fluidb_string<2> __sym__0__2648420561950371368, fluidb_string<2> __sym__0__3807806894063626346, unsigned __sym__0__3010211381236373125, fluidb_string<18> __sym__0__3300613616795216173, fluidb_string<40> __sym__0___45_3130123223234281513, fluidb_string<11> __sym__0__8189415442579395633, fluidb_string<15> __sym__0__3248231192614790363, fluidb_string<13> __sym__0__1734593865430170446, fluidb_string<15> __sym__0___45_8167422549222682195, fluidb_string<21> __sym__0__2936268515493900473, unsigned __sym__0__2661490882974477953, int __sym__0___45_6833151998909895557, unsigned __sym__0___45_6379152824683587325, unsigned __sym__0__3389381886574775957, unsigned __sym__0___45_3006394417042584462, unsigned __sym__0__5708853396861436519, fluidb_string<21> __sym__0__2510302245253987058, unsigned __sym__0___45_8268616720440236384, fluidb_string<10> __sym__0___45_2145747097567105917, unsigned __sym__0___45_6747202196090936717, double __sym__0___45_980129616638612863, unsigned __sym__0__7935787287177824775, double __sym__0___45_1765426731373793463, unsigned __sym__0__2312911666975909277, unsigned __sym__0__8713898721580785886, double __sym__0__5274362417922015940, fluidb_string<13> __sym__0___45_5950462958936866676, unsigned __sym__0__5599391359954735578, fluidb_string<25> __sym__0__4014184007857207821, fluidb_string<40> __sym__0___45_7146441527183610849, fluidb_string<16> __sym__0___45_8891100078062559775, fluidb_string<16> __sym__0___45_5365202057839317149, fluidb_string<13> __sym__0__5177313860806756678, fluidb_string<15> __sym__0___45_6139660049171508851, unsigned __sym__0__5600261570499839795, fluidb_string<55> __sym__0__7033726162709406531, fluidb_string<25> __sym__0___45_2028921051824210768, fluidb_string<7> __sym__0__1510822012344354762, fluidb_string<10> __sym__0___45_2462553484168592128, fluidb_string<11> __sym__0__6826615390864986324, fluidb_string<25> __sym__0__1653057618405204038, unsigned __sym__0__1042393484014954953, fluidb_string<10> __sym__0___45_4797345940361177504) : sym__0___45_2544647080140891779(__sym__0___45_2544647080140891779), sym__0___45_4581931629044260499(__sym__0___45_4581931629044260499), sym__0__3511844764913402723(__sym__0__3511844764913402723), sym__0__2581750769096843740(__sym__0__2581750769096843740), sym__0___45_6031048599860414622(__sym__0___45_6031048599860414622), sym__0__8084343433543173228(__sym__0__8084343433543173228), sym__0___45_3664881058840515771(__sym__0___45_3664881058840515771), sym__0___45_1924199962958349658(__sym__0___45_1924199962958349658), sym__0__7769469128992998949(__sym__0__7769469128992998949), sym__0__7818554603565865821(__sym__0__7818554603565865821), sym__0__4360634980582143419(__sym__0__4360634980582143419), sym__0___45_7492593539880285892(__sym__0___45_7492593539880285892), sym__0__1706094538935295417(__sym__0__1706094538935295417), sym__0__6114638120282452033(__sym__0__6114638120282452033), sym__0___45_78261027814563536(__sym__0___45_78261027814563536), sym__0__2648420561950371368(__sym__0__2648420561950371368), sym__0__3807806894063626346(__sym__0__3807806894063626346), sym__0__3010211381236373125(__sym__0__3010211381236373125), sym__0__3300613616795216173(__sym__0__3300613616795216173), sym__0___45_3130123223234281513(__sym__0___45_3130123223234281513), sym__0__8189415442579395633(__sym__0__8189415442579395633), sym__0__3248231192614790363(__sym__0__3248231192614790363), sym__0__1734593865430170446(__sym__0__1734593865430170446), sym__0___45_8167422549222682195(__sym__0___45_8167422549222682195), sym__0__2936268515493900473(__sym__0__2936268515493900473), sym__0__2661490882974477953(__sym__0__2661490882974477953), sym__0___45_6833151998909895557(__sym__0___45_6833151998909895557), sym__0___45_6379152824683587325(__sym__0___45_6379152824683587325), sym__0__3389381886574775957(__sym__0__3389381886574775957), sym__0___45_3006394417042584462(__sym__0___45_3006394417042584462), sym__0__5708853396861436519(__sym__0__5708853396861436519), sym__0__2510302245253987058(__sym__0__2510302245253987058), sym__0___45_8268616720440236384(__sym__0___45_8268616720440236384), sym__0___45_2145747097567105917(__sym__0___45_2145747097567105917), sym__0___45_6747202196090936717(__sym__0___45_6747202196090936717), sym__0___45_980129616638612863(__sym__0___45_980129616638612863), sym__0__7935787287177824775(__sym__0__7935787287177824775), sym__0___45_1765426731373793463(__sym__0___45_1765426731373793463), sym__0__2312911666975909277(__sym__0__2312911666975909277), sym__0__8713898721580785886(__sym__0__8713898721580785886), sym__0__5274362417922015940(__sym__0__5274362417922015940), sym__0___45_5950462958936866676(__sym__0___45_5950462958936866676), sym__0__5599391359954735578(__sym__0__5599391359954735578), sym__0__4014184007857207821(__sym__0__4014184007857207821), sym__0___45_7146441527183610849(__sym__0___45_7146441527183610849), sym__0___45_8891100078062559775(__sym__0___45_8891100078062559775), sym__0___45_5365202057839317149(__sym__0___45_5365202057839317149), sym__0__5177313860806756678(__sym__0__5177313860806756678), sym__0___45_6139660049171508851(__sym__0___45_6139660049171508851), sym__0__5600261570499839795(__sym__0__5600261570499839795), sym__0__7033726162709406531(__sym__0__7033726162709406531), sym__0___45_2028921051824210768(__sym__0___45_2028921051824210768), sym__0__1510822012344354762(__sym__0__1510822012344354762), sym__0___45_2462553484168592128(__sym__0___45_2462553484168592128), sym__0__6826615390864986324(__sym__0__6826615390864986324), sym__0__1653057618405204038(__sym__0__1653057618405204038), sym__0__1042393484014954953(__sym__0__1042393484014954953), sym__0___45_4797345940361177504(__sym__0___45_4797345940361177504)
  {
  }
  Record1() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_2544647080140891779 << " | " << arrToString(sym__0___45_4581931629044260499) << " | " << arrToString(sym__0__3511844764913402723) << " | " << arrToString(sym__0__2581750769096843740) << " | " << sym__0___45_6031048599860414622 << " | " << sym__0__8084343433543173228 << " | " << arrToString(sym__0___45_3664881058840515771) << " | " << sym__0___45_1924199962958349658 << " | " << sym__0__7769469128992998949 << " | " << sym__0__7818554603565865821 << " | " << sym__0__4360634980582143419 << " | " << sym__0___45_7492593539880285892 << " | " << arrToString(sym__0__1706094538935295417) << " | " << arrToString(sym__0__6114638120282452033) << " | " << arrToString(sym__0___45_78261027814563536) << " | " << arrToString(sym__0__2648420561950371368) << " | " << arrToString(sym__0__3807806894063626346) << " | " << sym__0__3010211381236373125 << " | " << arrToString(sym__0__3300613616795216173) << " | " << arrToString(sym__0___45_3130123223234281513) << " | " << arrToString(sym__0__8189415442579395633) << " | " << arrToString(sym__0__3248231192614790363) << " | " << arrToString(sym__0__1734593865430170446) << " | " << arrToString(sym__0___45_8167422549222682195) << " | " << arrToString(sym__0__2936268515493900473) << " | " << sym__0__2661490882974477953 << " | " << sym__0___45_6833151998909895557 << " | " << sym__0___45_6379152824683587325 << " | " << sym__0__3389381886574775957 << " | " << sym__0___45_3006394417042584462 << " | " << sym__0__5708853396861436519 << " | " << arrToString(sym__0__2510302245253987058) << " | " << sym__0___45_8268616720440236384 << " | " << arrToString(sym__0___45_2145747097567105917) << " | " << sym__0___45_6747202196090936717 << " | " << sym__0___45_980129616638612863 << " | " << sym__0__7935787287177824775 << " | " << sym__0___45_1765426731373793463 << " | " << sym__0__2312911666975909277 << " | " << sym__0__8713898721580785886 << " | " << sym__0__5274362417922015940 << " | " << arrToString(sym__0___45_5950462958936866676) << " | " << sym__0__5599391359954735578 << " | " << arrToString(sym__0__4014184007857207821) << " | " << arrToString(sym__0___45_7146441527183610849) << " | " << arrToString(sym__0___45_8891100078062559775) << " | " << arrToString(sym__0___45_5365202057839317149) << " | " << arrToString(sym__0__5177313860806756678) << " | " << arrToString(sym__0___45_6139660049171508851) << " | " << sym__0__5600261570499839795 << " | " << arrToString(sym__0__7033726162709406531) << " | " << arrToString(sym__0___45_2028921051824210768) << " | " << arrToString(sym__0__1510822012344354762) << " | " << arrToString(sym__0___45_2462553484168592128) << " | " << arrToString(sym__0__6826615390864986324) << " | " << arrToString(sym__0__1653057618405204038) << " | " << sym__0__1042393484014954953 << " | " << arrToString(sym__0___45_4797345940361177504);
    return o.str();
  }
  bool operator <(const Record1& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 < sym__0___45_2544647080140891779 && (otherRec.sym__0___45_4581931629044260499 < sym__0___45_4581931629044260499 && (otherRec.sym__0__3511844764913402723 < sym__0__3511844764913402723 && (otherRec.sym__0__2581750769096843740 < sym__0__2581750769096843740 && (otherRec.sym__0___45_6031048599860414622 < sym__0___45_6031048599860414622 && (otherRec.sym__0__8084343433543173228 < sym__0__8084343433543173228 && (otherRec.sym__0___45_3664881058840515771 < sym__0___45_3664881058840515771 && (otherRec.sym__0___45_1924199962958349658 < sym__0___45_1924199962958349658 && (otherRec.sym__0__7769469128992998949 < sym__0__7769469128992998949 && (otherRec.sym__0__7818554603565865821 < sym__0__7818554603565865821 && (otherRec.sym__0__4360634980582143419 < sym__0__4360634980582143419 && (otherRec.sym__0___45_7492593539880285892 < sym__0___45_7492593539880285892 && (otherRec.sym__0__1706094538935295417 < sym__0__1706094538935295417 && (otherRec.sym__0__6114638120282452033 < sym__0__6114638120282452033 && (otherRec.sym__0___45_78261027814563536 < sym__0___45_78261027814563536 && (otherRec.sym__0__2648420561950371368 < sym__0__2648420561950371368 && (otherRec.sym__0__3807806894063626346 < sym__0__3807806894063626346 && (otherRec.sym__0__3010211381236373125 < sym__0__3010211381236373125 && (otherRec.sym__0__3300613616795216173 < sym__0__3300613616795216173 && (otherRec.sym__0___45_3130123223234281513 < sym__0___45_3130123223234281513 && (otherRec.sym__0__8189415442579395633 < sym__0__8189415442579395633 && (otherRec.sym__0__3248231192614790363 < sym__0__3248231192614790363 && (otherRec.sym__0__1734593865430170446 < sym__0__1734593865430170446 && (otherRec.sym__0___45_8167422549222682195 < sym__0___45_8167422549222682195 && (otherRec.sym__0__2936268515493900473 < sym__0__2936268515493900473 && (otherRec.sym__0__2661490882974477953 < sym__0__2661490882974477953 && (otherRec.sym__0___45_6833151998909895557 < sym__0___45_6833151998909895557 && (otherRec.sym__0___45_6379152824683587325 < sym__0___45_6379152824683587325 && (otherRec.sym__0__3389381886574775957 < sym__0__3389381886574775957 && (otherRec.sym__0___45_3006394417042584462 < sym__0___45_3006394417042584462 && (otherRec.sym__0__5708853396861436519 < sym__0__5708853396861436519 && (otherRec.sym__0__2510302245253987058 < sym__0__2510302245253987058 && (otherRec.sym__0___45_8268616720440236384 < sym__0___45_8268616720440236384 && (otherRec.sym__0___45_2145747097567105917 < sym__0___45_2145747097567105917 && (otherRec.sym__0___45_6747202196090936717 < sym__0___45_6747202196090936717 && (otherRec.sym__0___45_980129616638612863 < sym__0___45_980129616638612863 && (otherRec.sym__0__7935787287177824775 < sym__0__7935787287177824775 && (otherRec.sym__0___45_1765426731373793463 < sym__0___45_1765426731373793463 && (otherRec.sym__0__2312911666975909277 < sym__0__2312911666975909277 && (otherRec.sym__0__8713898721580785886 < sym__0__8713898721580785886 && (otherRec.sym__0__5274362417922015940 < sym__0__5274362417922015940 && (otherRec.sym__0___45_5950462958936866676 < sym__0___45_5950462958936866676 && (otherRec.sym__0__5599391359954735578 < sym__0__5599391359954735578 && (otherRec.sym__0__4014184007857207821 < sym__0__4014184007857207821 && (otherRec.sym__0___45_7146441527183610849 < sym__0___45_7146441527183610849 && (otherRec.sym__0___45_8891100078062559775 < sym__0___45_8891100078062559775 && (otherRec.sym__0___45_5365202057839317149 < sym__0___45_5365202057839317149 && (otherRec.sym__0__5177313860806756678 < sym__0__5177313860806756678 && (otherRec.sym__0___45_6139660049171508851 < sym__0___45_6139660049171508851 && (otherRec.sym__0__5600261570499839795 < sym__0__5600261570499839795 && (otherRec.sym__0__7033726162709406531 < sym__0__7033726162709406531 && (otherRec.sym__0___45_2028921051824210768 < sym__0___45_2028921051824210768 && (otherRec.sym__0__1510822012344354762 < sym__0__1510822012344354762 && (otherRec.sym__0___45_2462553484168592128 < sym__0___45_2462553484168592128 && (otherRec.sym__0__6826615390864986324 < sym__0__6826615390864986324 && (otherRec.sym__0__1653057618405204038 < sym__0__1653057618405204038 && (otherRec.sym__0__1042393484014954953 < sym__0__1042393484014954953 && otherRec.sym__0___45_4797345940361177504 < sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record1& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 == sym__0___45_2544647080140891779 && (otherRec.sym__0___45_4581931629044260499 == sym__0___45_4581931629044260499 && (otherRec.sym__0__3511844764913402723 == sym__0__3511844764913402723 && (otherRec.sym__0__2581750769096843740 == sym__0__2581750769096843740 && (otherRec.sym__0___45_6031048599860414622 == sym__0___45_6031048599860414622 && (otherRec.sym__0__8084343433543173228 == sym__0__8084343433543173228 && (otherRec.sym__0___45_3664881058840515771 == sym__0___45_3664881058840515771 && (otherRec.sym__0___45_1924199962958349658 == sym__0___45_1924199962958349658 && (otherRec.sym__0__7769469128992998949 == sym__0__7769469128992998949 && (otherRec.sym__0__7818554603565865821 == sym__0__7818554603565865821 && (otherRec.sym__0__4360634980582143419 == sym__0__4360634980582143419 && (otherRec.sym__0___45_7492593539880285892 == sym__0___45_7492593539880285892 && (otherRec.sym__0__1706094538935295417 == sym__0__1706094538935295417 && (otherRec.sym__0__6114638120282452033 == sym__0__6114638120282452033 && (otherRec.sym__0___45_78261027814563536 == sym__0___45_78261027814563536 && (otherRec.sym__0__2648420561950371368 == sym__0__2648420561950371368 && (otherRec.sym__0__3807806894063626346 == sym__0__3807806894063626346 && (otherRec.sym__0__3010211381236373125 == sym__0__3010211381236373125 && (otherRec.sym__0__3300613616795216173 == sym__0__3300613616795216173 && (otherRec.sym__0___45_3130123223234281513 == sym__0___45_3130123223234281513 && (otherRec.sym__0__8189415442579395633 == sym__0__8189415442579395633 && (otherRec.sym__0__3248231192614790363 == sym__0__3248231192614790363 && (otherRec.sym__0__1734593865430170446 == sym__0__1734593865430170446 && (otherRec.sym__0___45_8167422549222682195 == sym__0___45_8167422549222682195 && (otherRec.sym__0__2936268515493900473 == sym__0__2936268515493900473 && (otherRec.sym__0__2661490882974477953 == sym__0__2661490882974477953 && (otherRec.sym__0___45_6833151998909895557 == sym__0___45_6833151998909895557 && (otherRec.sym__0___45_6379152824683587325 == sym__0___45_6379152824683587325 && (otherRec.sym__0__3389381886574775957 == sym__0__3389381886574775957 && (otherRec.sym__0___45_3006394417042584462 == sym__0___45_3006394417042584462 && (otherRec.sym__0__5708853396861436519 == sym__0__5708853396861436519 && (otherRec.sym__0__2510302245253987058 == sym__0__2510302245253987058 && (otherRec.sym__0___45_8268616720440236384 == sym__0___45_8268616720440236384 && (otherRec.sym__0___45_2145747097567105917 == sym__0___45_2145747097567105917 && (otherRec.sym__0___45_6747202196090936717 == sym__0___45_6747202196090936717 && (otherRec.sym__0___45_980129616638612863 == sym__0___45_980129616638612863 && (otherRec.sym__0__7935787287177824775 == sym__0__7935787287177824775 && (otherRec.sym__0___45_1765426731373793463 == sym__0___45_1765426731373793463 && (otherRec.sym__0__2312911666975909277 == sym__0__2312911666975909277 && (otherRec.sym__0__8713898721580785886 == sym__0__8713898721580785886 && (otherRec.sym__0__5274362417922015940 == sym__0__5274362417922015940 && (otherRec.sym__0___45_5950462958936866676 == sym__0___45_5950462958936866676 && (otherRec.sym__0__5599391359954735578 == sym__0__5599391359954735578 && (otherRec.sym__0__4014184007857207821 == sym__0__4014184007857207821 && (otherRec.sym__0___45_7146441527183610849 == sym__0___45_7146441527183610849 && (otherRec.sym__0___45_8891100078062559775 == sym__0___45_8891100078062559775 && (otherRec.sym__0___45_5365202057839317149 == sym__0___45_5365202057839317149 && (otherRec.sym__0__5177313860806756678 == sym__0__5177313860806756678 && (otherRec.sym__0___45_6139660049171508851 == sym__0___45_6139660049171508851 && (otherRec.sym__0__5600261570499839795 == sym__0__5600261570499839795 && (otherRec.sym__0__7033726162709406531 == sym__0__7033726162709406531 && (otherRec.sym__0___45_2028921051824210768 == sym__0___45_2028921051824210768 && (otherRec.sym__0__1510822012344354762 == sym__0__1510822012344354762 && (otherRec.sym__0___45_2462553484168592128 == sym__0___45_2462553484168592128 && (otherRec.sym__0__6826615390864986324 == sym__0__6826615390864986324 && (otherRec.sym__0__1653057618405204038 == sym__0__1653057618405204038 && (otherRec.sym__0__1042393484014954953 == sym__0__1042393484014954953 && otherRec.sym__0___45_4797345940361177504 == sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record1& otherRec) const{
    return (otherRec.sym__0___45_2544647080140891779 != sym__0___45_2544647080140891779 || (otherRec.sym__0___45_4581931629044260499 != sym__0___45_4581931629044260499 || (otherRec.sym__0__3511844764913402723 != sym__0__3511844764913402723 || (otherRec.sym__0__2581750769096843740 != sym__0__2581750769096843740 || (otherRec.sym__0___45_6031048599860414622 != sym__0___45_6031048599860414622 || (otherRec.sym__0__8084343433543173228 != sym__0__8084343433543173228 || (otherRec.sym__0___45_3664881058840515771 != sym__0___45_3664881058840515771 || (otherRec.sym__0___45_1924199962958349658 != sym__0___45_1924199962958349658 || (otherRec.sym__0__7769469128992998949 != sym__0__7769469128992998949 || (otherRec.sym__0__7818554603565865821 != sym__0__7818554603565865821 || (otherRec.sym__0__4360634980582143419 != sym__0__4360634980582143419 || (otherRec.sym__0___45_7492593539880285892 != sym__0___45_7492593539880285892 || (otherRec.sym__0__1706094538935295417 != sym__0__1706094538935295417 || (otherRec.sym__0__6114638120282452033 != sym__0__6114638120282452033 || (otherRec.sym__0___45_78261027814563536 != sym__0___45_78261027814563536 || (otherRec.sym__0__2648420561950371368 != sym__0__2648420561950371368 || (otherRec.sym__0__3807806894063626346 != sym__0__3807806894063626346 || (otherRec.sym__0__3010211381236373125 != sym__0__3010211381236373125 || (otherRec.sym__0__3300613616795216173 != sym__0__3300613616795216173 || (otherRec.sym__0___45_3130123223234281513 != sym__0___45_3130123223234281513 || (otherRec.sym__0__8189415442579395633 != sym__0__8189415442579395633 || (otherRec.sym__0__3248231192614790363 != sym__0__3248231192614790363 || (otherRec.sym__0__1734593865430170446 != sym__0__1734593865430170446 || (otherRec.sym__0___45_8167422549222682195 != sym__0___45_8167422549222682195 || (otherRec.sym__0__2936268515493900473 != sym__0__2936268515493900473 || (otherRec.sym__0__2661490882974477953 != sym__0__2661490882974477953 || (otherRec.sym__0___45_6833151998909895557 != sym__0___45_6833151998909895557 || (otherRec.sym__0___45_6379152824683587325 != sym__0___45_6379152824683587325 || (otherRec.sym__0__3389381886574775957 != sym__0__3389381886574775957 || (otherRec.sym__0___45_3006394417042584462 != sym__0___45_3006394417042584462 || (otherRec.sym__0__5708853396861436519 != sym__0__5708853396861436519 || (otherRec.sym__0__2510302245253987058 != sym__0__2510302245253987058 || (otherRec.sym__0___45_8268616720440236384 != sym__0___45_8268616720440236384 || (otherRec.sym__0___45_2145747097567105917 != sym__0___45_2145747097567105917 || (otherRec.sym__0___45_6747202196090936717 != sym__0___45_6747202196090936717 || (otherRec.sym__0___45_980129616638612863 != sym__0___45_980129616638612863 || (otherRec.sym__0__7935787287177824775 != sym__0__7935787287177824775 || (otherRec.sym__0___45_1765426731373793463 != sym__0___45_1765426731373793463 || (otherRec.sym__0__2312911666975909277 != sym__0__2312911666975909277 || (otherRec.sym__0__8713898721580785886 != sym__0__8713898721580785886 || (otherRec.sym__0__5274362417922015940 != sym__0__5274362417922015940 || (otherRec.sym__0___45_5950462958936866676 != sym__0___45_5950462958936866676 || (otherRec.sym__0__5599391359954735578 != sym__0__5599391359954735578 || (otherRec.sym__0__4014184007857207821 != sym__0__4014184007857207821 || (otherRec.sym__0___45_7146441527183610849 != sym__0___45_7146441527183610849 || (otherRec.sym__0___45_8891100078062559775 != sym__0___45_8891100078062559775 || (otherRec.sym__0___45_5365202057839317149 != sym__0___45_5365202057839317149 || (otherRec.sym__0__5177313860806756678 != sym__0__5177313860806756678 || (otherRec.sym__0___45_6139660049171508851 != sym__0___45_6139660049171508851 || (otherRec.sym__0__5600261570499839795 != sym__0__5600261570499839795 || (otherRec.sym__0__7033726162709406531 != sym__0__7033726162709406531 || (otherRec.sym__0___45_2028921051824210768 != sym__0___45_2028921051824210768 || (otherRec.sym__0__1510822012344354762 != sym__0__1510822012344354762 || (otherRec.sym__0___45_2462553484168592128 != sym__0___45_2462553484168592128 || (otherRec.sym__0__6826615390864986324 != sym__0__6826615390864986324 || (otherRec.sym__0__1653057618405204038 != sym__0__1653057618405204038 || (otherRec.sym__0__1042393484014954953 != sym__0__1042393484014954953 || otherRec.sym__0___45_4797345940361177504 != sym__0___45_4797345940361177504)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_2544647080140891779;
  fluidb_string<18> sym__0___45_4581931629044260499;
  fluidb_string<9> sym__0__3511844764913402723;
  fluidb_string<9> sym__0__2581750769096843740;
  unsigned sym__0___45_6031048599860414622;
  unsigned sym__0__8084343433543173228;
  fluidb_string<7> sym__0___45_3664881058840515771;
  unsigned sym__0___45_1924199962958349658;
  unsigned sym__0__7769469128992998949;
  unsigned sym__0__7818554603565865821;
  unsigned sym__0__4360634980582143419;
  unsigned sym__0___45_7492593539880285892;
  fluidb_string<15> sym__0__1706094538935295417;
  fluidb_string<2> sym__0__6114638120282452033;
  fluidb_string<2> sym__0___45_78261027814563536;
  fluidb_string<2> sym__0__2648420561950371368;
  fluidb_string<2> sym__0__3807806894063626346;
  unsigned sym__0__3010211381236373125;
  fluidb_string<18> sym__0__3300613616795216173;
  fluidb_string<40> sym__0___45_3130123223234281513;
  fluidb_string<11> sym__0__8189415442579395633;
  fluidb_string<15> sym__0__3248231192614790363;
  fluidb_string<13> sym__0__1734593865430170446;
  fluidb_string<15> sym__0___45_8167422549222682195;
  fluidb_string<21> sym__0__2936268515493900473;
  unsigned sym__0__2661490882974477953;
  int sym__0___45_6833151998909895557;
  unsigned sym__0___45_6379152824683587325;
  unsigned sym__0__3389381886574775957;
  unsigned sym__0___45_3006394417042584462;
  unsigned sym__0__5708853396861436519;
  fluidb_string<21> sym__0__2510302245253987058;
  unsigned sym__0___45_8268616720440236384;
  fluidb_string<10> sym__0___45_2145747097567105917;
  unsigned sym__0___45_6747202196090936717;
  double sym__0___45_980129616638612863;
  unsigned sym__0__7935787287177824775;
  double sym__0___45_1765426731373793463;
  unsigned sym__0__2312911666975909277;
  unsigned sym__0__8713898721580785886;
  double sym__0__5274362417922015940;
  fluidb_string<13> sym__0___45_5950462958936866676;
  unsigned sym__0__5599391359954735578;
  fluidb_string<25> sym__0__4014184007857207821;
  fluidb_string<40> sym__0___45_7146441527183610849;
  fluidb_string<16> sym__0___45_8891100078062559775;
  fluidb_string<16> sym__0___45_5365202057839317149;
  fluidb_string<13> sym__0__5177313860806756678;
  fluidb_string<15> sym__0___45_6139660049171508851;
  unsigned sym__0__5600261570499839795;
  fluidb_string<55> sym__0__7033726162709406531;
  fluidb_string<25> sym__0___45_2028921051824210768;
  fluidb_string<7> sym__0__1510822012344354762;
  fluidb_string<10> sym__0___45_2462553484168592128;
  fluidb_string<11> sym__0__6826615390864986324;
  fluidb_string<25> sym__0__1653057618405204038;
  unsigned sym__0__1042393484014954953;
  fluidb_string<10> sym__0___45_4797345940361177504;
 private:
};


class Record10 {
 public:
  Record10(unsigned __sortElem0, fluidb_string<15> __sortElem1) : sortElem0(__sortElem0), sortElem1(__sortElem1)
  {
  }
  Record10() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0 << " | " << arrToString(sortElem1);
    return o.str();
  }
  bool operator <(const Record10& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && otherRec.sortElem1 < sortElem1);
  }
  bool operator ==(const Record10& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && otherRec.sortElem1 == sortElem1);
  }
  bool operator !=(const Record10& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || otherRec.sortElem1 != sortElem1);
  }
  unsigned sortElem0;
  fluidb_string<15> sortElem1;
 private:
};


class CallableClass11 {
 public:
  Record10 operator()(const Record6& record3) {
    return Record10(record3.sym__0___45_5677596107407519400, record3.sym__0___45_2044948362686327715);
  }
  typedef Record10 Codomain;
  typedef Record6 Domain0;
 private:
};


class CallableClass2 {
 public:
  bool operator()(const Record1& record0) {
    return (like(record0.sym__0___45_2028921051824210768, "MFGR#1") || like(record0.sym__0___45_2028921051824210768, "MFGR#2"));
  }
  typedef bool Codomain;
  typedef Record1 Domain0;
 private:
};


class CallableClass9 {
 public:
  Record4 operator()(const Record6& record3) {
    return Record4(vAggrFirst5(record3.sym__0___45_5677596107407519400), vAggrFirst7(record3.sym__0___45_2044948362686327715), vAggrSum8((record3.sym__0__9142595129731966875 - record3.sym__0__2065559644984295980)));
  }
  typedef Record4 Codomain;
  typedef Record6 Domain0;
 private:
  AggrFirst<unsigned> vAggrFirst5;
  AggrFirst<fluidb_string<15>> vAggrFirst7;
  AggrSum<unsigned> vAggrSum8;
};


class CallableClass13 {
 public:
  Record10 operator()(const Record4& record12) {
    return Record10(record12.sym__0___45_532509241117904863, record12.sym__0__6879476602096058762);
  }
  typedef Record10 Codomain;
  typedef Record4 Domain0;
 private:
};






int main() {
  // Delete: (Q1 
  //   (QSort [E0 (ESym "d_year"),E1 ENeg (E0 (ESym "revenue"))]) 
  //   (Q1 
  //     (QGroup 
  //       [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //        (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //        (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //        (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //       [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P2 
  //             POr 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI1"))))) 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI5")))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "d_yearmonth"))) 
  //                 (R0 (E0 (EString "Dec1997")))))) 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5"))))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_custkey"))) 
  //                 (R0 (E0 (ESym "c_custkey"))))) 
  //           (Q0 (TSymbol "customer")) 
  //           (J 
  //             (P0 
  //               (R2 REq 
  //                   (R0 (E0 (ESym "lo_orderdate"))) 
  //                   (R0 (E0 (ESym "d_datekey"))))) 
  //             (Q0 (TSymbol "date")) 
  //             (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QSort [E0 (ESym \"d_year\"),E1 ENeg (E0 (ESym \"revenue\"))]) \n  (Q1 \n    (QGroup \n      [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n       (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n       (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n       (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n      [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]) \n    (S \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P2 \n            POr \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI1\"))))) \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI5\")))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"d_yearmonth\"))) \n                (R0 (E0 (EString \"Dec1997\")))))) \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\"))))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_custkey\"))) \n                (R0 (E0 (ESym \"c_custkey\"))))) \n          (Q0 (TSymbol \"customer\")) \n          (J \n            (P0 \n              (R2 REq \n                  (R0 (E0 (ESym \"lo_orderdate\"))) \n                  (R0 (E0 (ESym \"d_datekey\"))))) \n            (Q0 (TSymbol \"date\")) \n            (Q0 (TSymbol \"lineorder\")))) \n        (Q0 (TSymbol \"supplier\"))))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data267.dat");
  // Delete: (Q1 
  //   (QGroup 
  //     [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //      (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //      (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //      (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //     [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]) 
  //   (S 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5")))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997")))))) 
  //       (P2 
  //         POr 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_city"))) 
  //               (R0 (E0 (EString "UNITED KI1"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_city"))) 
  //               (R0 (E0 (EString "UNITED KI5"))))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_suppkey"))) 
  //             (R0 (E0 (ESym "s_suppkey"))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QGroup \n    [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n     (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n     (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n     (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n    [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]) \n  (S \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\")))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\")))))) \n      (P2 \n        POr \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_city\"))) \n              (R0 (E0 (EString \"UNITED KI1\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_city\"))) \n              (R0 (E0 (EString \"UNITED KI5\"))))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_suppkey\"))) \n            (R0 (E0 (ESym \"s_suppkey\"))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))) \n      (Q0 (TSymbol \"supplier\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data266.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data253.dat");
  std::cout << "Delete: (Q0 (TSymbol \"supplier\"))" << std::endl;
  deleteFile("/tmp/fluidb_store/data3.dat");
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "d_yearmonth"))) 
  //           (R0 (E0 (EString "Dec1997"))))) 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_orderdate"))) 
  //             (R0 (E0 (ESym "d_datekey"))))) 
  //       (Q0 (TSymbol "date")) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"d_yearmonth\"))) \n          (R0 (E0 (EString \"Dec1997\"))))) \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_orderdate\"))) \n            (R0 (E0 (ESym \"d_datekey\"))))) \n      (Q0 (TSymbol \"date\")) \n      (Q0 (TSymbol \"lineorder\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data237.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "p_mfgr"))) 
  //                 (R0 (E0 (EString "MFGR#1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "p_mfgr"))) 
  //                 (R0 (E0 (EString "MFGR#2"))))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"p_mfgr\"))) \n                (R0 (E0 (EString \"MFGR#1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"p_mfgr\"))) \n                (R0 (E0 (EString \"MFGR#2\"))))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass2>(Just<const std::string>("/tmp/fluidb_store/data290.dat"), Just<const std::string>("/tmp/fluidb_store/data320.dat"), "/tmp/fluidb_store/data316.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QGroup 
  //         [
  //          (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //          (ESym "c_nation",E0 (NAggr AggrFirst (E0 (ESym "c_nation")))),
  //          (
  //            ESym "profit",
  //            E0 
  //               (NAggr 
  //                 AggrSum 
  //                 (E2 ESub 
  //                     (E0 (ESym "lo_revenue")) 
  //                     (E0 (ESym "lo_supplycost"))))
  //           )
  //         ] 
  //         [E0 (ESym "d_year"),E0 (ESym "c_nation")]
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QGroup \n        [\n         (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n         (ESym \"c_nation\",E0 (NAggr AggrFirst (E0 (ESym \"c_nation\")))),\n         (\n           ESym \"profit\",\n           E0 \n              (NAggr \n                AggrSum \n                (E2 ESub \n                    (E0 (ESym \"lo_revenue\")) \n                    (E0 (ESym \"lo_supplycost\"))))\n          )\n        ] \n        [E0 (ESym \"d_year\"),E0 (ESym \"c_nation\")]\n    ]))" << std::endl;
  {
    auto operation = mkAggregation<CallableClass9, CallableClass11>(Just<const std::string>("/tmp/fluidb_store/data321.dat"), Just<const std::string>("/tmp/fluidb_store/data290.dat"), "/tmp/fluidb_store/data290.dat");
    operation.run();
    operation.print_output(10);
  }
  std::cout << "ForwardTrigger: (Just (Right [QSort [E0 (ESym \"d_year\"),E0 (ESym \"c_nation\")]]))" << std::endl;
  {
    auto operation = mkSort<CallableClass13>(Just<const std::string>("/tmp/fluidb_store/data322.dat"), Just<const std::string>("/tmp/fluidb_store/data321.dat"), "/tmp/fluidb_store/data321.dat");
    operation.run();
    operation.print_output(10);
  }
  report_counters<60000>();
  return 0;
}
