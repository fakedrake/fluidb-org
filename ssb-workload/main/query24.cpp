#include <array>

#include <string>

#include <codegen.hh>
class Record46 {
 public:
  Record46(unsigned __sym__0___45_532509241117904863, fluidb_string<15> __sym__0__6879476602096058762, unsigned __sym__0__6336215024333455337) : sym__0___45_532509241117904863(__sym__0___45_532509241117904863), sym__0__6879476602096058762(__sym__0__6879476602096058762), sym__0__6336215024333455337(__sym__0__6336215024333455337)
  {
  }
  Record46() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_532509241117904863 << " | " << arrToString(sym__0__6879476602096058762) << " | " << sym__0__6336215024333455337;
    return o.str();
  }
  bool operator <(const Record46& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 < sym__0___45_532509241117904863 && (otherRec.sym__0__6879476602096058762 < sym__0__6879476602096058762 && otherRec.sym__0__6336215024333455337 < sym__0__6336215024333455337));
  }
  bool operator ==(const Record46& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 == sym__0___45_532509241117904863 && (otherRec.sym__0__6879476602096058762 == sym__0__6879476602096058762 && otherRec.sym__0__6336215024333455337 == sym__0__6336215024333455337));
  }
  bool operator !=(const Record46& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 != sym__0___45_532509241117904863 || (otherRec.sym__0__6879476602096058762 != sym__0__6879476602096058762 || otherRec.sym__0__6336215024333455337 != sym__0__6336215024333455337));
  }
  unsigned sym__0___45_532509241117904863;
  fluidb_string<15> sym__0__6879476602096058762;
  unsigned sym__0__6336215024333455337;
 private:
};


class Record48 {
 public:
  Record48(unsigned __sym__0__751349491586783291, fluidb_string<18> __sym__0__354510891937955499, fluidb_string<9> __sym__0__8685870419913255269, fluidb_string<9> __sym__0___45_1685896364158718066, unsigned __sym__0___45_5677596107407519400, unsigned __sym__0__861815074445021598, fluidb_string<7> __sym__0___45_3872891870093673981, unsigned __sym__0___45_6241898377327069772, unsigned __sym__0__642504737957706403, unsigned __sym__0___45_1374976708771691557, unsigned __sym__0__2339057656064903933, unsigned __sym__0__89048769271346350, fluidb_string<15> __sym__0__6426708041019551759, fluidb_string<2> __sym__0__7008835179244010327, fluidb_string<2> __sym__0___45_4323628884972846406, fluidb_string<2> __sym__0__7828159490610995250, fluidb_string<2> __sym__0__2257718864796675488, unsigned __sym__0__730109080165272259, fluidb_string<18> __sym__0___45_8476449300885475093, fluidb_string<40> __sym__0___45_991149214691090239, fluidb_string<11> __sym__0___45_2212122284055066105, fluidb_string<15> __sym__0___45_2044948362686327715, fluidb_string<13> __sym__0__3321043677072918300, fluidb_string<15> __sym__0___45_226399795464070293, fluidb_string<21> __sym__0__7848733459393176335, unsigned __sym__0___45_4488020782418924777, int __sym__0___45_6919306960004101059, unsigned __sym__0__6018430784935315013, unsigned __sym__0___45_140673424384154541, unsigned __sym__0___45_6038639548629345048, unsigned __sym__0__1559790869847058897, fluidb_string<21> __sym__0___45_4352805721407037080, unsigned __sym__0__4062351712071543146, fluidb_string<10> __sym__0___45_6018880488104713787, unsigned __sym__0___45_6835853099986992139, double __sym__0___45_8089668391442329833, unsigned __sym__0___45_8717135147929398223, double __sym__0___45_7475819144393673057, unsigned __sym__0__9142595129731966875, unsigned __sym__0__2065559644984295980, double __sym__0__2460723449183532278, fluidb_string<13> __sym__0__470592171585028734, unsigned __sym__0__4356580487975201936, fluidb_string<25> __sym__0___45_9184441323043515765, fluidb_string<40> __sym__0__6618707433631942345, fluidb_string<16> __sym__0___45_6275907539891917001, fluidb_string<16> __sym__0___45_2055641227140571803, fluidb_string<13> __sym__0__2004584544714042516, fluidb_string<15> __sym__0__4525776177764059147, unsigned __sym__0__8256595161360863541, fluidb_string<55> __sym__0__2419198459165298437, fluidb_string<25> __sym__0___45_5966236615078693830, fluidb_string<7> __sym__0___45_1194673352705657408, fluidb_string<10> __sym__0__1650700319641029258, fluidb_string<11> __sym__0___45_5413060736990914554, fluidb_string<25> __sym__0__5395318601550732180, unsigned __sym__0___45_4041750310509064417, fluidb_string<10> __sym__0___45_6998494795726951254) : sym__0__751349491586783291(__sym__0__751349491586783291), sym__0__354510891937955499(__sym__0__354510891937955499), sym__0__8685870419913255269(__sym__0__8685870419913255269), sym__0___45_1685896364158718066(__sym__0___45_1685896364158718066), sym__0___45_5677596107407519400(__sym__0___45_5677596107407519400), sym__0__861815074445021598(__sym__0__861815074445021598), sym__0___45_3872891870093673981(__sym__0___45_3872891870093673981), sym__0___45_6241898377327069772(__sym__0___45_6241898377327069772), sym__0__642504737957706403(__sym__0__642504737957706403), sym__0___45_1374976708771691557(__sym__0___45_1374976708771691557), sym__0__2339057656064903933(__sym__0__2339057656064903933), sym__0__89048769271346350(__sym__0__89048769271346350), sym__0__6426708041019551759(__sym__0__6426708041019551759), sym__0__7008835179244010327(__sym__0__7008835179244010327), sym__0___45_4323628884972846406(__sym__0___45_4323628884972846406), sym__0__7828159490610995250(__sym__0__7828159490610995250), sym__0__2257718864796675488(__sym__0__2257718864796675488), sym__0__730109080165272259(__sym__0__730109080165272259), sym__0___45_8476449300885475093(__sym__0___45_8476449300885475093), sym__0___45_991149214691090239(__sym__0___45_991149214691090239), sym__0___45_2212122284055066105(__sym__0___45_2212122284055066105), sym__0___45_2044948362686327715(__sym__0___45_2044948362686327715), sym__0__3321043677072918300(__sym__0__3321043677072918300), sym__0___45_226399795464070293(__sym__0___45_226399795464070293), sym__0__7848733459393176335(__sym__0__7848733459393176335), sym__0___45_4488020782418924777(__sym__0___45_4488020782418924777), sym__0___45_6919306960004101059(__sym__0___45_6919306960004101059), sym__0__6018430784935315013(__sym__0__6018430784935315013), sym__0___45_140673424384154541(__sym__0___45_140673424384154541), sym__0___45_6038639548629345048(__sym__0___45_6038639548629345048), sym__0__1559790869847058897(__sym__0__1559790869847058897), sym__0___45_4352805721407037080(__sym__0___45_4352805721407037080), sym__0__4062351712071543146(__sym__0__4062351712071543146), sym__0___45_6018880488104713787(__sym__0___45_6018880488104713787), sym__0___45_6835853099986992139(__sym__0___45_6835853099986992139), sym__0___45_8089668391442329833(__sym__0___45_8089668391442329833), sym__0___45_8717135147929398223(__sym__0___45_8717135147929398223), sym__0___45_7475819144393673057(__sym__0___45_7475819144393673057), sym__0__9142595129731966875(__sym__0__9142595129731966875), sym__0__2065559644984295980(__sym__0__2065559644984295980), sym__0__2460723449183532278(__sym__0__2460723449183532278), sym__0__470592171585028734(__sym__0__470592171585028734), sym__0__4356580487975201936(__sym__0__4356580487975201936), sym__0___45_9184441323043515765(__sym__0___45_9184441323043515765), sym__0__6618707433631942345(__sym__0__6618707433631942345), sym__0___45_6275907539891917001(__sym__0___45_6275907539891917001), sym__0___45_2055641227140571803(__sym__0___45_2055641227140571803), sym__0__2004584544714042516(__sym__0__2004584544714042516), sym__0__4525776177764059147(__sym__0__4525776177764059147), sym__0__8256595161360863541(__sym__0__8256595161360863541), sym__0__2419198459165298437(__sym__0__2419198459165298437), sym__0___45_5966236615078693830(__sym__0___45_5966236615078693830), sym__0___45_1194673352705657408(__sym__0___45_1194673352705657408), sym__0__1650700319641029258(__sym__0__1650700319641029258), sym__0___45_5413060736990914554(__sym__0___45_5413060736990914554), sym__0__5395318601550732180(__sym__0__5395318601550732180), sym__0___45_4041750310509064417(__sym__0___45_4041750310509064417), sym__0___45_6998494795726951254(__sym__0___45_6998494795726951254)
  {
  }
  Record48() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__751349491586783291 << " | " << arrToString(sym__0__354510891937955499) << " | " << arrToString(sym__0__8685870419913255269) << " | " << arrToString(sym__0___45_1685896364158718066) << " | " << sym__0___45_5677596107407519400 << " | " << sym__0__861815074445021598 << " | " << arrToString(sym__0___45_3872891870093673981) << " | " << sym__0___45_6241898377327069772 << " | " << sym__0__642504737957706403 << " | " << sym__0___45_1374976708771691557 << " | " << sym__0__2339057656064903933 << " | " << sym__0__89048769271346350 << " | " << arrToString(sym__0__6426708041019551759) << " | " << arrToString(sym__0__7008835179244010327) << " | " << arrToString(sym__0___45_4323628884972846406) << " | " << arrToString(sym__0__7828159490610995250) << " | " << arrToString(sym__0__2257718864796675488) << " | " << sym__0__730109080165272259 << " | " << arrToString(sym__0___45_8476449300885475093) << " | " << arrToString(sym__0___45_991149214691090239) << " | " << arrToString(sym__0___45_2212122284055066105) << " | " << arrToString(sym__0___45_2044948362686327715) << " | " << arrToString(sym__0__3321043677072918300) << " | " << arrToString(sym__0___45_226399795464070293) << " | " << arrToString(sym__0__7848733459393176335) << " | " << sym__0___45_4488020782418924777 << " | " << sym__0___45_6919306960004101059 << " | " << sym__0__6018430784935315013 << " | " << sym__0___45_140673424384154541 << " | " << sym__0___45_6038639548629345048 << " | " << sym__0__1559790869847058897 << " | " << arrToString(sym__0___45_4352805721407037080) << " | " << sym__0__4062351712071543146 << " | " << arrToString(sym__0___45_6018880488104713787) << " | " << sym__0___45_6835853099986992139 << " | " << sym__0___45_8089668391442329833 << " | " << sym__0___45_8717135147929398223 << " | " << sym__0___45_7475819144393673057 << " | " << sym__0__9142595129731966875 << " | " << sym__0__2065559644984295980 << " | " << sym__0__2460723449183532278 << " | " << arrToString(sym__0__470592171585028734) << " | " << sym__0__4356580487975201936 << " | " << arrToString(sym__0___45_9184441323043515765) << " | " << arrToString(sym__0__6618707433631942345) << " | " << arrToString(sym__0___45_6275907539891917001) << " | " << arrToString(sym__0___45_2055641227140571803) << " | " << arrToString(sym__0__2004584544714042516) << " | " << arrToString(sym__0__4525776177764059147) << " | " << sym__0__8256595161360863541 << " | " << arrToString(sym__0__2419198459165298437) << " | " << arrToString(sym__0___45_5966236615078693830) << " | " << arrToString(sym__0___45_1194673352705657408) << " | " << arrToString(sym__0__1650700319641029258) << " | " << arrToString(sym__0___45_5413060736990914554) << " | " << arrToString(sym__0__5395318601550732180) << " | " << sym__0___45_4041750310509064417 << " | " << arrToString(sym__0___45_6998494795726951254);
    return o.str();
  }
  bool operator <(const Record48& otherRec) const{
    return (otherRec.sym__0__751349491586783291 < sym__0__751349491586783291 && (otherRec.sym__0__354510891937955499 < sym__0__354510891937955499 && (otherRec.sym__0__8685870419913255269 < sym__0__8685870419913255269 && (otherRec.sym__0___45_1685896364158718066 < sym__0___45_1685896364158718066 && (otherRec.sym__0___45_5677596107407519400 < sym__0___45_5677596107407519400 && (otherRec.sym__0__861815074445021598 < sym__0__861815074445021598 && (otherRec.sym__0___45_3872891870093673981 < sym__0___45_3872891870093673981 && (otherRec.sym__0___45_6241898377327069772 < sym__0___45_6241898377327069772 && (otherRec.sym__0__642504737957706403 < sym__0__642504737957706403 && (otherRec.sym__0___45_1374976708771691557 < sym__0___45_1374976708771691557 && (otherRec.sym__0__2339057656064903933 < sym__0__2339057656064903933 && (otherRec.sym__0__89048769271346350 < sym__0__89048769271346350 && (otherRec.sym__0__6426708041019551759 < sym__0__6426708041019551759 && (otherRec.sym__0__7008835179244010327 < sym__0__7008835179244010327 && (otherRec.sym__0___45_4323628884972846406 < sym__0___45_4323628884972846406 && (otherRec.sym__0__7828159490610995250 < sym__0__7828159490610995250 && (otherRec.sym__0__2257718864796675488 < sym__0__2257718864796675488 && (otherRec.sym__0__730109080165272259 < sym__0__730109080165272259 && (otherRec.sym__0___45_8476449300885475093 < sym__0___45_8476449300885475093 && (otherRec.sym__0___45_991149214691090239 < sym__0___45_991149214691090239 && (otherRec.sym__0___45_2212122284055066105 < sym__0___45_2212122284055066105 && (otherRec.sym__0___45_2044948362686327715 < sym__0___45_2044948362686327715 && (otherRec.sym__0__3321043677072918300 < sym__0__3321043677072918300 && (otherRec.sym__0___45_226399795464070293 < sym__0___45_226399795464070293 && (otherRec.sym__0__7848733459393176335 < sym__0__7848733459393176335 && (otherRec.sym__0___45_4488020782418924777 < sym__0___45_4488020782418924777 && (otherRec.sym__0___45_6919306960004101059 < sym__0___45_6919306960004101059 && (otherRec.sym__0__6018430784935315013 < sym__0__6018430784935315013 && (otherRec.sym__0___45_140673424384154541 < sym__0___45_140673424384154541 && (otherRec.sym__0___45_6038639548629345048 < sym__0___45_6038639548629345048 && (otherRec.sym__0__1559790869847058897 < sym__0__1559790869847058897 && (otherRec.sym__0___45_4352805721407037080 < sym__0___45_4352805721407037080 && (otherRec.sym__0__4062351712071543146 < sym__0__4062351712071543146 && (otherRec.sym__0___45_6018880488104713787 < sym__0___45_6018880488104713787 && (otherRec.sym__0___45_6835853099986992139 < sym__0___45_6835853099986992139 && (otherRec.sym__0___45_8089668391442329833 < sym__0___45_8089668391442329833 && (otherRec.sym__0___45_8717135147929398223 < sym__0___45_8717135147929398223 && (otherRec.sym__0___45_7475819144393673057 < sym__0___45_7475819144393673057 && (otherRec.sym__0__9142595129731966875 < sym__0__9142595129731966875 && (otherRec.sym__0__2065559644984295980 < sym__0__2065559644984295980 && (otherRec.sym__0__2460723449183532278 < sym__0__2460723449183532278 && (otherRec.sym__0__470592171585028734 < sym__0__470592171585028734 && (otherRec.sym__0__4356580487975201936 < sym__0__4356580487975201936 && (otherRec.sym__0___45_9184441323043515765 < sym__0___45_9184441323043515765 && (otherRec.sym__0__6618707433631942345 < sym__0__6618707433631942345 && (otherRec.sym__0___45_6275907539891917001 < sym__0___45_6275907539891917001 && (otherRec.sym__0___45_2055641227140571803 < sym__0___45_2055641227140571803 && (otherRec.sym__0__2004584544714042516 < sym__0__2004584544714042516 && (otherRec.sym__0__4525776177764059147 < sym__0__4525776177764059147 && (otherRec.sym__0__8256595161360863541 < sym__0__8256595161360863541 && (otherRec.sym__0__2419198459165298437 < sym__0__2419198459165298437 && (otherRec.sym__0___45_5966236615078693830 < sym__0___45_5966236615078693830 && (otherRec.sym__0___45_1194673352705657408 < sym__0___45_1194673352705657408 && (otherRec.sym__0__1650700319641029258 < sym__0__1650700319641029258 && (otherRec.sym__0___45_5413060736990914554 < sym__0___45_5413060736990914554 && (otherRec.sym__0__5395318601550732180 < sym__0__5395318601550732180 && (otherRec.sym__0___45_4041750310509064417 < sym__0___45_4041750310509064417 && otherRec.sym__0___45_6998494795726951254 < sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record48& otherRec) const{
    return (otherRec.sym__0__751349491586783291 == sym__0__751349491586783291 && (otherRec.sym__0__354510891937955499 == sym__0__354510891937955499 && (otherRec.sym__0__8685870419913255269 == sym__0__8685870419913255269 && (otherRec.sym__0___45_1685896364158718066 == sym__0___45_1685896364158718066 && (otherRec.sym__0___45_5677596107407519400 == sym__0___45_5677596107407519400 && (otherRec.sym__0__861815074445021598 == sym__0__861815074445021598 && (otherRec.sym__0___45_3872891870093673981 == sym__0___45_3872891870093673981 && (otherRec.sym__0___45_6241898377327069772 == sym__0___45_6241898377327069772 && (otherRec.sym__0__642504737957706403 == sym__0__642504737957706403 && (otherRec.sym__0___45_1374976708771691557 == sym__0___45_1374976708771691557 && (otherRec.sym__0__2339057656064903933 == sym__0__2339057656064903933 && (otherRec.sym__0__89048769271346350 == sym__0__89048769271346350 && (otherRec.sym__0__6426708041019551759 == sym__0__6426708041019551759 && (otherRec.sym__0__7008835179244010327 == sym__0__7008835179244010327 && (otherRec.sym__0___45_4323628884972846406 == sym__0___45_4323628884972846406 && (otherRec.sym__0__7828159490610995250 == sym__0__7828159490610995250 && (otherRec.sym__0__2257718864796675488 == sym__0__2257718864796675488 && (otherRec.sym__0__730109080165272259 == sym__0__730109080165272259 && (otherRec.sym__0___45_8476449300885475093 == sym__0___45_8476449300885475093 && (otherRec.sym__0___45_991149214691090239 == sym__0___45_991149214691090239 && (otherRec.sym__0___45_2212122284055066105 == sym__0___45_2212122284055066105 && (otherRec.sym__0___45_2044948362686327715 == sym__0___45_2044948362686327715 && (otherRec.sym__0__3321043677072918300 == sym__0__3321043677072918300 && (otherRec.sym__0___45_226399795464070293 == sym__0___45_226399795464070293 && (otherRec.sym__0__7848733459393176335 == sym__0__7848733459393176335 && (otherRec.sym__0___45_4488020782418924777 == sym__0___45_4488020782418924777 && (otherRec.sym__0___45_6919306960004101059 == sym__0___45_6919306960004101059 && (otherRec.sym__0__6018430784935315013 == sym__0__6018430784935315013 && (otherRec.sym__0___45_140673424384154541 == sym__0___45_140673424384154541 && (otherRec.sym__0___45_6038639548629345048 == sym__0___45_6038639548629345048 && (otherRec.sym__0__1559790869847058897 == sym__0__1559790869847058897 && (otherRec.sym__0___45_4352805721407037080 == sym__0___45_4352805721407037080 && (otherRec.sym__0__4062351712071543146 == sym__0__4062351712071543146 && (otherRec.sym__0___45_6018880488104713787 == sym__0___45_6018880488104713787 && (otherRec.sym__0___45_6835853099986992139 == sym__0___45_6835853099986992139 && (otherRec.sym__0___45_8089668391442329833 == sym__0___45_8089668391442329833 && (otherRec.sym__0___45_8717135147929398223 == sym__0___45_8717135147929398223 && (otherRec.sym__0___45_7475819144393673057 == sym__0___45_7475819144393673057 && (otherRec.sym__0__9142595129731966875 == sym__0__9142595129731966875 && (otherRec.sym__0__2065559644984295980 == sym__0__2065559644984295980 && (otherRec.sym__0__2460723449183532278 == sym__0__2460723449183532278 && (otherRec.sym__0__470592171585028734 == sym__0__470592171585028734 && (otherRec.sym__0__4356580487975201936 == sym__0__4356580487975201936 && (otherRec.sym__0___45_9184441323043515765 == sym__0___45_9184441323043515765 && (otherRec.sym__0__6618707433631942345 == sym__0__6618707433631942345 && (otherRec.sym__0___45_6275907539891917001 == sym__0___45_6275907539891917001 && (otherRec.sym__0___45_2055641227140571803 == sym__0___45_2055641227140571803 && (otherRec.sym__0__2004584544714042516 == sym__0__2004584544714042516 && (otherRec.sym__0__4525776177764059147 == sym__0__4525776177764059147 && (otherRec.sym__0__8256595161360863541 == sym__0__8256595161360863541 && (otherRec.sym__0__2419198459165298437 == sym__0__2419198459165298437 && (otherRec.sym__0___45_5966236615078693830 == sym__0___45_5966236615078693830 && (otherRec.sym__0___45_1194673352705657408 == sym__0___45_1194673352705657408 && (otherRec.sym__0__1650700319641029258 == sym__0__1650700319641029258 && (otherRec.sym__0___45_5413060736990914554 == sym__0___45_5413060736990914554 && (otherRec.sym__0__5395318601550732180 == sym__0__5395318601550732180 && (otherRec.sym__0___45_4041750310509064417 == sym__0___45_4041750310509064417 && otherRec.sym__0___45_6998494795726951254 == sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record48& otherRec) const{
    return (otherRec.sym__0__751349491586783291 != sym__0__751349491586783291 || (otherRec.sym__0__354510891937955499 != sym__0__354510891937955499 || (otherRec.sym__0__8685870419913255269 != sym__0__8685870419913255269 || (otherRec.sym__0___45_1685896364158718066 != sym__0___45_1685896364158718066 || (otherRec.sym__0___45_5677596107407519400 != sym__0___45_5677596107407519400 || (otherRec.sym__0__861815074445021598 != sym__0__861815074445021598 || (otherRec.sym__0___45_3872891870093673981 != sym__0___45_3872891870093673981 || (otherRec.sym__0___45_6241898377327069772 != sym__0___45_6241898377327069772 || (otherRec.sym__0__642504737957706403 != sym__0__642504737957706403 || (otherRec.sym__0___45_1374976708771691557 != sym__0___45_1374976708771691557 || (otherRec.sym__0__2339057656064903933 != sym__0__2339057656064903933 || (otherRec.sym__0__89048769271346350 != sym__0__89048769271346350 || (otherRec.sym__0__6426708041019551759 != sym__0__6426708041019551759 || (otherRec.sym__0__7008835179244010327 != sym__0__7008835179244010327 || (otherRec.sym__0___45_4323628884972846406 != sym__0___45_4323628884972846406 || (otherRec.sym__0__7828159490610995250 != sym__0__7828159490610995250 || (otherRec.sym__0__2257718864796675488 != sym__0__2257718864796675488 || (otherRec.sym__0__730109080165272259 != sym__0__730109080165272259 || (otherRec.sym__0___45_8476449300885475093 != sym__0___45_8476449300885475093 || (otherRec.sym__0___45_991149214691090239 != sym__0___45_991149214691090239 || (otherRec.sym__0___45_2212122284055066105 != sym__0___45_2212122284055066105 || (otherRec.sym__0___45_2044948362686327715 != sym__0___45_2044948362686327715 || (otherRec.sym__0__3321043677072918300 != sym__0__3321043677072918300 || (otherRec.sym__0___45_226399795464070293 != sym__0___45_226399795464070293 || (otherRec.sym__0__7848733459393176335 != sym__0__7848733459393176335 || (otherRec.sym__0___45_4488020782418924777 != sym__0___45_4488020782418924777 || (otherRec.sym__0___45_6919306960004101059 != sym__0___45_6919306960004101059 || (otherRec.sym__0__6018430784935315013 != sym__0__6018430784935315013 || (otherRec.sym__0___45_140673424384154541 != sym__0___45_140673424384154541 || (otherRec.sym__0___45_6038639548629345048 != sym__0___45_6038639548629345048 || (otherRec.sym__0__1559790869847058897 != sym__0__1559790869847058897 || (otherRec.sym__0___45_4352805721407037080 != sym__0___45_4352805721407037080 || (otherRec.sym__0__4062351712071543146 != sym__0__4062351712071543146 || (otherRec.sym__0___45_6018880488104713787 != sym__0___45_6018880488104713787 || (otherRec.sym__0___45_6835853099986992139 != sym__0___45_6835853099986992139 || (otherRec.sym__0___45_8089668391442329833 != sym__0___45_8089668391442329833 || (otherRec.sym__0___45_8717135147929398223 != sym__0___45_8717135147929398223 || (otherRec.sym__0___45_7475819144393673057 != sym__0___45_7475819144393673057 || (otherRec.sym__0__9142595129731966875 != sym__0__9142595129731966875 || (otherRec.sym__0__2065559644984295980 != sym__0__2065559644984295980 || (otherRec.sym__0__2460723449183532278 != sym__0__2460723449183532278 || (otherRec.sym__0__470592171585028734 != sym__0__470592171585028734 || (otherRec.sym__0__4356580487975201936 != sym__0__4356580487975201936 || (otherRec.sym__0___45_9184441323043515765 != sym__0___45_9184441323043515765 || (otherRec.sym__0__6618707433631942345 != sym__0__6618707433631942345 || (otherRec.sym__0___45_6275907539891917001 != sym__0___45_6275907539891917001 || (otherRec.sym__0___45_2055641227140571803 != sym__0___45_2055641227140571803 || (otherRec.sym__0__2004584544714042516 != sym__0__2004584544714042516 || (otherRec.sym__0__4525776177764059147 != sym__0__4525776177764059147 || (otherRec.sym__0__8256595161360863541 != sym__0__8256595161360863541 || (otherRec.sym__0__2419198459165298437 != sym__0__2419198459165298437 || (otherRec.sym__0___45_5966236615078693830 != sym__0___45_5966236615078693830 || (otherRec.sym__0___45_1194673352705657408 != sym__0___45_1194673352705657408 || (otherRec.sym__0__1650700319641029258 != sym__0__1650700319641029258 || (otherRec.sym__0___45_5413060736990914554 != sym__0___45_5413060736990914554 || (otherRec.sym__0__5395318601550732180 != sym__0__5395318601550732180 || (otherRec.sym__0___45_4041750310509064417 != sym__0___45_4041750310509064417 || otherRec.sym__0___45_6998494795726951254 != sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__751349491586783291;
  fluidb_string<18> sym__0__354510891937955499;
  fluidb_string<9> sym__0__8685870419913255269;
  fluidb_string<9> sym__0___45_1685896364158718066;
  unsigned sym__0___45_5677596107407519400;
  unsigned sym__0__861815074445021598;
  fluidb_string<7> sym__0___45_3872891870093673981;
  unsigned sym__0___45_6241898377327069772;
  unsigned sym__0__642504737957706403;
  unsigned sym__0___45_1374976708771691557;
  unsigned sym__0__2339057656064903933;
  unsigned sym__0__89048769271346350;
  fluidb_string<15> sym__0__6426708041019551759;
  fluidb_string<2> sym__0__7008835179244010327;
  fluidb_string<2> sym__0___45_4323628884972846406;
  fluidb_string<2> sym__0__7828159490610995250;
  fluidb_string<2> sym__0__2257718864796675488;
  unsigned sym__0__730109080165272259;
  fluidb_string<18> sym__0___45_8476449300885475093;
  fluidb_string<40> sym__0___45_991149214691090239;
  fluidb_string<11> sym__0___45_2212122284055066105;
  fluidb_string<15> sym__0___45_2044948362686327715;
  fluidb_string<13> sym__0__3321043677072918300;
  fluidb_string<15> sym__0___45_226399795464070293;
  fluidb_string<21> sym__0__7848733459393176335;
  unsigned sym__0___45_4488020782418924777;
  int sym__0___45_6919306960004101059;
  unsigned sym__0__6018430784935315013;
  unsigned sym__0___45_140673424384154541;
  unsigned sym__0___45_6038639548629345048;
  unsigned sym__0__1559790869847058897;
  fluidb_string<21> sym__0___45_4352805721407037080;
  unsigned sym__0__4062351712071543146;
  fluidb_string<10> sym__0___45_6018880488104713787;
  unsigned sym__0___45_6835853099986992139;
  double sym__0___45_8089668391442329833;
  unsigned sym__0___45_8717135147929398223;
  double sym__0___45_7475819144393673057;
  unsigned sym__0__9142595129731966875;
  unsigned sym__0__2065559644984295980;
  double sym__0__2460723449183532278;
  fluidb_string<13> sym__0__470592171585028734;
  unsigned sym__0__4356580487975201936;
  fluidb_string<25> sym__0___45_9184441323043515765;
  fluidb_string<40> sym__0__6618707433631942345;
  fluidb_string<16> sym__0___45_6275907539891917001;
  fluidb_string<16> sym__0___45_2055641227140571803;
  fluidb_string<13> sym__0__2004584544714042516;
  fluidb_string<15> sym__0__4525776177764059147;
  unsigned sym__0__8256595161360863541;
  fluidb_string<55> sym__0__2419198459165298437;
  fluidb_string<25> sym__0___45_5966236615078693830;
  fluidb_string<7> sym__0___45_1194673352705657408;
  fluidb_string<10> sym__0__1650700319641029258;
  fluidb_string<11> sym__0___45_5413060736990914554;
  fluidb_string<25> sym__0__5395318601550732180;
  unsigned sym__0___45_4041750310509064417;
  fluidb_string<10> sym__0___45_6998494795726951254;
 private:
};


class Record2 {
 public:
  Record2(unsigned __sym__0__3749202613835539516, fluidb_string<25> __sym__0__3853910811136206439, fluidb_string<40> __sym__0___45_4812439514081860187, fluidb_string<16> __sym__0__8141341990593755227, fluidb_string<16> __sym__0___45_1677497998823335159, fluidb_string<13> __sym__0__7067889907208718136, fluidb_string<15> __sym__0__2063264474794950631, unsigned __sym__0___45_2406203400319404933, int __sym__0__9081834897704197137, unsigned __sym__0___45_8323320223000960471, unsigned __sym__0___45_8331347243081162497, unsigned __sym__0___45_2390083838583420092, unsigned __sym__0__2912236000029059069, fluidb_string<21> __sym__0__3653370686033553860, unsigned __sym__0__5936012595412334150, fluidb_string<10> __sym__0___45_1816837998167001175, unsigned __sym__0__7545091206599238681, double __sym__0___45_1424559208137584517, unsigned __sym__0__6395144509512964253, double __sym__0__9182535146594246451, unsigned __sym__0__280815916194286583, unsigned __sym__0__2540705042138486592, double __sym__0__8281520224814360410, fluidb_string<13> __sym__0__3059107448055216658, unsigned __sym__0__5947624015539765847, fluidb_string<18> __sym__0___45_9066590480537882041, fluidb_string<9> __sym__0___45_5447174107187519735, fluidb_string<9> __sym__0___45_3420603495949690014, unsigned __sym__0___45_9004707282254064716, unsigned __sym__0___45_4063231403699784718, fluidb_string<7> __sym__0___45_1843583846408941393, unsigned __sym__0__3878271002552174104, unsigned __sym__0__6118668371652612367, unsigned __sym__0___45_2229254424656099401, unsigned __sym__0___45_7776418238460988847, unsigned __sym__0__4886447806562354754, fluidb_string<15> __sym__0___45_4567805851496469981, fluidb_string<2> __sym__0___45_7971780566155543493, fluidb_string<2> __sym__0__1382282970499677142, fluidb_string<2> __sym__0__5011297957218063582, fluidb_string<2> __sym__0___45_3550325263493409460, unsigned __sym__0__6529948146205169113, fluidb_string<55> __sym__0__6661097005291578729, fluidb_string<25> __sym__0___45_7469900952409713322, fluidb_string<7> __sym__0___45_8598458868422699732, fluidb_string<10> __sym__0___45_6414117357071051226, fluidb_string<11> __sym__0__4421059099170388330, fluidb_string<25> __sym__0___45_108714048876090312, unsigned __sym__0__5441078539661244851, fluidb_string<10> __sym__0___45_8326498932109471738) : sym__0__3749202613835539516(__sym__0__3749202613835539516), sym__0__3853910811136206439(__sym__0__3853910811136206439), sym__0___45_4812439514081860187(__sym__0___45_4812439514081860187), sym__0__8141341990593755227(__sym__0__8141341990593755227), sym__0___45_1677497998823335159(__sym__0___45_1677497998823335159), sym__0__7067889907208718136(__sym__0__7067889907208718136), sym__0__2063264474794950631(__sym__0__2063264474794950631), sym__0___45_2406203400319404933(__sym__0___45_2406203400319404933), sym__0__9081834897704197137(__sym__0__9081834897704197137), sym__0___45_8323320223000960471(__sym__0___45_8323320223000960471), sym__0___45_8331347243081162497(__sym__0___45_8331347243081162497), sym__0___45_2390083838583420092(__sym__0___45_2390083838583420092), sym__0__2912236000029059069(__sym__0__2912236000029059069), sym__0__3653370686033553860(__sym__0__3653370686033553860), sym__0__5936012595412334150(__sym__0__5936012595412334150), sym__0___45_1816837998167001175(__sym__0___45_1816837998167001175), sym__0__7545091206599238681(__sym__0__7545091206599238681), sym__0___45_1424559208137584517(__sym__0___45_1424559208137584517), sym__0__6395144509512964253(__sym__0__6395144509512964253), sym__0__9182535146594246451(__sym__0__9182535146594246451), sym__0__280815916194286583(__sym__0__280815916194286583), sym__0__2540705042138486592(__sym__0__2540705042138486592), sym__0__8281520224814360410(__sym__0__8281520224814360410), sym__0__3059107448055216658(__sym__0__3059107448055216658), sym__0__5947624015539765847(__sym__0__5947624015539765847), sym__0___45_9066590480537882041(__sym__0___45_9066590480537882041), sym__0___45_5447174107187519735(__sym__0___45_5447174107187519735), sym__0___45_3420603495949690014(__sym__0___45_3420603495949690014), sym__0___45_9004707282254064716(__sym__0___45_9004707282254064716), sym__0___45_4063231403699784718(__sym__0___45_4063231403699784718), sym__0___45_1843583846408941393(__sym__0___45_1843583846408941393), sym__0__3878271002552174104(__sym__0__3878271002552174104), sym__0__6118668371652612367(__sym__0__6118668371652612367), sym__0___45_2229254424656099401(__sym__0___45_2229254424656099401), sym__0___45_7776418238460988847(__sym__0___45_7776418238460988847), sym__0__4886447806562354754(__sym__0__4886447806562354754), sym__0___45_4567805851496469981(__sym__0___45_4567805851496469981), sym__0___45_7971780566155543493(__sym__0___45_7971780566155543493), sym__0__1382282970499677142(__sym__0__1382282970499677142), sym__0__5011297957218063582(__sym__0__5011297957218063582), sym__0___45_3550325263493409460(__sym__0___45_3550325263493409460), sym__0__6529948146205169113(__sym__0__6529948146205169113), sym__0__6661097005291578729(__sym__0__6661097005291578729), sym__0___45_7469900952409713322(__sym__0___45_7469900952409713322), sym__0___45_8598458868422699732(__sym__0___45_8598458868422699732), sym__0___45_6414117357071051226(__sym__0___45_6414117357071051226), sym__0__4421059099170388330(__sym__0__4421059099170388330), sym__0___45_108714048876090312(__sym__0___45_108714048876090312), sym__0__5441078539661244851(__sym__0__5441078539661244851), sym__0___45_8326498932109471738(__sym__0___45_8326498932109471738)
  {
  }
  Record2() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__3749202613835539516 << " | " << arrToString(sym__0__3853910811136206439) << " | " << arrToString(sym__0___45_4812439514081860187) << " | " << arrToString(sym__0__8141341990593755227) << " | " << arrToString(sym__0___45_1677497998823335159) << " | " << arrToString(sym__0__7067889907208718136) << " | " << arrToString(sym__0__2063264474794950631) << " | " << sym__0___45_2406203400319404933 << " | " << sym__0__9081834897704197137 << " | " << sym__0___45_8323320223000960471 << " | " << sym__0___45_8331347243081162497 << " | " << sym__0___45_2390083838583420092 << " | " << sym__0__2912236000029059069 << " | " << arrToString(sym__0__3653370686033553860) << " | " << sym__0__5936012595412334150 << " | " << arrToString(sym__0___45_1816837998167001175) << " | " << sym__0__7545091206599238681 << " | " << sym__0___45_1424559208137584517 << " | " << sym__0__6395144509512964253 << " | " << sym__0__9182535146594246451 << " | " << sym__0__280815916194286583 << " | " << sym__0__2540705042138486592 << " | " << sym__0__8281520224814360410 << " | " << arrToString(sym__0__3059107448055216658) << " | " << sym__0__5947624015539765847 << " | " << arrToString(sym__0___45_9066590480537882041) << " | " << arrToString(sym__0___45_5447174107187519735) << " | " << arrToString(sym__0___45_3420603495949690014) << " | " << sym__0___45_9004707282254064716 << " | " << sym__0___45_4063231403699784718 << " | " << arrToString(sym__0___45_1843583846408941393) << " | " << sym__0__3878271002552174104 << " | " << sym__0__6118668371652612367 << " | " << sym__0___45_2229254424656099401 << " | " << sym__0___45_7776418238460988847 << " | " << sym__0__4886447806562354754 << " | " << arrToString(sym__0___45_4567805851496469981) << " | " << arrToString(sym__0___45_7971780566155543493) << " | " << arrToString(sym__0__1382282970499677142) << " | " << arrToString(sym__0__5011297957218063582) << " | " << arrToString(sym__0___45_3550325263493409460) << " | " << sym__0__6529948146205169113 << " | " << arrToString(sym__0__6661097005291578729) << " | " << arrToString(sym__0___45_7469900952409713322) << " | " << arrToString(sym__0___45_8598458868422699732) << " | " << arrToString(sym__0___45_6414117357071051226) << " | " << arrToString(sym__0__4421059099170388330) << " | " << arrToString(sym__0___45_108714048876090312) << " | " << sym__0__5441078539661244851 << " | " << arrToString(sym__0___45_8326498932109471738);
    return o.str();
  }
  bool operator <(const Record2& otherRec) const{
    return (otherRec.sym__0__3749202613835539516 < sym__0__3749202613835539516 && (otherRec.sym__0__3853910811136206439 < sym__0__3853910811136206439 && (otherRec.sym__0___45_4812439514081860187 < sym__0___45_4812439514081860187 && (otherRec.sym__0__8141341990593755227 < sym__0__8141341990593755227 && (otherRec.sym__0___45_1677497998823335159 < sym__0___45_1677497998823335159 && (otherRec.sym__0__7067889907208718136 < sym__0__7067889907208718136 && (otherRec.sym__0__2063264474794950631 < sym__0__2063264474794950631 && (otherRec.sym__0___45_2406203400319404933 < sym__0___45_2406203400319404933 && (otherRec.sym__0__9081834897704197137 < sym__0__9081834897704197137 && (otherRec.sym__0___45_8323320223000960471 < sym__0___45_8323320223000960471 && (otherRec.sym__0___45_8331347243081162497 < sym__0___45_8331347243081162497 && (otherRec.sym__0___45_2390083838583420092 < sym__0___45_2390083838583420092 && (otherRec.sym__0__2912236000029059069 < sym__0__2912236000029059069 && (otherRec.sym__0__3653370686033553860 < sym__0__3653370686033553860 && (otherRec.sym__0__5936012595412334150 < sym__0__5936012595412334150 && (otherRec.sym__0___45_1816837998167001175 < sym__0___45_1816837998167001175 && (otherRec.sym__0__7545091206599238681 < sym__0__7545091206599238681 && (otherRec.sym__0___45_1424559208137584517 < sym__0___45_1424559208137584517 && (otherRec.sym__0__6395144509512964253 < sym__0__6395144509512964253 && (otherRec.sym__0__9182535146594246451 < sym__0__9182535146594246451 && (otherRec.sym__0__280815916194286583 < sym__0__280815916194286583 && (otherRec.sym__0__2540705042138486592 < sym__0__2540705042138486592 && (otherRec.sym__0__8281520224814360410 < sym__0__8281520224814360410 && (otherRec.sym__0__3059107448055216658 < sym__0__3059107448055216658 && (otherRec.sym__0__5947624015539765847 < sym__0__5947624015539765847 && (otherRec.sym__0___45_9066590480537882041 < sym__0___45_9066590480537882041 && (otherRec.sym__0___45_5447174107187519735 < sym__0___45_5447174107187519735 && (otherRec.sym__0___45_3420603495949690014 < sym__0___45_3420603495949690014 && (otherRec.sym__0___45_9004707282254064716 < sym__0___45_9004707282254064716 && (otherRec.sym__0___45_4063231403699784718 < sym__0___45_4063231403699784718 && (otherRec.sym__0___45_1843583846408941393 < sym__0___45_1843583846408941393 && (otherRec.sym__0__3878271002552174104 < sym__0__3878271002552174104 && (otherRec.sym__0__6118668371652612367 < sym__0__6118668371652612367 && (otherRec.sym__0___45_2229254424656099401 < sym__0___45_2229254424656099401 && (otherRec.sym__0___45_7776418238460988847 < sym__0___45_7776418238460988847 && (otherRec.sym__0__4886447806562354754 < sym__0__4886447806562354754 && (otherRec.sym__0___45_4567805851496469981 < sym__0___45_4567805851496469981 && (otherRec.sym__0___45_7971780566155543493 < sym__0___45_7971780566155543493 && (otherRec.sym__0__1382282970499677142 < sym__0__1382282970499677142 && (otherRec.sym__0__5011297957218063582 < sym__0__5011297957218063582 && (otherRec.sym__0___45_3550325263493409460 < sym__0___45_3550325263493409460 && (otherRec.sym__0__6529948146205169113 < sym__0__6529948146205169113 && (otherRec.sym__0__6661097005291578729 < sym__0__6661097005291578729 && (otherRec.sym__0___45_7469900952409713322 < sym__0___45_7469900952409713322 && (otherRec.sym__0___45_8598458868422699732 < sym__0___45_8598458868422699732 && (otherRec.sym__0___45_6414117357071051226 < sym__0___45_6414117357071051226 && (otherRec.sym__0__4421059099170388330 < sym__0__4421059099170388330 && (otherRec.sym__0___45_108714048876090312 < sym__0___45_108714048876090312 && (otherRec.sym__0__5441078539661244851 < sym__0__5441078539661244851 && otherRec.sym__0___45_8326498932109471738 < sym__0___45_8326498932109471738)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record2& otherRec) const{
    return (otherRec.sym__0__3749202613835539516 == sym__0__3749202613835539516 && (otherRec.sym__0__3853910811136206439 == sym__0__3853910811136206439 && (otherRec.sym__0___45_4812439514081860187 == sym__0___45_4812439514081860187 && (otherRec.sym__0__8141341990593755227 == sym__0__8141341990593755227 && (otherRec.sym__0___45_1677497998823335159 == sym__0___45_1677497998823335159 && (otherRec.sym__0__7067889907208718136 == sym__0__7067889907208718136 && (otherRec.sym__0__2063264474794950631 == sym__0__2063264474794950631 && (otherRec.sym__0___45_2406203400319404933 == sym__0___45_2406203400319404933 && (otherRec.sym__0__9081834897704197137 == sym__0__9081834897704197137 && (otherRec.sym__0___45_8323320223000960471 == sym__0___45_8323320223000960471 && (otherRec.sym__0___45_8331347243081162497 == sym__0___45_8331347243081162497 && (otherRec.sym__0___45_2390083838583420092 == sym__0___45_2390083838583420092 && (otherRec.sym__0__2912236000029059069 == sym__0__2912236000029059069 && (otherRec.sym__0__3653370686033553860 == sym__0__3653370686033553860 && (otherRec.sym__0__5936012595412334150 == sym__0__5936012595412334150 && (otherRec.sym__0___45_1816837998167001175 == sym__0___45_1816837998167001175 && (otherRec.sym__0__7545091206599238681 == sym__0__7545091206599238681 && (otherRec.sym__0___45_1424559208137584517 == sym__0___45_1424559208137584517 && (otherRec.sym__0__6395144509512964253 == sym__0__6395144509512964253 && (otherRec.sym__0__9182535146594246451 == sym__0__9182535146594246451 && (otherRec.sym__0__280815916194286583 == sym__0__280815916194286583 && (otherRec.sym__0__2540705042138486592 == sym__0__2540705042138486592 && (otherRec.sym__0__8281520224814360410 == sym__0__8281520224814360410 && (otherRec.sym__0__3059107448055216658 == sym__0__3059107448055216658 && (otherRec.sym__0__5947624015539765847 == sym__0__5947624015539765847 && (otherRec.sym__0___45_9066590480537882041 == sym__0___45_9066590480537882041 && (otherRec.sym__0___45_5447174107187519735 == sym__0___45_5447174107187519735 && (otherRec.sym__0___45_3420603495949690014 == sym__0___45_3420603495949690014 && (otherRec.sym__0___45_9004707282254064716 == sym__0___45_9004707282254064716 && (otherRec.sym__0___45_4063231403699784718 == sym__0___45_4063231403699784718 && (otherRec.sym__0___45_1843583846408941393 == sym__0___45_1843583846408941393 && (otherRec.sym__0__3878271002552174104 == sym__0__3878271002552174104 && (otherRec.sym__0__6118668371652612367 == sym__0__6118668371652612367 && (otherRec.sym__0___45_2229254424656099401 == sym__0___45_2229254424656099401 && (otherRec.sym__0___45_7776418238460988847 == sym__0___45_7776418238460988847 && (otherRec.sym__0__4886447806562354754 == sym__0__4886447806562354754 && (otherRec.sym__0___45_4567805851496469981 == sym__0___45_4567805851496469981 && (otherRec.sym__0___45_7971780566155543493 == sym__0___45_7971780566155543493 && (otherRec.sym__0__1382282970499677142 == sym__0__1382282970499677142 && (otherRec.sym__0__5011297957218063582 == sym__0__5011297957218063582 && (otherRec.sym__0___45_3550325263493409460 == sym__0___45_3550325263493409460 && (otherRec.sym__0__6529948146205169113 == sym__0__6529948146205169113 && (otherRec.sym__0__6661097005291578729 == sym__0__6661097005291578729 && (otherRec.sym__0___45_7469900952409713322 == sym__0___45_7469900952409713322 && (otherRec.sym__0___45_8598458868422699732 == sym__0___45_8598458868422699732 && (otherRec.sym__0___45_6414117357071051226 == sym__0___45_6414117357071051226 && (otherRec.sym__0__4421059099170388330 == sym__0__4421059099170388330 && (otherRec.sym__0___45_108714048876090312 == sym__0___45_108714048876090312 && (otherRec.sym__0__5441078539661244851 == sym__0__5441078539661244851 && otherRec.sym__0___45_8326498932109471738 == sym__0___45_8326498932109471738)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record2& otherRec) const{
    return (otherRec.sym__0__3749202613835539516 != sym__0__3749202613835539516 || (otherRec.sym__0__3853910811136206439 != sym__0__3853910811136206439 || (otherRec.sym__0___45_4812439514081860187 != sym__0___45_4812439514081860187 || (otherRec.sym__0__8141341990593755227 != sym__0__8141341990593755227 || (otherRec.sym__0___45_1677497998823335159 != sym__0___45_1677497998823335159 || (otherRec.sym__0__7067889907208718136 != sym__0__7067889907208718136 || (otherRec.sym__0__2063264474794950631 != sym__0__2063264474794950631 || (otherRec.sym__0___45_2406203400319404933 != sym__0___45_2406203400319404933 || (otherRec.sym__0__9081834897704197137 != sym__0__9081834897704197137 || (otherRec.sym__0___45_8323320223000960471 != sym__0___45_8323320223000960471 || (otherRec.sym__0___45_8331347243081162497 != sym__0___45_8331347243081162497 || (otherRec.sym__0___45_2390083838583420092 != sym__0___45_2390083838583420092 || (otherRec.sym__0__2912236000029059069 != sym__0__2912236000029059069 || (otherRec.sym__0__3653370686033553860 != sym__0__3653370686033553860 || (otherRec.sym__0__5936012595412334150 != sym__0__5936012595412334150 || (otherRec.sym__0___45_1816837998167001175 != sym__0___45_1816837998167001175 || (otherRec.sym__0__7545091206599238681 != sym__0__7545091206599238681 || (otherRec.sym__0___45_1424559208137584517 != sym__0___45_1424559208137584517 || (otherRec.sym__0__6395144509512964253 != sym__0__6395144509512964253 || (otherRec.sym__0__9182535146594246451 != sym__0__9182535146594246451 || (otherRec.sym__0__280815916194286583 != sym__0__280815916194286583 || (otherRec.sym__0__2540705042138486592 != sym__0__2540705042138486592 || (otherRec.sym__0__8281520224814360410 != sym__0__8281520224814360410 || (otherRec.sym__0__3059107448055216658 != sym__0__3059107448055216658 || (otherRec.sym__0__5947624015539765847 != sym__0__5947624015539765847 || (otherRec.sym__0___45_9066590480537882041 != sym__0___45_9066590480537882041 || (otherRec.sym__0___45_5447174107187519735 != sym__0___45_5447174107187519735 || (otherRec.sym__0___45_3420603495949690014 != sym__0___45_3420603495949690014 || (otherRec.sym__0___45_9004707282254064716 != sym__0___45_9004707282254064716 || (otherRec.sym__0___45_4063231403699784718 != sym__0___45_4063231403699784718 || (otherRec.sym__0___45_1843583846408941393 != sym__0___45_1843583846408941393 || (otherRec.sym__0__3878271002552174104 != sym__0__3878271002552174104 || (otherRec.sym__0__6118668371652612367 != sym__0__6118668371652612367 || (otherRec.sym__0___45_2229254424656099401 != sym__0___45_2229254424656099401 || (otherRec.sym__0___45_7776418238460988847 != sym__0___45_7776418238460988847 || (otherRec.sym__0__4886447806562354754 != sym__0__4886447806562354754 || (otherRec.sym__0___45_4567805851496469981 != sym__0___45_4567805851496469981 || (otherRec.sym__0___45_7971780566155543493 != sym__0___45_7971780566155543493 || (otherRec.sym__0__1382282970499677142 != sym__0__1382282970499677142 || (otherRec.sym__0__5011297957218063582 != sym__0__5011297957218063582 || (otherRec.sym__0___45_3550325263493409460 != sym__0___45_3550325263493409460 || (otherRec.sym__0__6529948146205169113 != sym__0__6529948146205169113 || (otherRec.sym__0__6661097005291578729 != sym__0__6661097005291578729 || (otherRec.sym__0___45_7469900952409713322 != sym__0___45_7469900952409713322 || (otherRec.sym__0___45_8598458868422699732 != sym__0___45_8598458868422699732 || (otherRec.sym__0___45_6414117357071051226 != sym__0___45_6414117357071051226 || (otherRec.sym__0__4421059099170388330 != sym__0__4421059099170388330 || (otherRec.sym__0___45_108714048876090312 != sym__0___45_108714048876090312 || (otherRec.sym__0__5441078539661244851 != sym__0__5441078539661244851 || otherRec.sym__0___45_8326498932109471738 != sym__0___45_8326498932109471738)))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__3749202613835539516;
  fluidb_string<25> sym__0__3853910811136206439;
  fluidb_string<40> sym__0___45_4812439514081860187;
  fluidb_string<16> sym__0__8141341990593755227;
  fluidb_string<16> sym__0___45_1677497998823335159;
  fluidb_string<13> sym__0__7067889907208718136;
  fluidb_string<15> sym__0__2063264474794950631;
  unsigned sym__0___45_2406203400319404933;
  int sym__0__9081834897704197137;
  unsigned sym__0___45_8323320223000960471;
  unsigned sym__0___45_8331347243081162497;
  unsigned sym__0___45_2390083838583420092;
  unsigned sym__0__2912236000029059069;
  fluidb_string<21> sym__0__3653370686033553860;
  unsigned sym__0__5936012595412334150;
  fluidb_string<10> sym__0___45_1816837998167001175;
  unsigned sym__0__7545091206599238681;
  double sym__0___45_1424559208137584517;
  unsigned sym__0__6395144509512964253;
  double sym__0__9182535146594246451;
  unsigned sym__0__280815916194286583;
  unsigned sym__0__2540705042138486592;
  double sym__0__8281520224814360410;
  fluidb_string<13> sym__0__3059107448055216658;
  unsigned sym__0__5947624015539765847;
  fluidb_string<18> sym__0___45_9066590480537882041;
  fluidb_string<9> sym__0___45_5447174107187519735;
  fluidb_string<9> sym__0___45_3420603495949690014;
  unsigned sym__0___45_9004707282254064716;
  unsigned sym__0___45_4063231403699784718;
  fluidb_string<7> sym__0___45_1843583846408941393;
  unsigned sym__0__3878271002552174104;
  unsigned sym__0__6118668371652612367;
  unsigned sym__0___45_2229254424656099401;
  unsigned sym__0___45_7776418238460988847;
  unsigned sym__0__4886447806562354754;
  fluidb_string<15> sym__0___45_4567805851496469981;
  fluidb_string<2> sym__0___45_7971780566155543493;
  fluidb_string<2> sym__0__1382282970499677142;
  fluidb_string<2> sym__0__5011297957218063582;
  fluidb_string<2> sym__0___45_3550325263493409460;
  unsigned sym__0__6529948146205169113;
  fluidb_string<55> sym__0__6661097005291578729;
  fluidb_string<25> sym__0___45_7469900952409713322;
  fluidb_string<7> sym__0___45_8598458868422699732;
  fluidb_string<10> sym__0___45_6414117357071051226;
  fluidb_string<11> sym__0__4421059099170388330;
  fluidb_string<25> sym__0___45_108714048876090312;
  unsigned sym__0__5441078539661244851;
  fluidb_string<10> sym__0___45_8326498932109471738;
 private:
};


class Record4 {
 public:
  Record4(unsigned __sym__0__7178003535380331304, fluidb_string<55> __sym__0___45_7020257275696364520, fluidb_string<25> __sym__0___45_6307179734719967033, fluidb_string<7> __sym__0__4568304886257136061, fluidb_string<10> __sym__0___45_6291097039630000265, fluidb_string<11> __sym__0__551327770031967739, fluidb_string<25> __sym__0__3827696365022297353, unsigned __sym__0___45_1779543743759935870, fluidb_string<10> __sym__0__3752090135924368535) : sym__0__7178003535380331304(__sym__0__7178003535380331304), sym__0___45_7020257275696364520(__sym__0___45_7020257275696364520), sym__0___45_6307179734719967033(__sym__0___45_6307179734719967033), sym__0__4568304886257136061(__sym__0__4568304886257136061), sym__0___45_6291097039630000265(__sym__0___45_6291097039630000265), sym__0__551327770031967739(__sym__0__551327770031967739), sym__0__3827696365022297353(__sym__0__3827696365022297353), sym__0___45_1779543743759935870(__sym__0___45_1779543743759935870), sym__0__3752090135924368535(__sym__0__3752090135924368535)
  {
  }
  Record4() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__7178003535380331304 << " | " << arrToString(sym__0___45_7020257275696364520) << " | " << arrToString(sym__0___45_6307179734719967033) << " | " << arrToString(sym__0__4568304886257136061) << " | " << arrToString(sym__0___45_6291097039630000265) << " | " << arrToString(sym__0__551327770031967739) << " | " << arrToString(sym__0__3827696365022297353) << " | " << sym__0___45_1779543743759935870 << " | " << arrToString(sym__0__3752090135924368535);
    return o.str();
  }
  bool operator <(const Record4& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 < sym__0__7178003535380331304 && (otherRec.sym__0___45_7020257275696364520 < sym__0___45_7020257275696364520 && (otherRec.sym__0___45_6307179734719967033 < sym__0___45_6307179734719967033 && (otherRec.sym__0__4568304886257136061 < sym__0__4568304886257136061 && (otherRec.sym__0___45_6291097039630000265 < sym__0___45_6291097039630000265 && (otherRec.sym__0__551327770031967739 < sym__0__551327770031967739 && (otherRec.sym__0__3827696365022297353 < sym__0__3827696365022297353 && (otherRec.sym__0___45_1779543743759935870 < sym__0___45_1779543743759935870 && otherRec.sym__0__3752090135924368535 < sym__0__3752090135924368535))))))));
  }
  bool operator ==(const Record4& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 == sym__0__7178003535380331304 && (otherRec.sym__0___45_7020257275696364520 == sym__0___45_7020257275696364520 && (otherRec.sym__0___45_6307179734719967033 == sym__0___45_6307179734719967033 && (otherRec.sym__0__4568304886257136061 == sym__0__4568304886257136061 && (otherRec.sym__0___45_6291097039630000265 == sym__0___45_6291097039630000265 && (otherRec.sym__0__551327770031967739 == sym__0__551327770031967739 && (otherRec.sym__0__3827696365022297353 == sym__0__3827696365022297353 && (otherRec.sym__0___45_1779543743759935870 == sym__0___45_1779543743759935870 && otherRec.sym__0__3752090135924368535 == sym__0__3752090135924368535))))))));
  }
  bool operator !=(const Record4& otherRec) const{
    return (otherRec.sym__0__7178003535380331304 != sym__0__7178003535380331304 || (otherRec.sym__0___45_7020257275696364520 != sym__0___45_7020257275696364520 || (otherRec.sym__0___45_6307179734719967033 != sym__0___45_6307179734719967033 || (otherRec.sym__0__4568304886257136061 != sym__0__4568304886257136061 || (otherRec.sym__0___45_6291097039630000265 != sym__0___45_6291097039630000265 || (otherRec.sym__0__551327770031967739 != sym__0__551327770031967739 || (otherRec.sym__0__3827696365022297353 != sym__0__3827696365022297353 || (otherRec.sym__0___45_1779543743759935870 != sym__0___45_1779543743759935870 || otherRec.sym__0__3752090135924368535 != sym__0__3752090135924368535))))))));
  }
  unsigned sym__0__7178003535380331304;
  fluidb_string<55> sym__0___45_7020257275696364520;
  fluidb_string<25> sym__0___45_6307179734719967033;
  fluidb_string<7> sym__0__4568304886257136061;
  fluidb_string<10> sym__0___45_6291097039630000265;
  fluidb_string<11> sym__0__551327770031967739;
  fluidb_string<25> sym__0__3827696365022297353;
  unsigned sym__0___45_1779543743759935870;
  fluidb_string<10> sym__0__3752090135924368535;
 private:
};


class Record9 {
 public:
  Record9(unsigned __sym__0___45_7574074018531922998, int __sym__0__1125464382786937920, unsigned __sym__0___45_8257174981563598792, unsigned __sym__0__957746932829998382, unsigned __sym__0__934137931677987637, unsigned __sym__0___45_7332894783442362324, fluidb_string<21> __sym__0__8974811218372806325, unsigned __sym__0___45_5217562530132451785, fluidb_string<10> __sym__0__7851147553396318904, unsigned __sym__0___45_4975505511391694456, double __sym__0___45_7249986409969561654, unsigned __sym__0__4671626969570181580, double __sym__0___45_3666121704283105054, unsigned __sym__0__5495011930072844518, unsigned __sym__0___45_4423447118092167055, double __sym__0___45_1608082021099887893, fluidb_string<13> __sym__0__1584187396639360899) : sym__0___45_7574074018531922998(__sym__0___45_7574074018531922998), sym__0__1125464382786937920(__sym__0__1125464382786937920), sym__0___45_8257174981563598792(__sym__0___45_8257174981563598792), sym__0__957746932829998382(__sym__0__957746932829998382), sym__0__934137931677987637(__sym__0__934137931677987637), sym__0___45_7332894783442362324(__sym__0___45_7332894783442362324), sym__0__8974811218372806325(__sym__0__8974811218372806325), sym__0___45_5217562530132451785(__sym__0___45_5217562530132451785), sym__0__7851147553396318904(__sym__0__7851147553396318904), sym__0___45_4975505511391694456(__sym__0___45_4975505511391694456), sym__0___45_7249986409969561654(__sym__0___45_7249986409969561654), sym__0__4671626969570181580(__sym__0__4671626969570181580), sym__0___45_3666121704283105054(__sym__0___45_3666121704283105054), sym__0__5495011930072844518(__sym__0__5495011930072844518), sym__0___45_4423447118092167055(__sym__0___45_4423447118092167055), sym__0___45_1608082021099887893(__sym__0___45_1608082021099887893), sym__0__1584187396639360899(__sym__0__1584187396639360899)
  {
  }
  Record9() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_7574074018531922998 << " | " << sym__0__1125464382786937920 << " | " << sym__0___45_8257174981563598792 << " | " << sym__0__957746932829998382 << " | " << sym__0__934137931677987637 << " | " << sym__0___45_7332894783442362324 << " | " << arrToString(sym__0__8974811218372806325) << " | " << sym__0___45_5217562530132451785 << " | " << arrToString(sym__0__7851147553396318904) << " | " << sym__0___45_4975505511391694456 << " | " << sym__0___45_7249986409969561654 << " | " << sym__0__4671626969570181580 << " | " << sym__0___45_3666121704283105054 << " | " << sym__0__5495011930072844518 << " | " << sym__0___45_4423447118092167055 << " | " << sym__0___45_1608082021099887893 << " | " << arrToString(sym__0__1584187396639360899);
    return o.str();
  }
  bool operator <(const Record9& otherRec) const{
    return (otherRec.sym__0___45_7574074018531922998 < sym__0___45_7574074018531922998 && (otherRec.sym__0__1125464382786937920 < sym__0__1125464382786937920 && (otherRec.sym__0___45_8257174981563598792 < sym__0___45_8257174981563598792 && (otherRec.sym__0__957746932829998382 < sym__0__957746932829998382 && (otherRec.sym__0__934137931677987637 < sym__0__934137931677987637 && (otherRec.sym__0___45_7332894783442362324 < sym__0___45_7332894783442362324 && (otherRec.sym__0__8974811218372806325 < sym__0__8974811218372806325 && (otherRec.sym__0___45_5217562530132451785 < sym__0___45_5217562530132451785 && (otherRec.sym__0__7851147553396318904 < sym__0__7851147553396318904 && (otherRec.sym__0___45_4975505511391694456 < sym__0___45_4975505511391694456 && (otherRec.sym__0___45_7249986409969561654 < sym__0___45_7249986409969561654 && (otherRec.sym__0__4671626969570181580 < sym__0__4671626969570181580 && (otherRec.sym__0___45_3666121704283105054 < sym__0___45_3666121704283105054 && (otherRec.sym__0__5495011930072844518 < sym__0__5495011930072844518 && (otherRec.sym__0___45_4423447118092167055 < sym__0___45_4423447118092167055 && (otherRec.sym__0___45_1608082021099887893 < sym__0___45_1608082021099887893 && otherRec.sym__0__1584187396639360899 < sym__0__1584187396639360899))))))))))))))));
  }
  bool operator ==(const Record9& otherRec) const{
    return (otherRec.sym__0___45_7574074018531922998 == sym__0___45_7574074018531922998 && (otherRec.sym__0__1125464382786937920 == sym__0__1125464382786937920 && (otherRec.sym__0___45_8257174981563598792 == sym__0___45_8257174981563598792 && (otherRec.sym__0__957746932829998382 == sym__0__957746932829998382 && (otherRec.sym__0__934137931677987637 == sym__0__934137931677987637 && (otherRec.sym__0___45_7332894783442362324 == sym__0___45_7332894783442362324 && (otherRec.sym__0__8974811218372806325 == sym__0__8974811218372806325 && (otherRec.sym__0___45_5217562530132451785 == sym__0___45_5217562530132451785 && (otherRec.sym__0__7851147553396318904 == sym__0__7851147553396318904 && (otherRec.sym__0___45_4975505511391694456 == sym__0___45_4975505511391694456 && (otherRec.sym__0___45_7249986409969561654 == sym__0___45_7249986409969561654 && (otherRec.sym__0__4671626969570181580 == sym__0__4671626969570181580 && (otherRec.sym__0___45_3666121704283105054 == sym__0___45_3666121704283105054 && (otherRec.sym__0__5495011930072844518 == sym__0__5495011930072844518 && (otherRec.sym__0___45_4423447118092167055 == sym__0___45_4423447118092167055 && (otherRec.sym__0___45_1608082021099887893 == sym__0___45_1608082021099887893 && otherRec.sym__0__1584187396639360899 == sym__0__1584187396639360899))))))))))))))));
  }
  bool operator !=(const Record9& otherRec) const{
    return (otherRec.sym__0___45_7574074018531922998 != sym__0___45_7574074018531922998 || (otherRec.sym__0__1125464382786937920 != sym__0__1125464382786937920 || (otherRec.sym__0___45_8257174981563598792 != sym__0___45_8257174981563598792 || (otherRec.sym__0__957746932829998382 != sym__0__957746932829998382 || (otherRec.sym__0__934137931677987637 != sym__0__934137931677987637 || (otherRec.sym__0___45_7332894783442362324 != sym__0___45_7332894783442362324 || (otherRec.sym__0__8974811218372806325 != sym__0__8974811218372806325 || (otherRec.sym__0___45_5217562530132451785 != sym__0___45_5217562530132451785 || (otherRec.sym__0__7851147553396318904 != sym__0__7851147553396318904 || (otherRec.sym__0___45_4975505511391694456 != sym__0___45_4975505511391694456 || (otherRec.sym__0___45_7249986409969561654 != sym__0___45_7249986409969561654 || (otherRec.sym__0__4671626969570181580 != sym__0__4671626969570181580 || (otherRec.sym__0___45_3666121704283105054 != sym__0___45_3666121704283105054 || (otherRec.sym__0__5495011930072844518 != sym__0__5495011930072844518 || (otherRec.sym__0___45_4423447118092167055 != sym__0___45_4423447118092167055 || (otherRec.sym__0___45_1608082021099887893 != sym__0___45_1608082021099887893 || otherRec.sym__0__1584187396639360899 != sym__0__1584187396639360899))))))))))))))));
  }
  unsigned sym__0___45_7574074018531922998;
  int sym__0__1125464382786937920;
  unsigned sym__0___45_8257174981563598792;
  unsigned sym__0__957746932829998382;
  unsigned sym__0__934137931677987637;
  unsigned sym__0___45_7332894783442362324;
  fluidb_string<21> sym__0__8974811218372806325;
  unsigned sym__0___45_5217562530132451785;
  fluidb_string<10> sym__0__7851147553396318904;
  unsigned sym__0___45_4975505511391694456;
  double sym__0___45_7249986409969561654;
  unsigned sym__0__4671626969570181580;
  double sym__0___45_3666121704283105054;
  unsigned sym__0__5495011930072844518;
  unsigned sym__0___45_4423447118092167055;
  double sym__0___45_1608082021099887893;
  fluidb_string<13> sym__0__1584187396639360899;
 private:
};


class Record29 {
 public:
  Record29(unsigned __sym__0__6600743152885821739, fluidb_string<25> __sym__0__8327451819077700100, fluidb_string<40> __sym__0__6397198241134363110, fluidb_string<16> __sym__0___45_5337640715365439464, fluidb_string<16> __sym__0__6843344685518481994, fluidb_string<13> __sym__0___45_281035451017513097, fluidb_string<15> __sym__0__978963012373614724, unsigned __sym__0___45_138255197005962184, int __sym__0__8723886903896913538, unsigned __sym__0___45_6396778144419774102, unsigned __sym__0__4345290193888622188, unsigned __sym__0__4748858544164465891, unsigned __sym__0___45_2013870166617871634, fluidb_string<21> __sym__0__4486213189679553123, unsigned __sym__0__2044116807841453321, fluidb_string<10> __sym__0__5619260977463858154, unsigned __sym__0___45_8920615137005718662, double __sym__0__2992813735709491256, unsigned __sym__0___45_4738111187081458162, double __sym__0__7342994916058425376, unsigned __sym__0___45_102160816985196364, unsigned __sym__0__1283865848515870159, double __sym__0___45_6653948180198187699, fluidb_string<13> __sym__0__1838544743518506357, unsigned __sym__0__7577655604576576020, fluidb_string<18> __sym__0___45_2957579613704386588, fluidb_string<9> __sym__0__3873855183530032714, fluidb_string<9> __sym__0___45_5414786619423294939, unsigned __sym__0__5557137180551786739, unsigned __sym__0___45_6042740597378878507, fluidb_string<7> __sym__0___45_5833642980832303428, unsigned __sym__0___45_5108599129385010601, unsigned __sym__0__6596363747273139740, unsigned __sym__0___45_3780820615727466252, unsigned __sym__0___45_5733022218377332670, unsigned __sym__0___45_1101619184546797307, fluidb_string<15> __sym__0__5315661629871309616, fluidb_string<2> __sym__0__1548970624774688888, fluidb_string<2> __sym__0__3082040486510970809, fluidb_string<2> __sym__0___45_3773548088295367727, fluidb_string<2> __sym__0__2425475927764529115, unsigned __sym__0__3550854697533762172, fluidb_string<18> __sym__0___45_2428002636247423964, fluidb_string<40> __sym__0__2537603616087343230, fluidb_string<11> __sym__0___45_5133924085204218680, fluidb_string<15> __sym__0__1411885469038113506, fluidb_string<13> __sym__0___45_4336521243533294241, fluidb_string<15> __sym__0___45_2416233287424533084, fluidb_string<21> __sym__0___45_8608893297661193168) : sym__0__6600743152885821739(__sym__0__6600743152885821739), sym__0__8327451819077700100(__sym__0__8327451819077700100), sym__0__6397198241134363110(__sym__0__6397198241134363110), sym__0___45_5337640715365439464(__sym__0___45_5337640715365439464), sym__0__6843344685518481994(__sym__0__6843344685518481994), sym__0___45_281035451017513097(__sym__0___45_281035451017513097), sym__0__978963012373614724(__sym__0__978963012373614724), sym__0___45_138255197005962184(__sym__0___45_138255197005962184), sym__0__8723886903896913538(__sym__0__8723886903896913538), sym__0___45_6396778144419774102(__sym__0___45_6396778144419774102), sym__0__4345290193888622188(__sym__0__4345290193888622188), sym__0__4748858544164465891(__sym__0__4748858544164465891), sym__0___45_2013870166617871634(__sym__0___45_2013870166617871634), sym__0__4486213189679553123(__sym__0__4486213189679553123), sym__0__2044116807841453321(__sym__0__2044116807841453321), sym__0__5619260977463858154(__sym__0__5619260977463858154), sym__0___45_8920615137005718662(__sym__0___45_8920615137005718662), sym__0__2992813735709491256(__sym__0__2992813735709491256), sym__0___45_4738111187081458162(__sym__0___45_4738111187081458162), sym__0__7342994916058425376(__sym__0__7342994916058425376), sym__0___45_102160816985196364(__sym__0___45_102160816985196364), sym__0__1283865848515870159(__sym__0__1283865848515870159), sym__0___45_6653948180198187699(__sym__0___45_6653948180198187699), sym__0__1838544743518506357(__sym__0__1838544743518506357), sym__0__7577655604576576020(__sym__0__7577655604576576020), sym__0___45_2957579613704386588(__sym__0___45_2957579613704386588), sym__0__3873855183530032714(__sym__0__3873855183530032714), sym__0___45_5414786619423294939(__sym__0___45_5414786619423294939), sym__0__5557137180551786739(__sym__0__5557137180551786739), sym__0___45_6042740597378878507(__sym__0___45_6042740597378878507), sym__0___45_5833642980832303428(__sym__0___45_5833642980832303428), sym__0___45_5108599129385010601(__sym__0___45_5108599129385010601), sym__0__6596363747273139740(__sym__0__6596363747273139740), sym__0___45_3780820615727466252(__sym__0___45_3780820615727466252), sym__0___45_5733022218377332670(__sym__0___45_5733022218377332670), sym__0___45_1101619184546797307(__sym__0___45_1101619184546797307), sym__0__5315661629871309616(__sym__0__5315661629871309616), sym__0__1548970624774688888(__sym__0__1548970624774688888), sym__0__3082040486510970809(__sym__0__3082040486510970809), sym__0___45_3773548088295367727(__sym__0___45_3773548088295367727), sym__0__2425475927764529115(__sym__0__2425475927764529115), sym__0__3550854697533762172(__sym__0__3550854697533762172), sym__0___45_2428002636247423964(__sym__0___45_2428002636247423964), sym__0__2537603616087343230(__sym__0__2537603616087343230), sym__0___45_5133924085204218680(__sym__0___45_5133924085204218680), sym__0__1411885469038113506(__sym__0__1411885469038113506), sym__0___45_4336521243533294241(__sym__0___45_4336521243533294241), sym__0___45_2416233287424533084(__sym__0___45_2416233287424533084), sym__0___45_8608893297661193168(__sym__0___45_8608893297661193168)
  {
  }
  Record29() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__6600743152885821739 << " | " << arrToString(sym__0__8327451819077700100) << " | " << arrToString(sym__0__6397198241134363110) << " | " << arrToString(sym__0___45_5337640715365439464) << " | " << arrToString(sym__0__6843344685518481994) << " | " << arrToString(sym__0___45_281035451017513097) << " | " << arrToString(sym__0__978963012373614724) << " | " << sym__0___45_138255197005962184 << " | " << sym__0__8723886903896913538 << " | " << sym__0___45_6396778144419774102 << " | " << sym__0__4345290193888622188 << " | " << sym__0__4748858544164465891 << " | " << sym__0___45_2013870166617871634 << " | " << arrToString(sym__0__4486213189679553123) << " | " << sym__0__2044116807841453321 << " | " << arrToString(sym__0__5619260977463858154) << " | " << sym__0___45_8920615137005718662 << " | " << sym__0__2992813735709491256 << " | " << sym__0___45_4738111187081458162 << " | " << sym__0__7342994916058425376 << " | " << sym__0___45_102160816985196364 << " | " << sym__0__1283865848515870159 << " | " << sym__0___45_6653948180198187699 << " | " << arrToString(sym__0__1838544743518506357) << " | " << sym__0__7577655604576576020 << " | " << arrToString(sym__0___45_2957579613704386588) << " | " << arrToString(sym__0__3873855183530032714) << " | " << arrToString(sym__0___45_5414786619423294939) << " | " << sym__0__5557137180551786739 << " | " << sym__0___45_6042740597378878507 << " | " << arrToString(sym__0___45_5833642980832303428) << " | " << sym__0___45_5108599129385010601 << " | " << sym__0__6596363747273139740 << " | " << sym__0___45_3780820615727466252 << " | " << sym__0___45_5733022218377332670 << " | " << sym__0___45_1101619184546797307 << " | " << arrToString(sym__0__5315661629871309616) << " | " << arrToString(sym__0__1548970624774688888) << " | " << arrToString(sym__0__3082040486510970809) << " | " << arrToString(sym__0___45_3773548088295367727) << " | " << arrToString(sym__0__2425475927764529115) << " | " << sym__0__3550854697533762172 << " | " << arrToString(sym__0___45_2428002636247423964) << " | " << arrToString(sym__0__2537603616087343230) << " | " << arrToString(sym__0___45_5133924085204218680) << " | " << arrToString(sym__0__1411885469038113506) << " | " << arrToString(sym__0___45_4336521243533294241) << " | " << arrToString(sym__0___45_2416233287424533084) << " | " << arrToString(sym__0___45_8608893297661193168);
    return o.str();
  }
  bool operator <(const Record29& otherRec) const{
    return (otherRec.sym__0__6600743152885821739 < sym__0__6600743152885821739 && (otherRec.sym__0__8327451819077700100 < sym__0__8327451819077700100 && (otherRec.sym__0__6397198241134363110 < sym__0__6397198241134363110 && (otherRec.sym__0___45_5337640715365439464 < sym__0___45_5337640715365439464 && (otherRec.sym__0__6843344685518481994 < sym__0__6843344685518481994 && (otherRec.sym__0___45_281035451017513097 < sym__0___45_281035451017513097 && (otherRec.sym__0__978963012373614724 < sym__0__978963012373614724 && (otherRec.sym__0___45_138255197005962184 < sym__0___45_138255197005962184 && (otherRec.sym__0__8723886903896913538 < sym__0__8723886903896913538 && (otherRec.sym__0___45_6396778144419774102 < sym__0___45_6396778144419774102 && (otherRec.sym__0__4345290193888622188 < sym__0__4345290193888622188 && (otherRec.sym__0__4748858544164465891 < sym__0__4748858544164465891 && (otherRec.sym__0___45_2013870166617871634 < sym__0___45_2013870166617871634 && (otherRec.sym__0__4486213189679553123 < sym__0__4486213189679553123 && (otherRec.sym__0__2044116807841453321 < sym__0__2044116807841453321 && (otherRec.sym__0__5619260977463858154 < sym__0__5619260977463858154 && (otherRec.sym__0___45_8920615137005718662 < sym__0___45_8920615137005718662 && (otherRec.sym__0__2992813735709491256 < sym__0__2992813735709491256 && (otherRec.sym__0___45_4738111187081458162 < sym__0___45_4738111187081458162 && (otherRec.sym__0__7342994916058425376 < sym__0__7342994916058425376 && (otherRec.sym__0___45_102160816985196364 < sym__0___45_102160816985196364 && (otherRec.sym__0__1283865848515870159 < sym__0__1283865848515870159 && (otherRec.sym__0___45_6653948180198187699 < sym__0___45_6653948180198187699 && (otherRec.sym__0__1838544743518506357 < sym__0__1838544743518506357 && (otherRec.sym__0__7577655604576576020 < sym__0__7577655604576576020 && (otherRec.sym__0___45_2957579613704386588 < sym__0___45_2957579613704386588 && (otherRec.sym__0__3873855183530032714 < sym__0__3873855183530032714 && (otherRec.sym__0___45_5414786619423294939 < sym__0___45_5414786619423294939 && (otherRec.sym__0__5557137180551786739 < sym__0__5557137180551786739 && (otherRec.sym__0___45_6042740597378878507 < sym__0___45_6042740597378878507 && (otherRec.sym__0___45_5833642980832303428 < sym__0___45_5833642980832303428 && (otherRec.sym__0___45_5108599129385010601 < sym__0___45_5108599129385010601 && (otherRec.sym__0__6596363747273139740 < sym__0__6596363747273139740 && (otherRec.sym__0___45_3780820615727466252 < sym__0___45_3780820615727466252 && (otherRec.sym__0___45_5733022218377332670 < sym__0___45_5733022218377332670 && (otherRec.sym__0___45_1101619184546797307 < sym__0___45_1101619184546797307 && (otherRec.sym__0__5315661629871309616 < sym__0__5315661629871309616 && (otherRec.sym__0__1548970624774688888 < sym__0__1548970624774688888 && (otherRec.sym__0__3082040486510970809 < sym__0__3082040486510970809 && (otherRec.sym__0___45_3773548088295367727 < sym__0___45_3773548088295367727 && (otherRec.sym__0__2425475927764529115 < sym__0__2425475927764529115 && (otherRec.sym__0__3550854697533762172 < sym__0__3550854697533762172 && (otherRec.sym__0___45_2428002636247423964 < sym__0___45_2428002636247423964 && (otherRec.sym__0__2537603616087343230 < sym__0__2537603616087343230 && (otherRec.sym__0___45_5133924085204218680 < sym__0___45_5133924085204218680 && (otherRec.sym__0__1411885469038113506 < sym__0__1411885469038113506 && (otherRec.sym__0___45_4336521243533294241 < sym__0___45_4336521243533294241 && (otherRec.sym__0___45_2416233287424533084 < sym__0___45_2416233287424533084 && otherRec.sym__0___45_8608893297661193168 < sym__0___45_8608893297661193168))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record29& otherRec) const{
    return (otherRec.sym__0__6600743152885821739 == sym__0__6600743152885821739 && (otherRec.sym__0__8327451819077700100 == sym__0__8327451819077700100 && (otherRec.sym__0__6397198241134363110 == sym__0__6397198241134363110 && (otherRec.sym__0___45_5337640715365439464 == sym__0___45_5337640715365439464 && (otherRec.sym__0__6843344685518481994 == sym__0__6843344685518481994 && (otherRec.sym__0___45_281035451017513097 == sym__0___45_281035451017513097 && (otherRec.sym__0__978963012373614724 == sym__0__978963012373614724 && (otherRec.sym__0___45_138255197005962184 == sym__0___45_138255197005962184 && (otherRec.sym__0__8723886903896913538 == sym__0__8723886903896913538 && (otherRec.sym__0___45_6396778144419774102 == sym__0___45_6396778144419774102 && (otherRec.sym__0__4345290193888622188 == sym__0__4345290193888622188 && (otherRec.sym__0__4748858544164465891 == sym__0__4748858544164465891 && (otherRec.sym__0___45_2013870166617871634 == sym__0___45_2013870166617871634 && (otherRec.sym__0__4486213189679553123 == sym__0__4486213189679553123 && (otherRec.sym__0__2044116807841453321 == sym__0__2044116807841453321 && (otherRec.sym__0__5619260977463858154 == sym__0__5619260977463858154 && (otherRec.sym__0___45_8920615137005718662 == sym__0___45_8920615137005718662 && (otherRec.sym__0__2992813735709491256 == sym__0__2992813735709491256 && (otherRec.sym__0___45_4738111187081458162 == sym__0___45_4738111187081458162 && (otherRec.sym__0__7342994916058425376 == sym__0__7342994916058425376 && (otherRec.sym__0___45_102160816985196364 == sym__0___45_102160816985196364 && (otherRec.sym__0__1283865848515870159 == sym__0__1283865848515870159 && (otherRec.sym__0___45_6653948180198187699 == sym__0___45_6653948180198187699 && (otherRec.sym__0__1838544743518506357 == sym__0__1838544743518506357 && (otherRec.sym__0__7577655604576576020 == sym__0__7577655604576576020 && (otherRec.sym__0___45_2957579613704386588 == sym__0___45_2957579613704386588 && (otherRec.sym__0__3873855183530032714 == sym__0__3873855183530032714 && (otherRec.sym__0___45_5414786619423294939 == sym__0___45_5414786619423294939 && (otherRec.sym__0__5557137180551786739 == sym__0__5557137180551786739 && (otherRec.sym__0___45_6042740597378878507 == sym__0___45_6042740597378878507 && (otherRec.sym__0___45_5833642980832303428 == sym__0___45_5833642980832303428 && (otherRec.sym__0___45_5108599129385010601 == sym__0___45_5108599129385010601 && (otherRec.sym__0__6596363747273139740 == sym__0__6596363747273139740 && (otherRec.sym__0___45_3780820615727466252 == sym__0___45_3780820615727466252 && (otherRec.sym__0___45_5733022218377332670 == sym__0___45_5733022218377332670 && (otherRec.sym__0___45_1101619184546797307 == sym__0___45_1101619184546797307 && (otherRec.sym__0__5315661629871309616 == sym__0__5315661629871309616 && (otherRec.sym__0__1548970624774688888 == sym__0__1548970624774688888 && (otherRec.sym__0__3082040486510970809 == sym__0__3082040486510970809 && (otherRec.sym__0___45_3773548088295367727 == sym__0___45_3773548088295367727 && (otherRec.sym__0__2425475927764529115 == sym__0__2425475927764529115 && (otherRec.sym__0__3550854697533762172 == sym__0__3550854697533762172 && (otherRec.sym__0___45_2428002636247423964 == sym__0___45_2428002636247423964 && (otherRec.sym__0__2537603616087343230 == sym__0__2537603616087343230 && (otherRec.sym__0___45_5133924085204218680 == sym__0___45_5133924085204218680 && (otherRec.sym__0__1411885469038113506 == sym__0__1411885469038113506 && (otherRec.sym__0___45_4336521243533294241 == sym__0___45_4336521243533294241 && (otherRec.sym__0___45_2416233287424533084 == sym__0___45_2416233287424533084 && otherRec.sym__0___45_8608893297661193168 == sym__0___45_8608893297661193168))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record29& otherRec) const{
    return (otherRec.sym__0__6600743152885821739 != sym__0__6600743152885821739 || (otherRec.sym__0__8327451819077700100 != sym__0__8327451819077700100 || (otherRec.sym__0__6397198241134363110 != sym__0__6397198241134363110 || (otherRec.sym__0___45_5337640715365439464 != sym__0___45_5337640715365439464 || (otherRec.sym__0__6843344685518481994 != sym__0__6843344685518481994 || (otherRec.sym__0___45_281035451017513097 != sym__0___45_281035451017513097 || (otherRec.sym__0__978963012373614724 != sym__0__978963012373614724 || (otherRec.sym__0___45_138255197005962184 != sym__0___45_138255197005962184 || (otherRec.sym__0__8723886903896913538 != sym__0__8723886903896913538 || (otherRec.sym__0___45_6396778144419774102 != sym__0___45_6396778144419774102 || (otherRec.sym__0__4345290193888622188 != sym__0__4345290193888622188 || (otherRec.sym__0__4748858544164465891 != sym__0__4748858544164465891 || (otherRec.sym__0___45_2013870166617871634 != sym__0___45_2013870166617871634 || (otherRec.sym__0__4486213189679553123 != sym__0__4486213189679553123 || (otherRec.sym__0__2044116807841453321 != sym__0__2044116807841453321 || (otherRec.sym__0__5619260977463858154 != sym__0__5619260977463858154 || (otherRec.sym__0___45_8920615137005718662 != sym__0___45_8920615137005718662 || (otherRec.sym__0__2992813735709491256 != sym__0__2992813735709491256 || (otherRec.sym__0___45_4738111187081458162 != sym__0___45_4738111187081458162 || (otherRec.sym__0__7342994916058425376 != sym__0__7342994916058425376 || (otherRec.sym__0___45_102160816985196364 != sym__0___45_102160816985196364 || (otherRec.sym__0__1283865848515870159 != sym__0__1283865848515870159 || (otherRec.sym__0___45_6653948180198187699 != sym__0___45_6653948180198187699 || (otherRec.sym__0__1838544743518506357 != sym__0__1838544743518506357 || (otherRec.sym__0__7577655604576576020 != sym__0__7577655604576576020 || (otherRec.sym__0___45_2957579613704386588 != sym__0___45_2957579613704386588 || (otherRec.sym__0__3873855183530032714 != sym__0__3873855183530032714 || (otherRec.sym__0___45_5414786619423294939 != sym__0___45_5414786619423294939 || (otherRec.sym__0__5557137180551786739 != sym__0__5557137180551786739 || (otherRec.sym__0___45_6042740597378878507 != sym__0___45_6042740597378878507 || (otherRec.sym__0___45_5833642980832303428 != sym__0___45_5833642980832303428 || (otherRec.sym__0___45_5108599129385010601 != sym__0___45_5108599129385010601 || (otherRec.sym__0__6596363747273139740 != sym__0__6596363747273139740 || (otherRec.sym__0___45_3780820615727466252 != sym__0___45_3780820615727466252 || (otherRec.sym__0___45_5733022218377332670 != sym__0___45_5733022218377332670 || (otherRec.sym__0___45_1101619184546797307 != sym__0___45_1101619184546797307 || (otherRec.sym__0__5315661629871309616 != sym__0__5315661629871309616 || (otherRec.sym__0__1548970624774688888 != sym__0__1548970624774688888 || (otherRec.sym__0__3082040486510970809 != sym__0__3082040486510970809 || (otherRec.sym__0___45_3773548088295367727 != sym__0___45_3773548088295367727 || (otherRec.sym__0__2425475927764529115 != sym__0__2425475927764529115 || (otherRec.sym__0__3550854697533762172 != sym__0__3550854697533762172 || (otherRec.sym__0___45_2428002636247423964 != sym__0___45_2428002636247423964 || (otherRec.sym__0__2537603616087343230 != sym__0__2537603616087343230 || (otherRec.sym__0___45_5133924085204218680 != sym__0___45_5133924085204218680 || (otherRec.sym__0__1411885469038113506 != sym__0__1411885469038113506 || (otherRec.sym__0___45_4336521243533294241 != sym__0___45_4336521243533294241 || (otherRec.sym__0___45_2416233287424533084 != sym__0___45_2416233287424533084 || otherRec.sym__0___45_8608893297661193168 != sym__0___45_8608893297661193168))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__6600743152885821739;
  fluidb_string<25> sym__0__8327451819077700100;
  fluidb_string<40> sym__0__6397198241134363110;
  fluidb_string<16> sym__0___45_5337640715365439464;
  fluidb_string<16> sym__0__6843344685518481994;
  fluidb_string<13> sym__0___45_281035451017513097;
  fluidb_string<15> sym__0__978963012373614724;
  unsigned sym__0___45_138255197005962184;
  int sym__0__8723886903896913538;
  unsigned sym__0___45_6396778144419774102;
  unsigned sym__0__4345290193888622188;
  unsigned sym__0__4748858544164465891;
  unsigned sym__0___45_2013870166617871634;
  fluidb_string<21> sym__0__4486213189679553123;
  unsigned sym__0__2044116807841453321;
  fluidb_string<10> sym__0__5619260977463858154;
  unsigned sym__0___45_8920615137005718662;
  double sym__0__2992813735709491256;
  unsigned sym__0___45_4738111187081458162;
  double sym__0__7342994916058425376;
  unsigned sym__0___45_102160816985196364;
  unsigned sym__0__1283865848515870159;
  double sym__0___45_6653948180198187699;
  fluidb_string<13> sym__0__1838544743518506357;
  unsigned sym__0__7577655604576576020;
  fluidb_string<18> sym__0___45_2957579613704386588;
  fluidb_string<9> sym__0__3873855183530032714;
  fluidb_string<9> sym__0___45_5414786619423294939;
  unsigned sym__0__5557137180551786739;
  unsigned sym__0___45_6042740597378878507;
  fluidb_string<7> sym__0___45_5833642980832303428;
  unsigned sym__0___45_5108599129385010601;
  unsigned sym__0__6596363747273139740;
  unsigned sym__0___45_3780820615727466252;
  unsigned sym__0___45_5733022218377332670;
  unsigned sym__0___45_1101619184546797307;
  fluidb_string<15> sym__0__5315661629871309616;
  fluidb_string<2> sym__0__1548970624774688888;
  fluidb_string<2> sym__0__3082040486510970809;
  fluidb_string<2> sym__0___45_3773548088295367727;
  fluidb_string<2> sym__0__2425475927764529115;
  unsigned sym__0__3550854697533762172;
  fluidb_string<18> sym__0___45_2428002636247423964;
  fluidb_string<40> sym__0__2537603616087343230;
  fluidb_string<11> sym__0___45_5133924085204218680;
  fluidb_string<15> sym__0__1411885469038113506;
  fluidb_string<13> sym__0___45_4336521243533294241;
  fluidb_string<15> sym__0___45_2416233287424533084;
  fluidb_string<21> sym__0___45_8608893297661193168;
 private:
};


class Record12 {
 public:
  Record12(unsigned __sortElem0) : sortElem0(__sortElem0)
  {
  }
  Record12() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0;
    return o.str();
  }
  bool operator <(const Record12& otherRec) const{
    return otherRec.sortElem0 < sortElem0;
  }
  bool operator ==(const Record12& otherRec) const{
    return otherRec.sortElem0 == sortElem0;
  }
  bool operator !=(const Record12& otherRec) const{
    return otherRec.sortElem0 != sortElem0;
  }
  unsigned sortElem0;
 private:
};


class Record52 {
 public:
  Record52(unsigned __sortElem0, fluidb_string<15> __sortElem1) : sortElem0(__sortElem0), sortElem1(__sortElem1)
  {
  }
  Record52() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0 << " | " << arrToString(sortElem1);
    return o.str();
  }
  bool operator <(const Record52& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && otherRec.sortElem1 < sortElem1);
  }
  bool operator ==(const Record52& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && otherRec.sortElem1 == sortElem1);
  }
  bool operator !=(const Record52& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || otherRec.sortElem1 != sortElem1);
  }
  unsigned sortElem0;
  fluidb_string<15> sortElem1;
 private:
};


class Record8 {
 public:
  Record8(unsigned __sym__0__2037864888707786451, fluidb_string<18> __sym__0__8533656712666151747, fluidb_string<9> __sym__0__646314041574508429, fluidb_string<9> __sym__0__6064137978327902054, unsigned __sym__0__3754157776500852496, unsigned __sym__0__6284345160241949046, fluidb_string<7> __sym__0___45_773692805971570325, unsigned __sym__0___45_8399474032083007524, unsigned __sym__0___45_2038947427357444789, unsigned __sym__0__6071994954612827827, unsigned __sym__0__7742515703067448213, unsigned __sym__0__5201219213304227654, fluidb_string<15> __sym__0___45_5896625796158057241, fluidb_string<2> __sym__0___45_1108504872221226081, fluidb_string<2> __sym__0__1055103969674359346, fluidb_string<2> __sym__0__9115626546918942554, fluidb_string<2> __sym__0___45_6850413444013389848) : sym__0__2037864888707786451(__sym__0__2037864888707786451), sym__0__8533656712666151747(__sym__0__8533656712666151747), sym__0__646314041574508429(__sym__0__646314041574508429), sym__0__6064137978327902054(__sym__0__6064137978327902054), sym__0__3754157776500852496(__sym__0__3754157776500852496), sym__0__6284345160241949046(__sym__0__6284345160241949046), sym__0___45_773692805971570325(__sym__0___45_773692805971570325), sym__0___45_8399474032083007524(__sym__0___45_8399474032083007524), sym__0___45_2038947427357444789(__sym__0___45_2038947427357444789), sym__0__6071994954612827827(__sym__0__6071994954612827827), sym__0__7742515703067448213(__sym__0__7742515703067448213), sym__0__5201219213304227654(__sym__0__5201219213304227654), sym__0___45_5896625796158057241(__sym__0___45_5896625796158057241), sym__0___45_1108504872221226081(__sym__0___45_1108504872221226081), sym__0__1055103969674359346(__sym__0__1055103969674359346), sym__0__9115626546918942554(__sym__0__9115626546918942554), sym__0___45_6850413444013389848(__sym__0___45_6850413444013389848)
  {
  }
  Record8() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__2037864888707786451 << " | " << arrToString(sym__0__8533656712666151747) << " | " << arrToString(sym__0__646314041574508429) << " | " << arrToString(sym__0__6064137978327902054) << " | " << sym__0__3754157776500852496 << " | " << sym__0__6284345160241949046 << " | " << arrToString(sym__0___45_773692805971570325) << " | " << sym__0___45_8399474032083007524 << " | " << sym__0___45_2038947427357444789 << " | " << sym__0__6071994954612827827 << " | " << sym__0__7742515703067448213 << " | " << sym__0__5201219213304227654 << " | " << arrToString(sym__0___45_5896625796158057241) << " | " << arrToString(sym__0___45_1108504872221226081) << " | " << arrToString(sym__0__1055103969674359346) << " | " << arrToString(sym__0__9115626546918942554) << " | " << arrToString(sym__0___45_6850413444013389848);
    return o.str();
  }
  bool operator <(const Record8& otherRec) const{
    return (otherRec.sym__0__2037864888707786451 < sym__0__2037864888707786451 && (otherRec.sym__0__8533656712666151747 < sym__0__8533656712666151747 && (otherRec.sym__0__646314041574508429 < sym__0__646314041574508429 && (otherRec.sym__0__6064137978327902054 < sym__0__6064137978327902054 && (otherRec.sym__0__3754157776500852496 < sym__0__3754157776500852496 && (otherRec.sym__0__6284345160241949046 < sym__0__6284345160241949046 && (otherRec.sym__0___45_773692805971570325 < sym__0___45_773692805971570325 && (otherRec.sym__0___45_8399474032083007524 < sym__0___45_8399474032083007524 && (otherRec.sym__0___45_2038947427357444789 < sym__0___45_2038947427357444789 && (otherRec.sym__0__6071994954612827827 < sym__0__6071994954612827827 && (otherRec.sym__0__7742515703067448213 < sym__0__7742515703067448213 && (otherRec.sym__0__5201219213304227654 < sym__0__5201219213304227654 && (otherRec.sym__0___45_5896625796158057241 < sym__0___45_5896625796158057241 && (otherRec.sym__0___45_1108504872221226081 < sym__0___45_1108504872221226081 && (otherRec.sym__0__1055103969674359346 < sym__0__1055103969674359346 && (otherRec.sym__0__9115626546918942554 < sym__0__9115626546918942554 && otherRec.sym__0___45_6850413444013389848 < sym__0___45_6850413444013389848))))))))))))))));
  }
  bool operator ==(const Record8& otherRec) const{
    return (otherRec.sym__0__2037864888707786451 == sym__0__2037864888707786451 && (otherRec.sym__0__8533656712666151747 == sym__0__8533656712666151747 && (otherRec.sym__0__646314041574508429 == sym__0__646314041574508429 && (otherRec.sym__0__6064137978327902054 == sym__0__6064137978327902054 && (otherRec.sym__0__3754157776500852496 == sym__0__3754157776500852496 && (otherRec.sym__0__6284345160241949046 == sym__0__6284345160241949046 && (otherRec.sym__0___45_773692805971570325 == sym__0___45_773692805971570325 && (otherRec.sym__0___45_8399474032083007524 == sym__0___45_8399474032083007524 && (otherRec.sym__0___45_2038947427357444789 == sym__0___45_2038947427357444789 && (otherRec.sym__0__6071994954612827827 == sym__0__6071994954612827827 && (otherRec.sym__0__7742515703067448213 == sym__0__7742515703067448213 && (otherRec.sym__0__5201219213304227654 == sym__0__5201219213304227654 && (otherRec.sym__0___45_5896625796158057241 == sym__0___45_5896625796158057241 && (otherRec.sym__0___45_1108504872221226081 == sym__0___45_1108504872221226081 && (otherRec.sym__0__1055103969674359346 == sym__0__1055103969674359346 && (otherRec.sym__0__9115626546918942554 == sym__0__9115626546918942554 && otherRec.sym__0___45_6850413444013389848 == sym__0___45_6850413444013389848))))))))))))))));
  }
  bool operator !=(const Record8& otherRec) const{
    return (otherRec.sym__0__2037864888707786451 != sym__0__2037864888707786451 || (otherRec.sym__0__8533656712666151747 != sym__0__8533656712666151747 || (otherRec.sym__0__646314041574508429 != sym__0__646314041574508429 || (otherRec.sym__0__6064137978327902054 != sym__0__6064137978327902054 || (otherRec.sym__0__3754157776500852496 != sym__0__3754157776500852496 || (otherRec.sym__0__6284345160241949046 != sym__0__6284345160241949046 || (otherRec.sym__0___45_773692805971570325 != sym__0___45_773692805971570325 || (otherRec.sym__0___45_8399474032083007524 != sym__0___45_8399474032083007524 || (otherRec.sym__0___45_2038947427357444789 != sym__0___45_2038947427357444789 || (otherRec.sym__0__6071994954612827827 != sym__0__6071994954612827827 || (otherRec.sym__0__7742515703067448213 != sym__0__7742515703067448213 || (otherRec.sym__0__5201219213304227654 != sym__0__5201219213304227654 || (otherRec.sym__0___45_5896625796158057241 != sym__0___45_5896625796158057241 || (otherRec.sym__0___45_1108504872221226081 != sym__0___45_1108504872221226081 || (otherRec.sym__0__1055103969674359346 != sym__0__1055103969674359346 || (otherRec.sym__0__9115626546918942554 != sym__0__9115626546918942554 || otherRec.sym__0___45_6850413444013389848 != sym__0___45_6850413444013389848))))))))))))))));
  }
  unsigned sym__0__2037864888707786451;
  fluidb_string<18> sym__0__8533656712666151747;
  fluidb_string<9> sym__0__646314041574508429;
  fluidb_string<9> sym__0__6064137978327902054;
  unsigned sym__0__3754157776500852496;
  unsigned sym__0__6284345160241949046;
  fluidb_string<7> sym__0___45_773692805971570325;
  unsigned sym__0___45_8399474032083007524;
  unsigned sym__0___45_2038947427357444789;
  unsigned sym__0__6071994954612827827;
  unsigned sym__0__7742515703067448213;
  unsigned sym__0__5201219213304227654;
  fluidb_string<15> sym__0___45_5896625796158057241;
  fluidb_string<2> sym__0___45_1108504872221226081;
  fluidb_string<2> sym__0__1055103969674359346;
  fluidb_string<2> sym__0__9115626546918942554;
  fluidb_string<2> sym__0___45_6850413444013389848;
 private:
};


class Record1 {
 public:
  Record1(unsigned __sym__0___45_5182087624132196707, fluidb_string<25> __sym__0___45_1125733209087237322, fluidb_string<40> __sym__0___45_4972797425225002076, fluidb_string<16> __sym__0__2318854370595574362, fluidb_string<16> __sym__0___45_4041623608412761896, fluidb_string<13> __sym__0___45_3735786698084808711, fluidb_string<15> __sym__0__7384252796126420662, unsigned __sym__0___45_2043653876463228102, int __sym__0__2838774847530135056, unsigned __sym__0__6525564334754176696, unsigned __sym__0__8499987716798155358, unsigned __sym__0___45_6915660615674064043, unsigned __sym__0___45_8326786075612268884, fluidb_string<21> __sym__0___45_6075665051587255339, unsigned __sym__0___45_1350382245670239329, fluidb_string<10> __sym__0__2109402343114077240, unsigned __sym__0__6215935326665719112, double __sym__0__2820217628767326010, unsigned __sym__0__5445672276260318348, double __sym__0__3697656138623911458, unsigned __sym__0__1653175989217608742, unsigned __sym__0___45_3743776918383637103, double __sym__0__2919710110324225859, fluidb_string<13> __sym__0__1749379276187346475, unsigned __sym__0___45_4706300880382947898, fluidb_string<18> __sym__0___45_8488664643470695338, fluidb_string<9> __sym__0___45_8168358588491690792, fluidb_string<9> __sym__0__3492822237187130715, unsigned __sym__0___45_5327203452744863771, unsigned __sym__0___45_3191486480184313013, fluidb_string<7> __sym__0__8273133299368630830, unsigned __sym__0__5374892212332880793, unsigned __sym__0__4657424385215848526, unsigned __sym__0___45_3458973470967037338, unsigned __sym__0___45_8815963362114542896, unsigned __sym__0___45_1032706391051161733, fluidb_string<15> __sym__0__2933689304969494962, fluidb_string<2> __sym__0__7834336576245077370, fluidb_string<2> __sym__0___45_4475634397818667505, fluidb_string<2> __sym__0__3226357619497947495, fluidb_string<2> __sym__0__2465797272458765197) : sym__0___45_5182087624132196707(__sym__0___45_5182087624132196707), sym__0___45_1125733209087237322(__sym__0___45_1125733209087237322), sym__0___45_4972797425225002076(__sym__0___45_4972797425225002076), sym__0__2318854370595574362(__sym__0__2318854370595574362), sym__0___45_4041623608412761896(__sym__0___45_4041623608412761896), sym__0___45_3735786698084808711(__sym__0___45_3735786698084808711), sym__0__7384252796126420662(__sym__0__7384252796126420662), sym__0___45_2043653876463228102(__sym__0___45_2043653876463228102), sym__0__2838774847530135056(__sym__0__2838774847530135056), sym__0__6525564334754176696(__sym__0__6525564334754176696), sym__0__8499987716798155358(__sym__0__8499987716798155358), sym__0___45_6915660615674064043(__sym__0___45_6915660615674064043), sym__0___45_8326786075612268884(__sym__0___45_8326786075612268884), sym__0___45_6075665051587255339(__sym__0___45_6075665051587255339), sym__0___45_1350382245670239329(__sym__0___45_1350382245670239329), sym__0__2109402343114077240(__sym__0__2109402343114077240), sym__0__6215935326665719112(__sym__0__6215935326665719112), sym__0__2820217628767326010(__sym__0__2820217628767326010), sym__0__5445672276260318348(__sym__0__5445672276260318348), sym__0__3697656138623911458(__sym__0__3697656138623911458), sym__0__1653175989217608742(__sym__0__1653175989217608742), sym__0___45_3743776918383637103(__sym__0___45_3743776918383637103), sym__0__2919710110324225859(__sym__0__2919710110324225859), sym__0__1749379276187346475(__sym__0__1749379276187346475), sym__0___45_4706300880382947898(__sym__0___45_4706300880382947898), sym__0___45_8488664643470695338(__sym__0___45_8488664643470695338), sym__0___45_8168358588491690792(__sym__0___45_8168358588491690792), sym__0__3492822237187130715(__sym__0__3492822237187130715), sym__0___45_5327203452744863771(__sym__0___45_5327203452744863771), sym__0___45_3191486480184313013(__sym__0___45_3191486480184313013), sym__0__8273133299368630830(__sym__0__8273133299368630830), sym__0__5374892212332880793(__sym__0__5374892212332880793), sym__0__4657424385215848526(__sym__0__4657424385215848526), sym__0___45_3458973470967037338(__sym__0___45_3458973470967037338), sym__0___45_8815963362114542896(__sym__0___45_8815963362114542896), sym__0___45_1032706391051161733(__sym__0___45_1032706391051161733), sym__0__2933689304969494962(__sym__0__2933689304969494962), sym__0__7834336576245077370(__sym__0__7834336576245077370), sym__0___45_4475634397818667505(__sym__0___45_4475634397818667505), sym__0__3226357619497947495(__sym__0__3226357619497947495), sym__0__2465797272458765197(__sym__0__2465797272458765197)
  {
  }
  Record1() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_5182087624132196707 << " | " << arrToString(sym__0___45_1125733209087237322) << " | " << arrToString(sym__0___45_4972797425225002076) << " | " << arrToString(sym__0__2318854370595574362) << " | " << arrToString(sym__0___45_4041623608412761896) << " | " << arrToString(sym__0___45_3735786698084808711) << " | " << arrToString(sym__0__7384252796126420662) << " | " << sym__0___45_2043653876463228102 << " | " << sym__0__2838774847530135056 << " | " << sym__0__6525564334754176696 << " | " << sym__0__8499987716798155358 << " | " << sym__0___45_6915660615674064043 << " | " << sym__0___45_8326786075612268884 << " | " << arrToString(sym__0___45_6075665051587255339) << " | " << sym__0___45_1350382245670239329 << " | " << arrToString(sym__0__2109402343114077240) << " | " << sym__0__6215935326665719112 << " | " << sym__0__2820217628767326010 << " | " << sym__0__5445672276260318348 << " | " << sym__0__3697656138623911458 << " | " << sym__0__1653175989217608742 << " | " << sym__0___45_3743776918383637103 << " | " << sym__0__2919710110324225859 << " | " << arrToString(sym__0__1749379276187346475) << " | " << sym__0___45_4706300880382947898 << " | " << arrToString(sym__0___45_8488664643470695338) << " | " << arrToString(sym__0___45_8168358588491690792) << " | " << arrToString(sym__0__3492822237187130715) << " | " << sym__0___45_5327203452744863771 << " | " << sym__0___45_3191486480184313013 << " | " << arrToString(sym__0__8273133299368630830) << " | " << sym__0__5374892212332880793 << " | " << sym__0__4657424385215848526 << " | " << sym__0___45_3458973470967037338 << " | " << sym__0___45_8815963362114542896 << " | " << sym__0___45_1032706391051161733 << " | " << arrToString(sym__0__2933689304969494962) << " | " << arrToString(sym__0__7834336576245077370) << " | " << arrToString(sym__0___45_4475634397818667505) << " | " << arrToString(sym__0__3226357619497947495) << " | " << arrToString(sym__0__2465797272458765197);
    return o.str();
  }
  bool operator <(const Record1& otherRec) const{
    return (otherRec.sym__0___45_5182087624132196707 < sym__0___45_5182087624132196707 && (otherRec.sym__0___45_1125733209087237322 < sym__0___45_1125733209087237322 && (otherRec.sym__0___45_4972797425225002076 < sym__0___45_4972797425225002076 && (otherRec.sym__0__2318854370595574362 < sym__0__2318854370595574362 && (otherRec.sym__0___45_4041623608412761896 < sym__0___45_4041623608412761896 && (otherRec.sym__0___45_3735786698084808711 < sym__0___45_3735786698084808711 && (otherRec.sym__0__7384252796126420662 < sym__0__7384252796126420662 && (otherRec.sym__0___45_2043653876463228102 < sym__0___45_2043653876463228102 && (otherRec.sym__0__2838774847530135056 < sym__0__2838774847530135056 && (otherRec.sym__0__6525564334754176696 < sym__0__6525564334754176696 && (otherRec.sym__0__8499987716798155358 < sym__0__8499987716798155358 && (otherRec.sym__0___45_6915660615674064043 < sym__0___45_6915660615674064043 && (otherRec.sym__0___45_8326786075612268884 < sym__0___45_8326786075612268884 && (otherRec.sym__0___45_6075665051587255339 < sym__0___45_6075665051587255339 && (otherRec.sym__0___45_1350382245670239329 < sym__0___45_1350382245670239329 && (otherRec.sym__0__2109402343114077240 < sym__0__2109402343114077240 && (otherRec.sym__0__6215935326665719112 < sym__0__6215935326665719112 && (otherRec.sym__0__2820217628767326010 < sym__0__2820217628767326010 && (otherRec.sym__0__5445672276260318348 < sym__0__5445672276260318348 && (otherRec.sym__0__3697656138623911458 < sym__0__3697656138623911458 && (otherRec.sym__0__1653175989217608742 < sym__0__1653175989217608742 && (otherRec.sym__0___45_3743776918383637103 < sym__0___45_3743776918383637103 && (otherRec.sym__0__2919710110324225859 < sym__0__2919710110324225859 && (otherRec.sym__0__1749379276187346475 < sym__0__1749379276187346475 && (otherRec.sym__0___45_4706300880382947898 < sym__0___45_4706300880382947898 && (otherRec.sym__0___45_8488664643470695338 < sym__0___45_8488664643470695338 && (otherRec.sym__0___45_8168358588491690792 < sym__0___45_8168358588491690792 && (otherRec.sym__0__3492822237187130715 < sym__0__3492822237187130715 && (otherRec.sym__0___45_5327203452744863771 < sym__0___45_5327203452744863771 && (otherRec.sym__0___45_3191486480184313013 < sym__0___45_3191486480184313013 && (otherRec.sym__0__8273133299368630830 < sym__0__8273133299368630830 && (otherRec.sym__0__5374892212332880793 < sym__0__5374892212332880793 && (otherRec.sym__0__4657424385215848526 < sym__0__4657424385215848526 && (otherRec.sym__0___45_3458973470967037338 < sym__0___45_3458973470967037338 && (otherRec.sym__0___45_8815963362114542896 < sym__0___45_8815963362114542896 && (otherRec.sym__0___45_1032706391051161733 < sym__0___45_1032706391051161733 && (otherRec.sym__0__2933689304969494962 < sym__0__2933689304969494962 && (otherRec.sym__0__7834336576245077370 < sym__0__7834336576245077370 && (otherRec.sym__0___45_4475634397818667505 < sym__0___45_4475634397818667505 && (otherRec.sym__0__3226357619497947495 < sym__0__3226357619497947495 && otherRec.sym__0__2465797272458765197 < sym__0__2465797272458765197))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record1& otherRec) const{
    return (otherRec.sym__0___45_5182087624132196707 == sym__0___45_5182087624132196707 && (otherRec.sym__0___45_1125733209087237322 == sym__0___45_1125733209087237322 && (otherRec.sym__0___45_4972797425225002076 == sym__0___45_4972797425225002076 && (otherRec.sym__0__2318854370595574362 == sym__0__2318854370595574362 && (otherRec.sym__0___45_4041623608412761896 == sym__0___45_4041623608412761896 && (otherRec.sym__0___45_3735786698084808711 == sym__0___45_3735786698084808711 && (otherRec.sym__0__7384252796126420662 == sym__0__7384252796126420662 && (otherRec.sym__0___45_2043653876463228102 == sym__0___45_2043653876463228102 && (otherRec.sym__0__2838774847530135056 == sym__0__2838774847530135056 && (otherRec.sym__0__6525564334754176696 == sym__0__6525564334754176696 && (otherRec.sym__0__8499987716798155358 == sym__0__8499987716798155358 && (otherRec.sym__0___45_6915660615674064043 == sym__0___45_6915660615674064043 && (otherRec.sym__0___45_8326786075612268884 == sym__0___45_8326786075612268884 && (otherRec.sym__0___45_6075665051587255339 == sym__0___45_6075665051587255339 && (otherRec.sym__0___45_1350382245670239329 == sym__0___45_1350382245670239329 && (otherRec.sym__0__2109402343114077240 == sym__0__2109402343114077240 && (otherRec.sym__0__6215935326665719112 == sym__0__6215935326665719112 && (otherRec.sym__0__2820217628767326010 == sym__0__2820217628767326010 && (otherRec.sym__0__5445672276260318348 == sym__0__5445672276260318348 && (otherRec.sym__0__3697656138623911458 == sym__0__3697656138623911458 && (otherRec.sym__0__1653175989217608742 == sym__0__1653175989217608742 && (otherRec.sym__0___45_3743776918383637103 == sym__0___45_3743776918383637103 && (otherRec.sym__0__2919710110324225859 == sym__0__2919710110324225859 && (otherRec.sym__0__1749379276187346475 == sym__0__1749379276187346475 && (otherRec.sym__0___45_4706300880382947898 == sym__0___45_4706300880382947898 && (otherRec.sym__0___45_8488664643470695338 == sym__0___45_8488664643470695338 && (otherRec.sym__0___45_8168358588491690792 == sym__0___45_8168358588491690792 && (otherRec.sym__0__3492822237187130715 == sym__0__3492822237187130715 && (otherRec.sym__0___45_5327203452744863771 == sym__0___45_5327203452744863771 && (otherRec.sym__0___45_3191486480184313013 == sym__0___45_3191486480184313013 && (otherRec.sym__0__8273133299368630830 == sym__0__8273133299368630830 && (otherRec.sym__0__5374892212332880793 == sym__0__5374892212332880793 && (otherRec.sym__0__4657424385215848526 == sym__0__4657424385215848526 && (otherRec.sym__0___45_3458973470967037338 == sym__0___45_3458973470967037338 && (otherRec.sym__0___45_8815963362114542896 == sym__0___45_8815963362114542896 && (otherRec.sym__0___45_1032706391051161733 == sym__0___45_1032706391051161733 && (otherRec.sym__0__2933689304969494962 == sym__0__2933689304969494962 && (otherRec.sym__0__7834336576245077370 == sym__0__7834336576245077370 && (otherRec.sym__0___45_4475634397818667505 == sym__0___45_4475634397818667505 && (otherRec.sym__0__3226357619497947495 == sym__0__3226357619497947495 && otherRec.sym__0__2465797272458765197 == sym__0__2465797272458765197))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record1& otherRec) const{
    return (otherRec.sym__0___45_5182087624132196707 != sym__0___45_5182087624132196707 || (otherRec.sym__0___45_1125733209087237322 != sym__0___45_1125733209087237322 || (otherRec.sym__0___45_4972797425225002076 != sym__0___45_4972797425225002076 || (otherRec.sym__0__2318854370595574362 != sym__0__2318854370595574362 || (otherRec.sym__0___45_4041623608412761896 != sym__0___45_4041623608412761896 || (otherRec.sym__0___45_3735786698084808711 != sym__0___45_3735786698084808711 || (otherRec.sym__0__7384252796126420662 != sym__0__7384252796126420662 || (otherRec.sym__0___45_2043653876463228102 != sym__0___45_2043653876463228102 || (otherRec.sym__0__2838774847530135056 != sym__0__2838774847530135056 || (otherRec.sym__0__6525564334754176696 != sym__0__6525564334754176696 || (otherRec.sym__0__8499987716798155358 != sym__0__8499987716798155358 || (otherRec.sym__0___45_6915660615674064043 != sym__0___45_6915660615674064043 || (otherRec.sym__0___45_8326786075612268884 != sym__0___45_8326786075612268884 || (otherRec.sym__0___45_6075665051587255339 != sym__0___45_6075665051587255339 || (otherRec.sym__0___45_1350382245670239329 != sym__0___45_1350382245670239329 || (otherRec.sym__0__2109402343114077240 != sym__0__2109402343114077240 || (otherRec.sym__0__6215935326665719112 != sym__0__6215935326665719112 || (otherRec.sym__0__2820217628767326010 != sym__0__2820217628767326010 || (otherRec.sym__0__5445672276260318348 != sym__0__5445672276260318348 || (otherRec.sym__0__3697656138623911458 != sym__0__3697656138623911458 || (otherRec.sym__0__1653175989217608742 != sym__0__1653175989217608742 || (otherRec.sym__0___45_3743776918383637103 != sym__0___45_3743776918383637103 || (otherRec.sym__0__2919710110324225859 != sym__0__2919710110324225859 || (otherRec.sym__0__1749379276187346475 != sym__0__1749379276187346475 || (otherRec.sym__0___45_4706300880382947898 != sym__0___45_4706300880382947898 || (otherRec.sym__0___45_8488664643470695338 != sym__0___45_8488664643470695338 || (otherRec.sym__0___45_8168358588491690792 != sym__0___45_8168358588491690792 || (otherRec.sym__0__3492822237187130715 != sym__0__3492822237187130715 || (otherRec.sym__0___45_5327203452744863771 != sym__0___45_5327203452744863771 || (otherRec.sym__0___45_3191486480184313013 != sym__0___45_3191486480184313013 || (otherRec.sym__0__8273133299368630830 != sym__0__8273133299368630830 || (otherRec.sym__0__5374892212332880793 != sym__0__5374892212332880793 || (otherRec.sym__0__4657424385215848526 != sym__0__4657424385215848526 || (otherRec.sym__0___45_3458973470967037338 != sym__0___45_3458973470967037338 || (otherRec.sym__0___45_8815963362114542896 != sym__0___45_8815963362114542896 || (otherRec.sym__0___45_1032706391051161733 != sym__0___45_1032706391051161733 || (otherRec.sym__0__2933689304969494962 != sym__0__2933689304969494962 || (otherRec.sym__0__7834336576245077370 != sym__0__7834336576245077370 || (otherRec.sym__0___45_4475634397818667505 != sym__0___45_4475634397818667505 || (otherRec.sym__0__3226357619497947495 != sym__0__3226357619497947495 || otherRec.sym__0__2465797272458765197 != sym__0__2465797272458765197))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_5182087624132196707;
  fluidb_string<25> sym__0___45_1125733209087237322;
  fluidb_string<40> sym__0___45_4972797425225002076;
  fluidb_string<16> sym__0__2318854370595574362;
  fluidb_string<16> sym__0___45_4041623608412761896;
  fluidb_string<13> sym__0___45_3735786698084808711;
  fluidb_string<15> sym__0__7384252796126420662;
  unsigned sym__0___45_2043653876463228102;
  int sym__0__2838774847530135056;
  unsigned sym__0__6525564334754176696;
  unsigned sym__0__8499987716798155358;
  unsigned sym__0___45_6915660615674064043;
  unsigned sym__0___45_8326786075612268884;
  fluidb_string<21> sym__0___45_6075665051587255339;
  unsigned sym__0___45_1350382245670239329;
  fluidb_string<10> sym__0__2109402343114077240;
  unsigned sym__0__6215935326665719112;
  double sym__0__2820217628767326010;
  unsigned sym__0__5445672276260318348;
  double sym__0__3697656138623911458;
  unsigned sym__0__1653175989217608742;
  unsigned sym__0___45_3743776918383637103;
  double sym__0__2919710110324225859;
  fluidb_string<13> sym__0__1749379276187346475;
  unsigned sym__0___45_4706300880382947898;
  fluidb_string<18> sym__0___45_8488664643470695338;
  fluidb_string<9> sym__0___45_8168358588491690792;
  fluidb_string<9> sym__0__3492822237187130715;
  unsigned sym__0___45_5327203452744863771;
  unsigned sym__0___45_3191486480184313013;
  fluidb_string<7> sym__0__8273133299368630830;
  unsigned sym__0__5374892212332880793;
  unsigned sym__0__4657424385215848526;
  unsigned sym__0___45_3458973470967037338;
  unsigned sym__0___45_8815963362114542896;
  unsigned sym__0___45_1032706391051161733;
  fluidb_string<15> sym__0__2933689304969494962;
  fluidb_string<2> sym__0__7834336576245077370;
  fluidb_string<2> sym__0___45_4475634397818667505;
  fluidb_string<2> sym__0__3226357619497947495;
  fluidb_string<2> sym__0__2465797272458765197;
 private:
};


class Record37 {
 public:
  Record37(unsigned __sym__0___45_1783229466525166718, fluidb_string<25> __sym__0__2964572898640888933, fluidb_string<40> __sym__0___45_7646744647346812089, fluidb_string<16> __sym__0___45_8890755693813724487, fluidb_string<16> __sym__0___45_2078956440869557365, fluidb_string<13> __sym__0___45_5867946786197862882, fluidb_string<15> __sym__0___45_7326821984155681819, unsigned __sym__0__231907318709496409, int __sym__0__2688255008669304275, unsigned __sym__0___45_8703327832315381333, unsigned __sym__0__8210285234396302525, unsigned __sym__0___45_1083461131540582838, unsigned __sym__0___45_332988430765002305, fluidb_string<21> __sym__0___45_1396883304971201334, unsigned __sym__0___45_7885307500036326584, fluidb_string<10> __sym__0__682239336532423467, unsigned __sym__0___45_9059733160469762021, double __sym__0___45_7496847221808812455, unsigned __sym__0__6851494848781582431, double __sym__0___45_3179925554639845007, unsigned __sym__0__6226923395275405685, unsigned __sym__0__7704927979988596358, double __sym__0__132562152831270940, fluidb_string<13> __sym__0___45_8948194292450663628, unsigned __sym__0__3417884924835104469, fluidb_string<18> __sym__0__9194555597461859141, fluidb_string<9> __sym__0___45_4691860520184547445, fluidb_string<9> __sym__0__3741070679626273796, unsigned __sym__0__8840336534235481146, unsigned __sym__0___45_2601796008016513516, fluidb_string<7> __sym__0___45_3953136938130284179, unsigned __sym__0__234071792478123262, unsigned __sym__0___45_8604890310897105587, unsigned __sym__0___45_2239084372876413259, unsigned __sym__0___45_517725291345247341, unsigned __sym__0___45_1274865342338026396, fluidb_string<15> __sym__0__5989226753506632929, fluidb_string<2> __sym__0___45_5104102107747484775, fluidb_string<2> __sym__0__845953941670768600, fluidb_string<2> __sym__0__4163215005619532800, fluidb_string<2> __sym__0__6549476080427480210, unsigned __sym__0__2790200619910287661, fluidb_string<18> __sym__0___45_7868072875935261051, fluidb_string<40> __sym__0__5192623653961885871, fluidb_string<11> __sym__0___45_6620426807825431159, fluidb_string<15> __sym__0__6415636528128403891, fluidb_string<13> __sym__0___45_7823645749172626442, fluidb_string<15> __sym__0__2549615706294044933, fluidb_string<21> __sym__0___45_2740665641693505567, unsigned __sym__0___45_4156887634197537189, fluidb_string<55> __sym__0___45_3535814603226201749, fluidb_string<25> __sym__0___45_9042078870426525352, fluidb_string<7> __sym__0___45_4764068575183756814, fluidb_string<10> __sym__0__4398489032885548840, fluidb_string<11> __sym__0__7599029514332915116, fluidb_string<25> __sym__0___45_7529596597076085474, unsigned __sym__0__3609550136696087537, fluidb_string<10> __sym__0__6422429896779316872) : sym__0___45_1783229466525166718(__sym__0___45_1783229466525166718), sym__0__2964572898640888933(__sym__0__2964572898640888933), sym__0___45_7646744647346812089(__sym__0___45_7646744647346812089), sym__0___45_8890755693813724487(__sym__0___45_8890755693813724487), sym__0___45_2078956440869557365(__sym__0___45_2078956440869557365), sym__0___45_5867946786197862882(__sym__0___45_5867946786197862882), sym__0___45_7326821984155681819(__sym__0___45_7326821984155681819), sym__0__231907318709496409(__sym__0__231907318709496409), sym__0__2688255008669304275(__sym__0__2688255008669304275), sym__0___45_8703327832315381333(__sym__0___45_8703327832315381333), sym__0__8210285234396302525(__sym__0__8210285234396302525), sym__0___45_1083461131540582838(__sym__0___45_1083461131540582838), sym__0___45_332988430765002305(__sym__0___45_332988430765002305), sym__0___45_1396883304971201334(__sym__0___45_1396883304971201334), sym__0___45_7885307500036326584(__sym__0___45_7885307500036326584), sym__0__682239336532423467(__sym__0__682239336532423467), sym__0___45_9059733160469762021(__sym__0___45_9059733160469762021), sym__0___45_7496847221808812455(__sym__0___45_7496847221808812455), sym__0__6851494848781582431(__sym__0__6851494848781582431), sym__0___45_3179925554639845007(__sym__0___45_3179925554639845007), sym__0__6226923395275405685(__sym__0__6226923395275405685), sym__0__7704927979988596358(__sym__0__7704927979988596358), sym__0__132562152831270940(__sym__0__132562152831270940), sym__0___45_8948194292450663628(__sym__0___45_8948194292450663628), sym__0__3417884924835104469(__sym__0__3417884924835104469), sym__0__9194555597461859141(__sym__0__9194555597461859141), sym__0___45_4691860520184547445(__sym__0___45_4691860520184547445), sym__0__3741070679626273796(__sym__0__3741070679626273796), sym__0__8840336534235481146(__sym__0__8840336534235481146), sym__0___45_2601796008016513516(__sym__0___45_2601796008016513516), sym__0___45_3953136938130284179(__sym__0___45_3953136938130284179), sym__0__234071792478123262(__sym__0__234071792478123262), sym__0___45_8604890310897105587(__sym__0___45_8604890310897105587), sym__0___45_2239084372876413259(__sym__0___45_2239084372876413259), sym__0___45_517725291345247341(__sym__0___45_517725291345247341), sym__0___45_1274865342338026396(__sym__0___45_1274865342338026396), sym__0__5989226753506632929(__sym__0__5989226753506632929), sym__0___45_5104102107747484775(__sym__0___45_5104102107747484775), sym__0__845953941670768600(__sym__0__845953941670768600), sym__0__4163215005619532800(__sym__0__4163215005619532800), sym__0__6549476080427480210(__sym__0__6549476080427480210), sym__0__2790200619910287661(__sym__0__2790200619910287661), sym__0___45_7868072875935261051(__sym__0___45_7868072875935261051), sym__0__5192623653961885871(__sym__0__5192623653961885871), sym__0___45_6620426807825431159(__sym__0___45_6620426807825431159), sym__0__6415636528128403891(__sym__0__6415636528128403891), sym__0___45_7823645749172626442(__sym__0___45_7823645749172626442), sym__0__2549615706294044933(__sym__0__2549615706294044933), sym__0___45_2740665641693505567(__sym__0___45_2740665641693505567), sym__0___45_4156887634197537189(__sym__0___45_4156887634197537189), sym__0___45_3535814603226201749(__sym__0___45_3535814603226201749), sym__0___45_9042078870426525352(__sym__0___45_9042078870426525352), sym__0___45_4764068575183756814(__sym__0___45_4764068575183756814), sym__0__4398489032885548840(__sym__0__4398489032885548840), sym__0__7599029514332915116(__sym__0__7599029514332915116), sym__0___45_7529596597076085474(__sym__0___45_7529596597076085474), sym__0__3609550136696087537(__sym__0__3609550136696087537), sym__0__6422429896779316872(__sym__0__6422429896779316872)
  {
  }
  Record37() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_1783229466525166718 << " | " << arrToString(sym__0__2964572898640888933) << " | " << arrToString(sym__0___45_7646744647346812089) << " | " << arrToString(sym__0___45_8890755693813724487) << " | " << arrToString(sym__0___45_2078956440869557365) << " | " << arrToString(sym__0___45_5867946786197862882) << " | " << arrToString(sym__0___45_7326821984155681819) << " | " << sym__0__231907318709496409 << " | " << sym__0__2688255008669304275 << " | " << sym__0___45_8703327832315381333 << " | " << sym__0__8210285234396302525 << " | " << sym__0___45_1083461131540582838 << " | " << sym__0___45_332988430765002305 << " | " << arrToString(sym__0___45_1396883304971201334) << " | " << sym__0___45_7885307500036326584 << " | " << arrToString(sym__0__682239336532423467) << " | " << sym__0___45_9059733160469762021 << " | " << sym__0___45_7496847221808812455 << " | " << sym__0__6851494848781582431 << " | " << sym__0___45_3179925554639845007 << " | " << sym__0__6226923395275405685 << " | " << sym__0__7704927979988596358 << " | " << sym__0__132562152831270940 << " | " << arrToString(sym__0___45_8948194292450663628) << " | " << sym__0__3417884924835104469 << " | " << arrToString(sym__0__9194555597461859141) << " | " << arrToString(sym__0___45_4691860520184547445) << " | " << arrToString(sym__0__3741070679626273796) << " | " << sym__0__8840336534235481146 << " | " << sym__0___45_2601796008016513516 << " | " << arrToString(sym__0___45_3953136938130284179) << " | " << sym__0__234071792478123262 << " | " << sym__0___45_8604890310897105587 << " | " << sym__0___45_2239084372876413259 << " | " << sym__0___45_517725291345247341 << " | " << sym__0___45_1274865342338026396 << " | " << arrToString(sym__0__5989226753506632929) << " | " << arrToString(sym__0___45_5104102107747484775) << " | " << arrToString(sym__0__845953941670768600) << " | " << arrToString(sym__0__4163215005619532800) << " | " << arrToString(sym__0__6549476080427480210) << " | " << sym__0__2790200619910287661 << " | " << arrToString(sym__0___45_7868072875935261051) << " | " << arrToString(sym__0__5192623653961885871) << " | " << arrToString(sym__0___45_6620426807825431159) << " | " << arrToString(sym__0__6415636528128403891) << " | " << arrToString(sym__0___45_7823645749172626442) << " | " << arrToString(sym__0__2549615706294044933) << " | " << arrToString(sym__0___45_2740665641693505567) << " | " << sym__0___45_4156887634197537189 << " | " << arrToString(sym__0___45_3535814603226201749) << " | " << arrToString(sym__0___45_9042078870426525352) << " | " << arrToString(sym__0___45_4764068575183756814) << " | " << arrToString(sym__0__4398489032885548840) << " | " << arrToString(sym__0__7599029514332915116) << " | " << arrToString(sym__0___45_7529596597076085474) << " | " << sym__0__3609550136696087537 << " | " << arrToString(sym__0__6422429896779316872);
    return o.str();
  }
  bool operator <(const Record37& otherRec) const{
    return (otherRec.sym__0___45_1783229466525166718 < sym__0___45_1783229466525166718 && (otherRec.sym__0__2964572898640888933 < sym__0__2964572898640888933 && (otherRec.sym__0___45_7646744647346812089 < sym__0___45_7646744647346812089 && (otherRec.sym__0___45_8890755693813724487 < sym__0___45_8890755693813724487 && (otherRec.sym__0___45_2078956440869557365 < sym__0___45_2078956440869557365 && (otherRec.sym__0___45_5867946786197862882 < sym__0___45_5867946786197862882 && (otherRec.sym__0___45_7326821984155681819 < sym__0___45_7326821984155681819 && (otherRec.sym__0__231907318709496409 < sym__0__231907318709496409 && (otherRec.sym__0__2688255008669304275 < sym__0__2688255008669304275 && (otherRec.sym__0___45_8703327832315381333 < sym__0___45_8703327832315381333 && (otherRec.sym__0__8210285234396302525 < sym__0__8210285234396302525 && (otherRec.sym__0___45_1083461131540582838 < sym__0___45_1083461131540582838 && (otherRec.sym__0___45_332988430765002305 < sym__0___45_332988430765002305 && (otherRec.sym__0___45_1396883304971201334 < sym__0___45_1396883304971201334 && (otherRec.sym__0___45_7885307500036326584 < sym__0___45_7885307500036326584 && (otherRec.sym__0__682239336532423467 < sym__0__682239336532423467 && (otherRec.sym__0___45_9059733160469762021 < sym__0___45_9059733160469762021 && (otherRec.sym__0___45_7496847221808812455 < sym__0___45_7496847221808812455 && (otherRec.sym__0__6851494848781582431 < sym__0__6851494848781582431 && (otherRec.sym__0___45_3179925554639845007 < sym__0___45_3179925554639845007 && (otherRec.sym__0__6226923395275405685 < sym__0__6226923395275405685 && (otherRec.sym__0__7704927979988596358 < sym__0__7704927979988596358 && (otherRec.sym__0__132562152831270940 < sym__0__132562152831270940 && (otherRec.sym__0___45_8948194292450663628 < sym__0___45_8948194292450663628 && (otherRec.sym__0__3417884924835104469 < sym__0__3417884924835104469 && (otherRec.sym__0__9194555597461859141 < sym__0__9194555597461859141 && (otherRec.sym__0___45_4691860520184547445 < sym__0___45_4691860520184547445 && (otherRec.sym__0__3741070679626273796 < sym__0__3741070679626273796 && (otherRec.sym__0__8840336534235481146 < sym__0__8840336534235481146 && (otherRec.sym__0___45_2601796008016513516 < sym__0___45_2601796008016513516 && (otherRec.sym__0___45_3953136938130284179 < sym__0___45_3953136938130284179 && (otherRec.sym__0__234071792478123262 < sym__0__234071792478123262 && (otherRec.sym__0___45_8604890310897105587 < sym__0___45_8604890310897105587 && (otherRec.sym__0___45_2239084372876413259 < sym__0___45_2239084372876413259 && (otherRec.sym__0___45_517725291345247341 < sym__0___45_517725291345247341 && (otherRec.sym__0___45_1274865342338026396 < sym__0___45_1274865342338026396 && (otherRec.sym__0__5989226753506632929 < sym__0__5989226753506632929 && (otherRec.sym__0___45_5104102107747484775 < sym__0___45_5104102107747484775 && (otherRec.sym__0__845953941670768600 < sym__0__845953941670768600 && (otherRec.sym__0__4163215005619532800 < sym__0__4163215005619532800 && (otherRec.sym__0__6549476080427480210 < sym__0__6549476080427480210 && (otherRec.sym__0__2790200619910287661 < sym__0__2790200619910287661 && (otherRec.sym__0___45_7868072875935261051 < sym__0___45_7868072875935261051 && (otherRec.sym__0__5192623653961885871 < sym__0__5192623653961885871 && (otherRec.sym__0___45_6620426807825431159 < sym__0___45_6620426807825431159 && (otherRec.sym__0__6415636528128403891 < sym__0__6415636528128403891 && (otherRec.sym__0___45_7823645749172626442 < sym__0___45_7823645749172626442 && (otherRec.sym__0__2549615706294044933 < sym__0__2549615706294044933 && (otherRec.sym__0___45_2740665641693505567 < sym__0___45_2740665641693505567 && (otherRec.sym__0___45_4156887634197537189 < sym__0___45_4156887634197537189 && (otherRec.sym__0___45_3535814603226201749 < sym__0___45_3535814603226201749 && (otherRec.sym__0___45_9042078870426525352 < sym__0___45_9042078870426525352 && (otherRec.sym__0___45_4764068575183756814 < sym__0___45_4764068575183756814 && (otherRec.sym__0__4398489032885548840 < sym__0__4398489032885548840 && (otherRec.sym__0__7599029514332915116 < sym__0__7599029514332915116 && (otherRec.sym__0___45_7529596597076085474 < sym__0___45_7529596597076085474 && (otherRec.sym__0__3609550136696087537 < sym__0__3609550136696087537 && otherRec.sym__0__6422429896779316872 < sym__0__6422429896779316872)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record37& otherRec) const{
    return (otherRec.sym__0___45_1783229466525166718 == sym__0___45_1783229466525166718 && (otherRec.sym__0__2964572898640888933 == sym__0__2964572898640888933 && (otherRec.sym__0___45_7646744647346812089 == sym__0___45_7646744647346812089 && (otherRec.sym__0___45_8890755693813724487 == sym__0___45_8890755693813724487 && (otherRec.sym__0___45_2078956440869557365 == sym__0___45_2078956440869557365 && (otherRec.sym__0___45_5867946786197862882 == sym__0___45_5867946786197862882 && (otherRec.sym__0___45_7326821984155681819 == sym__0___45_7326821984155681819 && (otherRec.sym__0__231907318709496409 == sym__0__231907318709496409 && (otherRec.sym__0__2688255008669304275 == sym__0__2688255008669304275 && (otherRec.sym__0___45_8703327832315381333 == sym__0___45_8703327832315381333 && (otherRec.sym__0__8210285234396302525 == sym__0__8210285234396302525 && (otherRec.sym__0___45_1083461131540582838 == sym__0___45_1083461131540582838 && (otherRec.sym__0___45_332988430765002305 == sym__0___45_332988430765002305 && (otherRec.sym__0___45_1396883304971201334 == sym__0___45_1396883304971201334 && (otherRec.sym__0___45_7885307500036326584 == sym__0___45_7885307500036326584 && (otherRec.sym__0__682239336532423467 == sym__0__682239336532423467 && (otherRec.sym__0___45_9059733160469762021 == sym__0___45_9059733160469762021 && (otherRec.sym__0___45_7496847221808812455 == sym__0___45_7496847221808812455 && (otherRec.sym__0__6851494848781582431 == sym__0__6851494848781582431 && (otherRec.sym__0___45_3179925554639845007 == sym__0___45_3179925554639845007 && (otherRec.sym__0__6226923395275405685 == sym__0__6226923395275405685 && (otherRec.sym__0__7704927979988596358 == sym__0__7704927979988596358 && (otherRec.sym__0__132562152831270940 == sym__0__132562152831270940 && (otherRec.sym__0___45_8948194292450663628 == sym__0___45_8948194292450663628 && (otherRec.sym__0__3417884924835104469 == sym__0__3417884924835104469 && (otherRec.sym__0__9194555597461859141 == sym__0__9194555597461859141 && (otherRec.sym__0___45_4691860520184547445 == sym__0___45_4691860520184547445 && (otherRec.sym__0__3741070679626273796 == sym__0__3741070679626273796 && (otherRec.sym__0__8840336534235481146 == sym__0__8840336534235481146 && (otherRec.sym__0___45_2601796008016513516 == sym__0___45_2601796008016513516 && (otherRec.sym__0___45_3953136938130284179 == sym__0___45_3953136938130284179 && (otherRec.sym__0__234071792478123262 == sym__0__234071792478123262 && (otherRec.sym__0___45_8604890310897105587 == sym__0___45_8604890310897105587 && (otherRec.sym__0___45_2239084372876413259 == sym__0___45_2239084372876413259 && (otherRec.sym__0___45_517725291345247341 == sym__0___45_517725291345247341 && (otherRec.sym__0___45_1274865342338026396 == sym__0___45_1274865342338026396 && (otherRec.sym__0__5989226753506632929 == sym__0__5989226753506632929 && (otherRec.sym__0___45_5104102107747484775 == sym__0___45_5104102107747484775 && (otherRec.sym__0__845953941670768600 == sym__0__845953941670768600 && (otherRec.sym__0__4163215005619532800 == sym__0__4163215005619532800 && (otherRec.sym__0__6549476080427480210 == sym__0__6549476080427480210 && (otherRec.sym__0__2790200619910287661 == sym__0__2790200619910287661 && (otherRec.sym__0___45_7868072875935261051 == sym__0___45_7868072875935261051 && (otherRec.sym__0__5192623653961885871 == sym__0__5192623653961885871 && (otherRec.sym__0___45_6620426807825431159 == sym__0___45_6620426807825431159 && (otherRec.sym__0__6415636528128403891 == sym__0__6415636528128403891 && (otherRec.sym__0___45_7823645749172626442 == sym__0___45_7823645749172626442 && (otherRec.sym__0__2549615706294044933 == sym__0__2549615706294044933 && (otherRec.sym__0___45_2740665641693505567 == sym__0___45_2740665641693505567 && (otherRec.sym__0___45_4156887634197537189 == sym__0___45_4156887634197537189 && (otherRec.sym__0___45_3535814603226201749 == sym__0___45_3535814603226201749 && (otherRec.sym__0___45_9042078870426525352 == sym__0___45_9042078870426525352 && (otherRec.sym__0___45_4764068575183756814 == sym__0___45_4764068575183756814 && (otherRec.sym__0__4398489032885548840 == sym__0__4398489032885548840 && (otherRec.sym__0__7599029514332915116 == sym__0__7599029514332915116 && (otherRec.sym__0___45_7529596597076085474 == sym__0___45_7529596597076085474 && (otherRec.sym__0__3609550136696087537 == sym__0__3609550136696087537 && otherRec.sym__0__6422429896779316872 == sym__0__6422429896779316872)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record37& otherRec) const{
    return (otherRec.sym__0___45_1783229466525166718 != sym__0___45_1783229466525166718 || (otherRec.sym__0__2964572898640888933 != sym__0__2964572898640888933 || (otherRec.sym__0___45_7646744647346812089 != sym__0___45_7646744647346812089 || (otherRec.sym__0___45_8890755693813724487 != sym__0___45_8890755693813724487 || (otherRec.sym__0___45_2078956440869557365 != sym__0___45_2078956440869557365 || (otherRec.sym__0___45_5867946786197862882 != sym__0___45_5867946786197862882 || (otherRec.sym__0___45_7326821984155681819 != sym__0___45_7326821984155681819 || (otherRec.sym__0__231907318709496409 != sym__0__231907318709496409 || (otherRec.sym__0__2688255008669304275 != sym__0__2688255008669304275 || (otherRec.sym__0___45_8703327832315381333 != sym__0___45_8703327832315381333 || (otherRec.sym__0__8210285234396302525 != sym__0__8210285234396302525 || (otherRec.sym__0___45_1083461131540582838 != sym__0___45_1083461131540582838 || (otherRec.sym__0___45_332988430765002305 != sym__0___45_332988430765002305 || (otherRec.sym__0___45_1396883304971201334 != sym__0___45_1396883304971201334 || (otherRec.sym__0___45_7885307500036326584 != sym__0___45_7885307500036326584 || (otherRec.sym__0__682239336532423467 != sym__0__682239336532423467 || (otherRec.sym__0___45_9059733160469762021 != sym__0___45_9059733160469762021 || (otherRec.sym__0___45_7496847221808812455 != sym__0___45_7496847221808812455 || (otherRec.sym__0__6851494848781582431 != sym__0__6851494848781582431 || (otherRec.sym__0___45_3179925554639845007 != sym__0___45_3179925554639845007 || (otherRec.sym__0__6226923395275405685 != sym__0__6226923395275405685 || (otherRec.sym__0__7704927979988596358 != sym__0__7704927979988596358 || (otherRec.sym__0__132562152831270940 != sym__0__132562152831270940 || (otherRec.sym__0___45_8948194292450663628 != sym__0___45_8948194292450663628 || (otherRec.sym__0__3417884924835104469 != sym__0__3417884924835104469 || (otherRec.sym__0__9194555597461859141 != sym__0__9194555597461859141 || (otherRec.sym__0___45_4691860520184547445 != sym__0___45_4691860520184547445 || (otherRec.sym__0__3741070679626273796 != sym__0__3741070679626273796 || (otherRec.sym__0__8840336534235481146 != sym__0__8840336534235481146 || (otherRec.sym__0___45_2601796008016513516 != sym__0___45_2601796008016513516 || (otherRec.sym__0___45_3953136938130284179 != sym__0___45_3953136938130284179 || (otherRec.sym__0__234071792478123262 != sym__0__234071792478123262 || (otherRec.sym__0___45_8604890310897105587 != sym__0___45_8604890310897105587 || (otherRec.sym__0___45_2239084372876413259 != sym__0___45_2239084372876413259 || (otherRec.sym__0___45_517725291345247341 != sym__0___45_517725291345247341 || (otherRec.sym__0___45_1274865342338026396 != sym__0___45_1274865342338026396 || (otherRec.sym__0__5989226753506632929 != sym__0__5989226753506632929 || (otherRec.sym__0___45_5104102107747484775 != sym__0___45_5104102107747484775 || (otherRec.sym__0__845953941670768600 != sym__0__845953941670768600 || (otherRec.sym__0__4163215005619532800 != sym__0__4163215005619532800 || (otherRec.sym__0__6549476080427480210 != sym__0__6549476080427480210 || (otherRec.sym__0__2790200619910287661 != sym__0__2790200619910287661 || (otherRec.sym__0___45_7868072875935261051 != sym__0___45_7868072875935261051 || (otherRec.sym__0__5192623653961885871 != sym__0__5192623653961885871 || (otherRec.sym__0___45_6620426807825431159 != sym__0___45_6620426807825431159 || (otherRec.sym__0__6415636528128403891 != sym__0__6415636528128403891 || (otherRec.sym__0___45_7823645749172626442 != sym__0___45_7823645749172626442 || (otherRec.sym__0__2549615706294044933 != sym__0__2549615706294044933 || (otherRec.sym__0___45_2740665641693505567 != sym__0___45_2740665641693505567 || (otherRec.sym__0___45_4156887634197537189 != sym__0___45_4156887634197537189 || (otherRec.sym__0___45_3535814603226201749 != sym__0___45_3535814603226201749 || (otherRec.sym__0___45_9042078870426525352 != sym__0___45_9042078870426525352 || (otherRec.sym__0___45_4764068575183756814 != sym__0___45_4764068575183756814 || (otherRec.sym__0__4398489032885548840 != sym__0__4398489032885548840 || (otherRec.sym__0__7599029514332915116 != sym__0__7599029514332915116 || (otherRec.sym__0___45_7529596597076085474 != sym__0___45_7529596597076085474 || (otherRec.sym__0__3609550136696087537 != sym__0__3609550136696087537 || otherRec.sym__0__6422429896779316872 != sym__0__6422429896779316872)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_1783229466525166718;
  fluidb_string<25> sym__0__2964572898640888933;
  fluidb_string<40> sym__0___45_7646744647346812089;
  fluidb_string<16> sym__0___45_8890755693813724487;
  fluidb_string<16> sym__0___45_2078956440869557365;
  fluidb_string<13> sym__0___45_5867946786197862882;
  fluidb_string<15> sym__0___45_7326821984155681819;
  unsigned sym__0__231907318709496409;
  int sym__0__2688255008669304275;
  unsigned sym__0___45_8703327832315381333;
  unsigned sym__0__8210285234396302525;
  unsigned sym__0___45_1083461131540582838;
  unsigned sym__0___45_332988430765002305;
  fluidb_string<21> sym__0___45_1396883304971201334;
  unsigned sym__0___45_7885307500036326584;
  fluidb_string<10> sym__0__682239336532423467;
  unsigned sym__0___45_9059733160469762021;
  double sym__0___45_7496847221808812455;
  unsigned sym__0__6851494848781582431;
  double sym__0___45_3179925554639845007;
  unsigned sym__0__6226923395275405685;
  unsigned sym__0__7704927979988596358;
  double sym__0__132562152831270940;
  fluidb_string<13> sym__0___45_8948194292450663628;
  unsigned sym__0__3417884924835104469;
  fluidb_string<18> sym__0__9194555597461859141;
  fluidb_string<9> sym__0___45_4691860520184547445;
  fluidb_string<9> sym__0__3741070679626273796;
  unsigned sym__0__8840336534235481146;
  unsigned sym__0___45_2601796008016513516;
  fluidb_string<7> sym__0___45_3953136938130284179;
  unsigned sym__0__234071792478123262;
  unsigned sym__0___45_8604890310897105587;
  unsigned sym__0___45_2239084372876413259;
  unsigned sym__0___45_517725291345247341;
  unsigned sym__0___45_1274865342338026396;
  fluidb_string<15> sym__0__5989226753506632929;
  fluidb_string<2> sym__0___45_5104102107747484775;
  fluidb_string<2> sym__0__845953941670768600;
  fluidb_string<2> sym__0__4163215005619532800;
  fluidb_string<2> sym__0__6549476080427480210;
  unsigned sym__0__2790200619910287661;
  fluidb_string<18> sym__0___45_7868072875935261051;
  fluidb_string<40> sym__0__5192623653961885871;
  fluidb_string<11> sym__0___45_6620426807825431159;
  fluidb_string<15> sym__0__6415636528128403891;
  fluidb_string<13> sym__0___45_7823645749172626442;
  fluidb_string<15> sym__0__2549615706294044933;
  fluidb_string<21> sym__0___45_2740665641693505567;
  unsigned sym__0___45_4156887634197537189;
  fluidb_string<55> sym__0___45_3535814603226201749;
  fluidb_string<25> sym__0___45_9042078870426525352;
  fluidb_string<7> sym__0___45_4764068575183756814;
  fluidb_string<10> sym__0__4398489032885548840;
  fluidb_string<11> sym__0__7599029514332915116;
  fluidb_string<25> sym__0___45_7529596597076085474;
  unsigned sym__0__3609550136696087537;
  fluidb_string<10> sym__0__6422429896779316872;
 private:
};


class Record20 {
 public:
  Record20(unsigned __sym__0__2102316481828394123, fluidb_string<25> __sym__0__1780257040091145452, fluidb_string<40> __sym__0__3109939911660640430, fluidb_string<16> __sym__0___45_2175199227983174320, fluidb_string<16> __sym__0__2274992661292194562, fluidb_string<13> __sym__0___45_52536403880094569, fluidb_string<15> __sym__0__8474116574285927276, unsigned __sym__0__1835503384076924528, int __sym__0__586412267723269786, unsigned __sym__0__1353367320182642978, unsigned __sym__0___45_6351222752813626636, unsigned __sym__0___45_805067702695824989, unsigned __sym__0__914509637812701046, fluidb_string<21> __sym__0__7895450651221174051, unsigned __sym__0__5942285589324576545, fluidb_string<10> __sym__0__3979382234526804898, unsigned __sym__0___45_6103522369909819246, double __sym__0__1873148039180761712, unsigned __sym__0__1430551526674366102, double __sym__0__1048818672001592248, unsigned __sym__0__5723353836447658492, unsigned __sym__0___45_2233273278156881105, double __sym__0___45_1120880788595637835, fluidb_string<13> __sym__0___45_6361490230660137987, unsigned __sym__0___45_7131249874638266788, fluidb_string<18> __sym__0__7265729621635359692, fluidb_string<9> __sym__0___45_2986035740159621374, fluidb_string<9> __sym__0__5081664509798388941, unsigned __sym__0___45_8518596434939314413, unsigned __sym__0__1988221653138390749, fluidb_string<7> __sym__0___45_8801377200944175068, unsigned __sym__0___45_4634183629139578121, unsigned __sym__0__806472603637564420, unsigned __sym__0__1725829484083430844, unsigned __sym__0___45_5279274827282678566, unsigned __sym__0___45_9129247388617675603, fluidb_string<15> __sym__0__1232225844204183080, fluidb_string<2> __sym__0__9184663680502119984, fluidb_string<2> __sym__0___45_9023997483659527503, fluidb_string<2> __sym__0___45_1026604631201554135, fluidb_string<2> __sym__0___45_7189754320372197989) : sym__0__2102316481828394123(__sym__0__2102316481828394123), sym__0__1780257040091145452(__sym__0__1780257040091145452), sym__0__3109939911660640430(__sym__0__3109939911660640430), sym__0___45_2175199227983174320(__sym__0___45_2175199227983174320), sym__0__2274992661292194562(__sym__0__2274992661292194562), sym__0___45_52536403880094569(__sym__0___45_52536403880094569), sym__0__8474116574285927276(__sym__0__8474116574285927276), sym__0__1835503384076924528(__sym__0__1835503384076924528), sym__0__586412267723269786(__sym__0__586412267723269786), sym__0__1353367320182642978(__sym__0__1353367320182642978), sym__0___45_6351222752813626636(__sym__0___45_6351222752813626636), sym__0___45_805067702695824989(__sym__0___45_805067702695824989), sym__0__914509637812701046(__sym__0__914509637812701046), sym__0__7895450651221174051(__sym__0__7895450651221174051), sym__0__5942285589324576545(__sym__0__5942285589324576545), sym__0__3979382234526804898(__sym__0__3979382234526804898), sym__0___45_6103522369909819246(__sym__0___45_6103522369909819246), sym__0__1873148039180761712(__sym__0__1873148039180761712), sym__0__1430551526674366102(__sym__0__1430551526674366102), sym__0__1048818672001592248(__sym__0__1048818672001592248), sym__0__5723353836447658492(__sym__0__5723353836447658492), sym__0___45_2233273278156881105(__sym__0___45_2233273278156881105), sym__0___45_1120880788595637835(__sym__0___45_1120880788595637835), sym__0___45_6361490230660137987(__sym__0___45_6361490230660137987), sym__0___45_7131249874638266788(__sym__0___45_7131249874638266788), sym__0__7265729621635359692(__sym__0__7265729621635359692), sym__0___45_2986035740159621374(__sym__0___45_2986035740159621374), sym__0__5081664509798388941(__sym__0__5081664509798388941), sym__0___45_8518596434939314413(__sym__0___45_8518596434939314413), sym__0__1988221653138390749(__sym__0__1988221653138390749), sym__0___45_8801377200944175068(__sym__0___45_8801377200944175068), sym__0___45_4634183629139578121(__sym__0___45_4634183629139578121), sym__0__806472603637564420(__sym__0__806472603637564420), sym__0__1725829484083430844(__sym__0__1725829484083430844), sym__0___45_5279274827282678566(__sym__0___45_5279274827282678566), sym__0___45_9129247388617675603(__sym__0___45_9129247388617675603), sym__0__1232225844204183080(__sym__0__1232225844204183080), sym__0__9184663680502119984(__sym__0__9184663680502119984), sym__0___45_9023997483659527503(__sym__0___45_9023997483659527503), sym__0___45_1026604631201554135(__sym__0___45_1026604631201554135), sym__0___45_7189754320372197989(__sym__0___45_7189754320372197989)
  {
  }
  Record20() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__2102316481828394123 << " | " << arrToString(sym__0__1780257040091145452) << " | " << arrToString(sym__0__3109939911660640430) << " | " << arrToString(sym__0___45_2175199227983174320) << " | " << arrToString(sym__0__2274992661292194562) << " | " << arrToString(sym__0___45_52536403880094569) << " | " << arrToString(sym__0__8474116574285927276) << " | " << sym__0__1835503384076924528 << " | " << sym__0__586412267723269786 << " | " << sym__0__1353367320182642978 << " | " << sym__0___45_6351222752813626636 << " | " << sym__0___45_805067702695824989 << " | " << sym__0__914509637812701046 << " | " << arrToString(sym__0__7895450651221174051) << " | " << sym__0__5942285589324576545 << " | " << arrToString(sym__0__3979382234526804898) << " | " << sym__0___45_6103522369909819246 << " | " << sym__0__1873148039180761712 << " | " << sym__0__1430551526674366102 << " | " << sym__0__1048818672001592248 << " | " << sym__0__5723353836447658492 << " | " << sym__0___45_2233273278156881105 << " | " << sym__0___45_1120880788595637835 << " | " << arrToString(sym__0___45_6361490230660137987) << " | " << sym__0___45_7131249874638266788 << " | " << arrToString(sym__0__7265729621635359692) << " | " << arrToString(sym__0___45_2986035740159621374) << " | " << arrToString(sym__0__5081664509798388941) << " | " << sym__0___45_8518596434939314413 << " | " << sym__0__1988221653138390749 << " | " << arrToString(sym__0___45_8801377200944175068) << " | " << sym__0___45_4634183629139578121 << " | " << sym__0__806472603637564420 << " | " << sym__0__1725829484083430844 << " | " << sym__0___45_5279274827282678566 << " | " << sym__0___45_9129247388617675603 << " | " << arrToString(sym__0__1232225844204183080) << " | " << arrToString(sym__0__9184663680502119984) << " | " << arrToString(sym__0___45_9023997483659527503) << " | " << arrToString(sym__0___45_1026604631201554135) << " | " << arrToString(sym__0___45_7189754320372197989);
    return o.str();
  }
  bool operator <(const Record20& otherRec) const{
    return (otherRec.sym__0__2102316481828394123 < sym__0__2102316481828394123 && (otherRec.sym__0__1780257040091145452 < sym__0__1780257040091145452 && (otherRec.sym__0__3109939911660640430 < sym__0__3109939911660640430 && (otherRec.sym__0___45_2175199227983174320 < sym__0___45_2175199227983174320 && (otherRec.sym__0__2274992661292194562 < sym__0__2274992661292194562 && (otherRec.sym__0___45_52536403880094569 < sym__0___45_52536403880094569 && (otherRec.sym__0__8474116574285927276 < sym__0__8474116574285927276 && (otherRec.sym__0__1835503384076924528 < sym__0__1835503384076924528 && (otherRec.sym__0__586412267723269786 < sym__0__586412267723269786 && (otherRec.sym__0__1353367320182642978 < sym__0__1353367320182642978 && (otherRec.sym__0___45_6351222752813626636 < sym__0___45_6351222752813626636 && (otherRec.sym__0___45_805067702695824989 < sym__0___45_805067702695824989 && (otherRec.sym__0__914509637812701046 < sym__0__914509637812701046 && (otherRec.sym__0__7895450651221174051 < sym__0__7895450651221174051 && (otherRec.sym__0__5942285589324576545 < sym__0__5942285589324576545 && (otherRec.sym__0__3979382234526804898 < sym__0__3979382234526804898 && (otherRec.sym__0___45_6103522369909819246 < sym__0___45_6103522369909819246 && (otherRec.sym__0__1873148039180761712 < sym__0__1873148039180761712 && (otherRec.sym__0__1430551526674366102 < sym__0__1430551526674366102 && (otherRec.sym__0__1048818672001592248 < sym__0__1048818672001592248 && (otherRec.sym__0__5723353836447658492 < sym__0__5723353836447658492 && (otherRec.sym__0___45_2233273278156881105 < sym__0___45_2233273278156881105 && (otherRec.sym__0___45_1120880788595637835 < sym__0___45_1120880788595637835 && (otherRec.sym__0___45_6361490230660137987 < sym__0___45_6361490230660137987 && (otherRec.sym__0___45_7131249874638266788 < sym__0___45_7131249874638266788 && (otherRec.sym__0__7265729621635359692 < sym__0__7265729621635359692 && (otherRec.sym__0___45_2986035740159621374 < sym__0___45_2986035740159621374 && (otherRec.sym__0__5081664509798388941 < sym__0__5081664509798388941 && (otherRec.sym__0___45_8518596434939314413 < sym__0___45_8518596434939314413 && (otherRec.sym__0__1988221653138390749 < sym__0__1988221653138390749 && (otherRec.sym__0___45_8801377200944175068 < sym__0___45_8801377200944175068 && (otherRec.sym__0___45_4634183629139578121 < sym__0___45_4634183629139578121 && (otherRec.sym__0__806472603637564420 < sym__0__806472603637564420 && (otherRec.sym__0__1725829484083430844 < sym__0__1725829484083430844 && (otherRec.sym__0___45_5279274827282678566 < sym__0___45_5279274827282678566 && (otherRec.sym__0___45_9129247388617675603 < sym__0___45_9129247388617675603 && (otherRec.sym__0__1232225844204183080 < sym__0__1232225844204183080 && (otherRec.sym__0__9184663680502119984 < sym__0__9184663680502119984 && (otherRec.sym__0___45_9023997483659527503 < sym__0___45_9023997483659527503 && (otherRec.sym__0___45_1026604631201554135 < sym__0___45_1026604631201554135 && otherRec.sym__0___45_7189754320372197989 < sym__0___45_7189754320372197989))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record20& otherRec) const{
    return (otherRec.sym__0__2102316481828394123 == sym__0__2102316481828394123 && (otherRec.sym__0__1780257040091145452 == sym__0__1780257040091145452 && (otherRec.sym__0__3109939911660640430 == sym__0__3109939911660640430 && (otherRec.sym__0___45_2175199227983174320 == sym__0___45_2175199227983174320 && (otherRec.sym__0__2274992661292194562 == sym__0__2274992661292194562 && (otherRec.sym__0___45_52536403880094569 == sym__0___45_52536403880094569 && (otherRec.sym__0__8474116574285927276 == sym__0__8474116574285927276 && (otherRec.sym__0__1835503384076924528 == sym__0__1835503384076924528 && (otherRec.sym__0__586412267723269786 == sym__0__586412267723269786 && (otherRec.sym__0__1353367320182642978 == sym__0__1353367320182642978 && (otherRec.sym__0___45_6351222752813626636 == sym__0___45_6351222752813626636 && (otherRec.sym__0___45_805067702695824989 == sym__0___45_805067702695824989 && (otherRec.sym__0__914509637812701046 == sym__0__914509637812701046 && (otherRec.sym__0__7895450651221174051 == sym__0__7895450651221174051 && (otherRec.sym__0__5942285589324576545 == sym__0__5942285589324576545 && (otherRec.sym__0__3979382234526804898 == sym__0__3979382234526804898 && (otherRec.sym__0___45_6103522369909819246 == sym__0___45_6103522369909819246 && (otherRec.sym__0__1873148039180761712 == sym__0__1873148039180761712 && (otherRec.sym__0__1430551526674366102 == sym__0__1430551526674366102 && (otherRec.sym__0__1048818672001592248 == sym__0__1048818672001592248 && (otherRec.sym__0__5723353836447658492 == sym__0__5723353836447658492 && (otherRec.sym__0___45_2233273278156881105 == sym__0___45_2233273278156881105 && (otherRec.sym__0___45_1120880788595637835 == sym__0___45_1120880788595637835 && (otherRec.sym__0___45_6361490230660137987 == sym__0___45_6361490230660137987 && (otherRec.sym__0___45_7131249874638266788 == sym__0___45_7131249874638266788 && (otherRec.sym__0__7265729621635359692 == sym__0__7265729621635359692 && (otherRec.sym__0___45_2986035740159621374 == sym__0___45_2986035740159621374 && (otherRec.sym__0__5081664509798388941 == sym__0__5081664509798388941 && (otherRec.sym__0___45_8518596434939314413 == sym__0___45_8518596434939314413 && (otherRec.sym__0__1988221653138390749 == sym__0__1988221653138390749 && (otherRec.sym__0___45_8801377200944175068 == sym__0___45_8801377200944175068 && (otherRec.sym__0___45_4634183629139578121 == sym__0___45_4634183629139578121 && (otherRec.sym__0__806472603637564420 == sym__0__806472603637564420 && (otherRec.sym__0__1725829484083430844 == sym__0__1725829484083430844 && (otherRec.sym__0___45_5279274827282678566 == sym__0___45_5279274827282678566 && (otherRec.sym__0___45_9129247388617675603 == sym__0___45_9129247388617675603 && (otherRec.sym__0__1232225844204183080 == sym__0__1232225844204183080 && (otherRec.sym__0__9184663680502119984 == sym__0__9184663680502119984 && (otherRec.sym__0___45_9023997483659527503 == sym__0___45_9023997483659527503 && (otherRec.sym__0___45_1026604631201554135 == sym__0___45_1026604631201554135 && otherRec.sym__0___45_7189754320372197989 == sym__0___45_7189754320372197989))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record20& otherRec) const{
    return (otherRec.sym__0__2102316481828394123 != sym__0__2102316481828394123 || (otherRec.sym__0__1780257040091145452 != sym__0__1780257040091145452 || (otherRec.sym__0__3109939911660640430 != sym__0__3109939911660640430 || (otherRec.sym__0___45_2175199227983174320 != sym__0___45_2175199227983174320 || (otherRec.sym__0__2274992661292194562 != sym__0__2274992661292194562 || (otherRec.sym__0___45_52536403880094569 != sym__0___45_52536403880094569 || (otherRec.sym__0__8474116574285927276 != sym__0__8474116574285927276 || (otherRec.sym__0__1835503384076924528 != sym__0__1835503384076924528 || (otherRec.sym__0__586412267723269786 != sym__0__586412267723269786 || (otherRec.sym__0__1353367320182642978 != sym__0__1353367320182642978 || (otherRec.sym__0___45_6351222752813626636 != sym__0___45_6351222752813626636 || (otherRec.sym__0___45_805067702695824989 != sym__0___45_805067702695824989 || (otherRec.sym__0__914509637812701046 != sym__0__914509637812701046 || (otherRec.sym__0__7895450651221174051 != sym__0__7895450651221174051 || (otherRec.sym__0__5942285589324576545 != sym__0__5942285589324576545 || (otherRec.sym__0__3979382234526804898 != sym__0__3979382234526804898 || (otherRec.sym__0___45_6103522369909819246 != sym__0___45_6103522369909819246 || (otherRec.sym__0__1873148039180761712 != sym__0__1873148039180761712 || (otherRec.sym__0__1430551526674366102 != sym__0__1430551526674366102 || (otherRec.sym__0__1048818672001592248 != sym__0__1048818672001592248 || (otherRec.sym__0__5723353836447658492 != sym__0__5723353836447658492 || (otherRec.sym__0___45_2233273278156881105 != sym__0___45_2233273278156881105 || (otherRec.sym__0___45_1120880788595637835 != sym__0___45_1120880788595637835 || (otherRec.sym__0___45_6361490230660137987 != sym__0___45_6361490230660137987 || (otherRec.sym__0___45_7131249874638266788 != sym__0___45_7131249874638266788 || (otherRec.sym__0__7265729621635359692 != sym__0__7265729621635359692 || (otherRec.sym__0___45_2986035740159621374 != sym__0___45_2986035740159621374 || (otherRec.sym__0__5081664509798388941 != sym__0__5081664509798388941 || (otherRec.sym__0___45_8518596434939314413 != sym__0___45_8518596434939314413 || (otherRec.sym__0__1988221653138390749 != sym__0__1988221653138390749 || (otherRec.sym__0___45_8801377200944175068 != sym__0___45_8801377200944175068 || (otherRec.sym__0___45_4634183629139578121 != sym__0___45_4634183629139578121 || (otherRec.sym__0__806472603637564420 != sym__0__806472603637564420 || (otherRec.sym__0__1725829484083430844 != sym__0__1725829484083430844 || (otherRec.sym__0___45_5279274827282678566 != sym__0___45_5279274827282678566 || (otherRec.sym__0___45_9129247388617675603 != sym__0___45_9129247388617675603 || (otherRec.sym__0__1232225844204183080 != sym__0__1232225844204183080 || (otherRec.sym__0__9184663680502119984 != sym__0__9184663680502119984 || (otherRec.sym__0___45_9023997483659527503 != sym__0___45_9023997483659527503 || (otherRec.sym__0___45_1026604631201554135 != sym__0___45_1026604631201554135 || otherRec.sym__0___45_7189754320372197989 != sym__0___45_7189754320372197989))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__2102316481828394123;
  fluidb_string<25> sym__0__1780257040091145452;
  fluidb_string<40> sym__0__3109939911660640430;
  fluidb_string<16> sym__0___45_2175199227983174320;
  fluidb_string<16> sym__0__2274992661292194562;
  fluidb_string<13> sym__0___45_52536403880094569;
  fluidb_string<15> sym__0__8474116574285927276;
  unsigned sym__0__1835503384076924528;
  int sym__0__586412267723269786;
  unsigned sym__0__1353367320182642978;
  unsigned sym__0___45_6351222752813626636;
  unsigned sym__0___45_805067702695824989;
  unsigned sym__0__914509637812701046;
  fluidb_string<21> sym__0__7895450651221174051;
  unsigned sym__0__5942285589324576545;
  fluidb_string<10> sym__0__3979382234526804898;
  unsigned sym__0___45_6103522369909819246;
  double sym__0__1873148039180761712;
  unsigned sym__0__1430551526674366102;
  double sym__0__1048818672001592248;
  unsigned sym__0__5723353836447658492;
  unsigned sym__0___45_2233273278156881105;
  double sym__0___45_1120880788595637835;
  fluidb_string<13> sym__0___45_6361490230660137987;
  unsigned sym__0___45_7131249874638266788;
  fluidb_string<18> sym__0__7265729621635359692;
  fluidb_string<9> sym__0___45_2986035740159621374;
  fluidb_string<9> sym__0__5081664509798388941;
  unsigned sym__0___45_8518596434939314413;
  unsigned sym__0__1988221653138390749;
  fluidb_string<7> sym__0___45_8801377200944175068;
  unsigned sym__0___45_4634183629139578121;
  unsigned sym__0__806472603637564420;
  unsigned sym__0__1725829484083430844;
  unsigned sym__0___45_5279274827282678566;
  unsigned sym__0___45_9129247388617675603;
  fluidb_string<15> sym__0__1232225844204183080;
  fluidb_string<2> sym__0__9184663680502119984;
  fluidb_string<2> sym__0___45_9023997483659527503;
  fluidb_string<2> sym__0___45_1026604631201554135;
  fluidb_string<2> sym__0___45_7189754320372197989;
 private:
};


class Record10 {
 public:
  Record10(unsigned __sym__0___45_3961143035674407474, fluidb_string<18> __sym__0___45_6251899802584687138, fluidb_string<9> __sym__0__7895704682370371792, fluidb_string<9> __sym__0___45_4486276699369081973, unsigned __sym__0__1119005997298974989, unsigned __sym__0__3623076037790620667, fluidb_string<7> __sym__0___45_369211045765545994, unsigned __sym__0___45_2252349090140989903, unsigned __sym__0___45_6519715028980934506, unsigned __sym__0__6988144115678218478, unsigned __sym__0__1168585672581702408, unsigned __sym__0___45_1566345155802505557, fluidb_string<15> __sym__0___45_3812637469976556790, fluidb_string<2> __sym__0___45_2398128448016703502, fluidb_string<2> __sym__0__5574729781191990975, fluidb_string<2> __sym__0___45_5962954882039921225, fluidb_string<2> __sym__0___45_7276734914968453131, unsigned __sym__0__5341165382232817970, int __sym__0__5806605655987033032, unsigned __sym__0___45_6623407408063066704, unsigned __sym__0___45_1670026162273154778, unsigned __sym__0__2289386367904588797, unsigned __sym__0__8025829587274267860, fluidb_string<21> __sym__0__454237065112775549, unsigned __sym__0__608217599158647375, fluidb_string<10> __sym__0__4347069016709593136, unsigned __sym__0__4553650632168714688, double __sym__0__586349573025064242, unsigned __sym__0__144523031940788660, double __sym__0__2942207309637238010, unsigned __sym__0__1782085603058736686, unsigned __sym__0__3001704397998344329, double __sym__0___45_2662583778072919661, fluidb_string<13> __sym__0__8853539013824041307) : sym__0___45_3961143035674407474(__sym__0___45_3961143035674407474), sym__0___45_6251899802584687138(__sym__0___45_6251899802584687138), sym__0__7895704682370371792(__sym__0__7895704682370371792), sym__0___45_4486276699369081973(__sym__0___45_4486276699369081973), sym__0__1119005997298974989(__sym__0__1119005997298974989), sym__0__3623076037790620667(__sym__0__3623076037790620667), sym__0___45_369211045765545994(__sym__0___45_369211045765545994), sym__0___45_2252349090140989903(__sym__0___45_2252349090140989903), sym__0___45_6519715028980934506(__sym__0___45_6519715028980934506), sym__0__6988144115678218478(__sym__0__6988144115678218478), sym__0__1168585672581702408(__sym__0__1168585672581702408), sym__0___45_1566345155802505557(__sym__0___45_1566345155802505557), sym__0___45_3812637469976556790(__sym__0___45_3812637469976556790), sym__0___45_2398128448016703502(__sym__0___45_2398128448016703502), sym__0__5574729781191990975(__sym__0__5574729781191990975), sym__0___45_5962954882039921225(__sym__0___45_5962954882039921225), sym__0___45_7276734914968453131(__sym__0___45_7276734914968453131), sym__0__5341165382232817970(__sym__0__5341165382232817970), sym__0__5806605655987033032(__sym__0__5806605655987033032), sym__0___45_6623407408063066704(__sym__0___45_6623407408063066704), sym__0___45_1670026162273154778(__sym__0___45_1670026162273154778), sym__0__2289386367904588797(__sym__0__2289386367904588797), sym__0__8025829587274267860(__sym__0__8025829587274267860), sym__0__454237065112775549(__sym__0__454237065112775549), sym__0__608217599158647375(__sym__0__608217599158647375), sym__0__4347069016709593136(__sym__0__4347069016709593136), sym__0__4553650632168714688(__sym__0__4553650632168714688), sym__0__586349573025064242(__sym__0__586349573025064242), sym__0__144523031940788660(__sym__0__144523031940788660), sym__0__2942207309637238010(__sym__0__2942207309637238010), sym__0__1782085603058736686(__sym__0__1782085603058736686), sym__0__3001704397998344329(__sym__0__3001704397998344329), sym__0___45_2662583778072919661(__sym__0___45_2662583778072919661), sym__0__8853539013824041307(__sym__0__8853539013824041307)
  {
  }
  Record10() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_3961143035674407474 << " | " << arrToString(sym__0___45_6251899802584687138) << " | " << arrToString(sym__0__7895704682370371792) << " | " << arrToString(sym__0___45_4486276699369081973) << " | " << sym__0__1119005997298974989 << " | " << sym__0__3623076037790620667 << " | " << arrToString(sym__0___45_369211045765545994) << " | " << sym__0___45_2252349090140989903 << " | " << sym__0___45_6519715028980934506 << " | " << sym__0__6988144115678218478 << " | " << sym__0__1168585672581702408 << " | " << sym__0___45_1566345155802505557 << " | " << arrToString(sym__0___45_3812637469976556790) << " | " << arrToString(sym__0___45_2398128448016703502) << " | " << arrToString(sym__0__5574729781191990975) << " | " << arrToString(sym__0___45_5962954882039921225) << " | " << arrToString(sym__0___45_7276734914968453131) << " | " << sym__0__5341165382232817970 << " | " << sym__0__5806605655987033032 << " | " << sym__0___45_6623407408063066704 << " | " << sym__0___45_1670026162273154778 << " | " << sym__0__2289386367904588797 << " | " << sym__0__8025829587274267860 << " | " << arrToString(sym__0__454237065112775549) << " | " << sym__0__608217599158647375 << " | " << arrToString(sym__0__4347069016709593136) << " | " << sym__0__4553650632168714688 << " | " << sym__0__586349573025064242 << " | " << sym__0__144523031940788660 << " | " << sym__0__2942207309637238010 << " | " << sym__0__1782085603058736686 << " | " << sym__0__3001704397998344329 << " | " << sym__0___45_2662583778072919661 << " | " << arrToString(sym__0__8853539013824041307);
    return o.str();
  }
  bool operator <(const Record10& otherRec) const{
    return (otherRec.sym__0___45_3961143035674407474 < sym__0___45_3961143035674407474 && (otherRec.sym__0___45_6251899802584687138 < sym__0___45_6251899802584687138 && (otherRec.sym__0__7895704682370371792 < sym__0__7895704682370371792 && (otherRec.sym__0___45_4486276699369081973 < sym__0___45_4486276699369081973 && (otherRec.sym__0__1119005997298974989 < sym__0__1119005997298974989 && (otherRec.sym__0__3623076037790620667 < sym__0__3623076037790620667 && (otherRec.sym__0___45_369211045765545994 < sym__0___45_369211045765545994 && (otherRec.sym__0___45_2252349090140989903 < sym__0___45_2252349090140989903 && (otherRec.sym__0___45_6519715028980934506 < sym__0___45_6519715028980934506 && (otherRec.sym__0__6988144115678218478 < sym__0__6988144115678218478 && (otherRec.sym__0__1168585672581702408 < sym__0__1168585672581702408 && (otherRec.sym__0___45_1566345155802505557 < sym__0___45_1566345155802505557 && (otherRec.sym__0___45_3812637469976556790 < sym__0___45_3812637469976556790 && (otherRec.sym__0___45_2398128448016703502 < sym__0___45_2398128448016703502 && (otherRec.sym__0__5574729781191990975 < sym__0__5574729781191990975 && (otherRec.sym__0___45_5962954882039921225 < sym__0___45_5962954882039921225 && (otherRec.sym__0___45_7276734914968453131 < sym__0___45_7276734914968453131 && (otherRec.sym__0__5341165382232817970 < sym__0__5341165382232817970 && (otherRec.sym__0__5806605655987033032 < sym__0__5806605655987033032 && (otherRec.sym__0___45_6623407408063066704 < sym__0___45_6623407408063066704 && (otherRec.sym__0___45_1670026162273154778 < sym__0___45_1670026162273154778 && (otherRec.sym__0__2289386367904588797 < sym__0__2289386367904588797 && (otherRec.sym__0__8025829587274267860 < sym__0__8025829587274267860 && (otherRec.sym__0__454237065112775549 < sym__0__454237065112775549 && (otherRec.sym__0__608217599158647375 < sym__0__608217599158647375 && (otherRec.sym__0__4347069016709593136 < sym__0__4347069016709593136 && (otherRec.sym__0__4553650632168714688 < sym__0__4553650632168714688 && (otherRec.sym__0__586349573025064242 < sym__0__586349573025064242 && (otherRec.sym__0__144523031940788660 < sym__0__144523031940788660 && (otherRec.sym__0__2942207309637238010 < sym__0__2942207309637238010 && (otherRec.sym__0__1782085603058736686 < sym__0__1782085603058736686 && (otherRec.sym__0__3001704397998344329 < sym__0__3001704397998344329 && (otherRec.sym__0___45_2662583778072919661 < sym__0___45_2662583778072919661 && otherRec.sym__0__8853539013824041307 < sym__0__8853539013824041307)))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record10& otherRec) const{
    return (otherRec.sym__0___45_3961143035674407474 == sym__0___45_3961143035674407474 && (otherRec.sym__0___45_6251899802584687138 == sym__0___45_6251899802584687138 && (otherRec.sym__0__7895704682370371792 == sym__0__7895704682370371792 && (otherRec.sym__0___45_4486276699369081973 == sym__0___45_4486276699369081973 && (otherRec.sym__0__1119005997298974989 == sym__0__1119005997298974989 && (otherRec.sym__0__3623076037790620667 == sym__0__3623076037790620667 && (otherRec.sym__0___45_369211045765545994 == sym__0___45_369211045765545994 && (otherRec.sym__0___45_2252349090140989903 == sym__0___45_2252349090140989903 && (otherRec.sym__0___45_6519715028980934506 == sym__0___45_6519715028980934506 && (otherRec.sym__0__6988144115678218478 == sym__0__6988144115678218478 && (otherRec.sym__0__1168585672581702408 == sym__0__1168585672581702408 && (otherRec.sym__0___45_1566345155802505557 == sym__0___45_1566345155802505557 && (otherRec.sym__0___45_3812637469976556790 == sym__0___45_3812637469976556790 && (otherRec.sym__0___45_2398128448016703502 == sym__0___45_2398128448016703502 && (otherRec.sym__0__5574729781191990975 == sym__0__5574729781191990975 && (otherRec.sym__0___45_5962954882039921225 == sym__0___45_5962954882039921225 && (otherRec.sym__0___45_7276734914968453131 == sym__0___45_7276734914968453131 && (otherRec.sym__0__5341165382232817970 == sym__0__5341165382232817970 && (otherRec.sym__0__5806605655987033032 == sym__0__5806605655987033032 && (otherRec.sym__0___45_6623407408063066704 == sym__0___45_6623407408063066704 && (otherRec.sym__0___45_1670026162273154778 == sym__0___45_1670026162273154778 && (otherRec.sym__0__2289386367904588797 == sym__0__2289386367904588797 && (otherRec.sym__0__8025829587274267860 == sym__0__8025829587274267860 && (otherRec.sym__0__454237065112775549 == sym__0__454237065112775549 && (otherRec.sym__0__608217599158647375 == sym__0__608217599158647375 && (otherRec.sym__0__4347069016709593136 == sym__0__4347069016709593136 && (otherRec.sym__0__4553650632168714688 == sym__0__4553650632168714688 && (otherRec.sym__0__586349573025064242 == sym__0__586349573025064242 && (otherRec.sym__0__144523031940788660 == sym__0__144523031940788660 && (otherRec.sym__0__2942207309637238010 == sym__0__2942207309637238010 && (otherRec.sym__0__1782085603058736686 == sym__0__1782085603058736686 && (otherRec.sym__0__3001704397998344329 == sym__0__3001704397998344329 && (otherRec.sym__0___45_2662583778072919661 == sym__0___45_2662583778072919661 && otherRec.sym__0__8853539013824041307 == sym__0__8853539013824041307)))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record10& otherRec) const{
    return (otherRec.sym__0___45_3961143035674407474 != sym__0___45_3961143035674407474 || (otherRec.sym__0___45_6251899802584687138 != sym__0___45_6251899802584687138 || (otherRec.sym__0__7895704682370371792 != sym__0__7895704682370371792 || (otherRec.sym__0___45_4486276699369081973 != sym__0___45_4486276699369081973 || (otherRec.sym__0__1119005997298974989 != sym__0__1119005997298974989 || (otherRec.sym__0__3623076037790620667 != sym__0__3623076037790620667 || (otherRec.sym__0___45_369211045765545994 != sym__0___45_369211045765545994 || (otherRec.sym__0___45_2252349090140989903 != sym__0___45_2252349090140989903 || (otherRec.sym__0___45_6519715028980934506 != sym__0___45_6519715028980934506 || (otherRec.sym__0__6988144115678218478 != sym__0__6988144115678218478 || (otherRec.sym__0__1168585672581702408 != sym__0__1168585672581702408 || (otherRec.sym__0___45_1566345155802505557 != sym__0___45_1566345155802505557 || (otherRec.sym__0___45_3812637469976556790 != sym__0___45_3812637469976556790 || (otherRec.sym__0___45_2398128448016703502 != sym__0___45_2398128448016703502 || (otherRec.sym__0__5574729781191990975 != sym__0__5574729781191990975 || (otherRec.sym__0___45_5962954882039921225 != sym__0___45_5962954882039921225 || (otherRec.sym__0___45_7276734914968453131 != sym__0___45_7276734914968453131 || (otherRec.sym__0__5341165382232817970 != sym__0__5341165382232817970 || (otherRec.sym__0__5806605655987033032 != sym__0__5806605655987033032 || (otherRec.sym__0___45_6623407408063066704 != sym__0___45_6623407408063066704 || (otherRec.sym__0___45_1670026162273154778 != sym__0___45_1670026162273154778 || (otherRec.sym__0__2289386367904588797 != sym__0__2289386367904588797 || (otherRec.sym__0__8025829587274267860 != sym__0__8025829587274267860 || (otherRec.sym__0__454237065112775549 != sym__0__454237065112775549 || (otherRec.sym__0__608217599158647375 != sym__0__608217599158647375 || (otherRec.sym__0__4347069016709593136 != sym__0__4347069016709593136 || (otherRec.sym__0__4553650632168714688 != sym__0__4553650632168714688 || (otherRec.sym__0__586349573025064242 != sym__0__586349573025064242 || (otherRec.sym__0__144523031940788660 != sym__0__144523031940788660 || (otherRec.sym__0__2942207309637238010 != sym__0__2942207309637238010 || (otherRec.sym__0__1782085603058736686 != sym__0__1782085603058736686 || (otherRec.sym__0__3001704397998344329 != sym__0__3001704397998344329 || (otherRec.sym__0___45_2662583778072919661 != sym__0___45_2662583778072919661 || otherRec.sym__0__8853539013824041307 != sym__0__8853539013824041307)))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_3961143035674407474;
  fluidb_string<18> sym__0___45_6251899802584687138;
  fluidb_string<9> sym__0__7895704682370371792;
  fluidb_string<9> sym__0___45_4486276699369081973;
  unsigned sym__0__1119005997298974989;
  unsigned sym__0__3623076037790620667;
  fluidb_string<7> sym__0___45_369211045765545994;
  unsigned sym__0___45_2252349090140989903;
  unsigned sym__0___45_6519715028980934506;
  unsigned sym__0__6988144115678218478;
  unsigned sym__0__1168585672581702408;
  unsigned sym__0___45_1566345155802505557;
  fluidb_string<15> sym__0___45_3812637469976556790;
  fluidb_string<2> sym__0___45_2398128448016703502;
  fluidb_string<2> sym__0__5574729781191990975;
  fluidb_string<2> sym__0___45_5962954882039921225;
  fluidb_string<2> sym__0___45_7276734914968453131;
  unsigned sym__0__5341165382232817970;
  int sym__0__5806605655987033032;
  unsigned sym__0___45_6623407408063066704;
  unsigned sym__0___45_1670026162273154778;
  unsigned sym__0__2289386367904588797;
  unsigned sym__0__8025829587274267860;
  fluidb_string<21> sym__0__454237065112775549;
  unsigned sym__0__608217599158647375;
  fluidb_string<10> sym__0__4347069016709593136;
  unsigned sym__0__4553650632168714688;
  double sym__0__586349573025064242;
  unsigned sym__0__144523031940788660;
  double sym__0__2942207309637238010;
  unsigned sym__0__1782085603058736686;
  unsigned sym__0__3001704397998344329;
  double sym__0___45_2662583778072919661;
  fluidb_string<13> sym__0__8853539013824041307;
 private:
};


class Record28 {
 public:
  Record28(unsigned __sym__0__59163526776084807, fluidb_string<18> __sym__0___45_1313357857405786385, fluidb_string<40> __sym__0__1337312907475566789, fluidb_string<11> __sym__0__8014013609240026595, fluidb_string<15> __sym__0___45_4888925151068446247, fluidb_string<13> __sym__0__661408193145534136, fluidb_string<15> __sym__0___45_7159405632382799505, fluidb_string<21> __sym__0___45_7793359246716293237) : sym__0__59163526776084807(__sym__0__59163526776084807), sym__0___45_1313357857405786385(__sym__0___45_1313357857405786385), sym__0__1337312907475566789(__sym__0__1337312907475566789), sym__0__8014013609240026595(__sym__0__8014013609240026595), sym__0___45_4888925151068446247(__sym__0___45_4888925151068446247), sym__0__661408193145534136(__sym__0__661408193145534136), sym__0___45_7159405632382799505(__sym__0___45_7159405632382799505), sym__0___45_7793359246716293237(__sym__0___45_7793359246716293237)
  {
  }
  Record28() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__59163526776084807 << " | " << arrToString(sym__0___45_1313357857405786385) << " | " << arrToString(sym__0__1337312907475566789) << " | " << arrToString(sym__0__8014013609240026595) << " | " << arrToString(sym__0___45_4888925151068446247) << " | " << arrToString(sym__0__661408193145534136) << " | " << arrToString(sym__0___45_7159405632382799505) << " | " << arrToString(sym__0___45_7793359246716293237);
    return o.str();
  }
  bool operator <(const Record28& otherRec) const{
    return (otherRec.sym__0__59163526776084807 < sym__0__59163526776084807 && (otherRec.sym__0___45_1313357857405786385 < sym__0___45_1313357857405786385 && (otherRec.sym__0__1337312907475566789 < sym__0__1337312907475566789 && (otherRec.sym__0__8014013609240026595 < sym__0__8014013609240026595 && (otherRec.sym__0___45_4888925151068446247 < sym__0___45_4888925151068446247 && (otherRec.sym__0__661408193145534136 < sym__0__661408193145534136 && (otherRec.sym__0___45_7159405632382799505 < sym__0___45_7159405632382799505 && otherRec.sym__0___45_7793359246716293237 < sym__0___45_7793359246716293237)))))));
  }
  bool operator ==(const Record28& otherRec) const{
    return (otherRec.sym__0__59163526776084807 == sym__0__59163526776084807 && (otherRec.sym__0___45_1313357857405786385 == sym__0___45_1313357857405786385 && (otherRec.sym__0__1337312907475566789 == sym__0__1337312907475566789 && (otherRec.sym__0__8014013609240026595 == sym__0__8014013609240026595 && (otherRec.sym__0___45_4888925151068446247 == sym__0___45_4888925151068446247 && (otherRec.sym__0__661408193145534136 == sym__0__661408193145534136 && (otherRec.sym__0___45_7159405632382799505 == sym__0___45_7159405632382799505 && otherRec.sym__0___45_7793359246716293237 == sym__0___45_7793359246716293237)))))));
  }
  bool operator !=(const Record28& otherRec) const{
    return (otherRec.sym__0__59163526776084807 != sym__0__59163526776084807 || (otherRec.sym__0___45_1313357857405786385 != sym__0___45_1313357857405786385 || (otherRec.sym__0__1337312907475566789 != sym__0__1337312907475566789 || (otherRec.sym__0__8014013609240026595 != sym__0__8014013609240026595 || (otherRec.sym__0___45_4888925151068446247 != sym__0___45_4888925151068446247 || (otherRec.sym__0__661408193145534136 != sym__0__661408193145534136 || (otherRec.sym__0___45_7159405632382799505 != sym__0___45_7159405632382799505 || otherRec.sym__0___45_7793359246716293237 != sym__0___45_7793359246716293237)))))));
  }
  unsigned sym__0__59163526776084807;
  fluidb_string<18> sym__0___45_1313357857405786385;
  fluidb_string<40> sym__0__1337312907475566789;
  fluidb_string<11> sym__0__8014013609240026595;
  fluidb_string<15> sym__0___45_4888925151068446247;
  fluidb_string<13> sym__0__661408193145534136;
  fluidb_string<15> sym__0___45_7159405632382799505;
  fluidb_string<21> sym__0___45_7793359246716293237;
 private:
};


class Record19 {
 public:
  Record19(unsigned __sym__0___45_9117911789383871612, fluidb_string<25> __sym__0___45_1547112764757372609, fluidb_string<40> __sym__0___45_8663957751614366179, fluidb_string<16> __sym__0__1466641425010216931, fluidb_string<16> __sym__0__3672857626658041553, fluidb_string<13> __sym__0___45_3362440237381592032, fluidb_string<15> __sym__0___45_6631364176934158657) : sym__0___45_9117911789383871612(__sym__0___45_9117911789383871612), sym__0___45_1547112764757372609(__sym__0___45_1547112764757372609), sym__0___45_8663957751614366179(__sym__0___45_8663957751614366179), sym__0__1466641425010216931(__sym__0__1466641425010216931), sym__0__3672857626658041553(__sym__0__3672857626658041553), sym__0___45_3362440237381592032(__sym__0___45_3362440237381592032), sym__0___45_6631364176934158657(__sym__0___45_6631364176934158657)
  {
  }
  Record19() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_9117911789383871612 << " | " << arrToString(sym__0___45_1547112764757372609) << " | " << arrToString(sym__0___45_8663957751614366179) << " | " << arrToString(sym__0__1466641425010216931) << " | " << arrToString(sym__0__3672857626658041553) << " | " << arrToString(sym__0___45_3362440237381592032) << " | " << arrToString(sym__0___45_6631364176934158657);
    return o.str();
  }
  bool operator <(const Record19& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 < sym__0___45_9117911789383871612 && (otherRec.sym__0___45_1547112764757372609 < sym__0___45_1547112764757372609 && (otherRec.sym__0___45_8663957751614366179 < sym__0___45_8663957751614366179 && (otherRec.sym__0__1466641425010216931 < sym__0__1466641425010216931 && (otherRec.sym__0__3672857626658041553 < sym__0__3672857626658041553 && (otherRec.sym__0___45_3362440237381592032 < sym__0___45_3362440237381592032 && otherRec.sym__0___45_6631364176934158657 < sym__0___45_6631364176934158657))))));
  }
  bool operator ==(const Record19& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 == sym__0___45_9117911789383871612 && (otherRec.sym__0___45_1547112764757372609 == sym__0___45_1547112764757372609 && (otherRec.sym__0___45_8663957751614366179 == sym__0___45_8663957751614366179 && (otherRec.sym__0__1466641425010216931 == sym__0__1466641425010216931 && (otherRec.sym__0__3672857626658041553 == sym__0__3672857626658041553 && (otherRec.sym__0___45_3362440237381592032 == sym__0___45_3362440237381592032 && otherRec.sym__0___45_6631364176934158657 == sym__0___45_6631364176934158657))))));
  }
  bool operator !=(const Record19& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 != sym__0___45_9117911789383871612 || (otherRec.sym__0___45_1547112764757372609 != sym__0___45_1547112764757372609 || (otherRec.sym__0___45_8663957751614366179 != sym__0___45_8663957751614366179 || (otherRec.sym__0__1466641425010216931 != sym__0__1466641425010216931 || (otherRec.sym__0__3672857626658041553 != sym__0__3672857626658041553 || (otherRec.sym__0___45_3362440237381592032 != sym__0___45_3362440237381592032 || otherRec.sym__0___45_6631364176934158657 != sym__0___45_6631364176934158657))))));
  }
  unsigned sym__0___45_9117911789383871612;
  fluidb_string<25> sym__0___45_1547112764757372609;
  fluidb_string<40> sym__0___45_8663957751614366179;
  fluidb_string<16> sym__0__1466641425010216931;
  fluidb_string<16> sym__0__3672857626658041553;
  fluidb_string<13> sym__0___45_3362440237381592032;
  fluidb_string<15> sym__0___45_6631364176934158657;
 private:
};


class CallableClass38 {
 public:
  Record37 operator()(const Record29& record35, const Record4& record36) {
    return Record37(record35.sym__0__6600743152885821739, record35.sym__0__8327451819077700100, record35.sym__0__6397198241134363110, record35.sym__0___45_5337640715365439464, record35.sym__0__6843344685518481994, record35.sym__0___45_281035451017513097, record35.sym__0__978963012373614724, record35.sym__0___45_138255197005962184, record35.sym__0__8723886903896913538, record35.sym__0___45_6396778144419774102, record35.sym__0__4345290193888622188, record35.sym__0__4748858544164465891, record35.sym__0___45_2013870166617871634, record35.sym__0__4486213189679553123, record35.sym__0__2044116807841453321, record35.sym__0__5619260977463858154, record35.sym__0___45_8920615137005718662, record35.sym__0__2992813735709491256, record35.sym__0___45_4738111187081458162, record35.sym__0__7342994916058425376, record35.sym__0___45_102160816985196364, record35.sym__0__1283865848515870159, record35.sym__0___45_6653948180198187699, record35.sym__0__1838544743518506357, record35.sym__0__7577655604576576020, record35.sym__0___45_2957579613704386588, record35.sym__0__3873855183530032714, record35.sym__0___45_5414786619423294939, record35.sym__0__5557137180551786739, record35.sym__0___45_6042740597378878507, record35.sym__0___45_5833642980832303428, record35.sym__0___45_5108599129385010601, record35.sym__0__6596363747273139740, record35.sym__0___45_3780820615727466252, record35.sym__0___45_5733022218377332670, record35.sym__0___45_1101619184546797307, record35.sym__0__5315661629871309616, record35.sym__0__1548970624774688888, record35.sym__0__3082040486510970809, record35.sym__0___45_3773548088295367727, record35.sym__0__2425475927764529115, record35.sym__0__3550854697533762172, record35.sym__0___45_2428002636247423964, record35.sym__0__2537603616087343230, record35.sym__0___45_5133924085204218680, record35.sym__0__1411885469038113506, record35.sym__0___45_4336521243533294241, record35.sym__0___45_2416233287424533084, record35.sym__0___45_8608893297661193168, record36.sym__0__7178003535380331304, record36.sym__0___45_7020257275696364520, record36.sym__0___45_6307179734719967033, record36.sym__0__4568304886257136061, record36.sym__0___45_6291097039630000265, record36.sym__0__551327770031967739, record36.sym__0__3827696365022297353, record36.sym__0___45_1779543743759935870, record36.sym__0__3752090135924368535);
  }
  typedef Record37 Codomain;
  typedef Record29 Domain0;
  typedef Record4 Domain1;
 private:
};


class CallableClass44 {
 public:
  bool operator()(const Record37& record43) {
    return ((like(record43.sym__0___45_7823645749172626442, "AMERICA") && like(record43.sym__0___45_5867946786197862882, "AMERICA")) && (like(record43.sym__0___45_9042078870426525352, "MFGR#1") || like(record43.sym__0___45_9042078870426525352, "MFGR#2")));
  }
  typedef bool Codomain;
  typedef Record37 Domain0;
 private:
};


class CallableClass40 {
 public:
  Record12 operator()(const Record29& record39) {
    return Record12(record39.sym__0__4345290193888622188);
  }
  typedef Record12 Codomain;
  typedef Record29 Domain0;
 private:
};


class CallableClass30 {
 public:
  Record29 operator()(const Record20& record26, const Record28& record27) {
    return Record29(record26.sym__0__2102316481828394123, record26.sym__0__1780257040091145452, record26.sym__0__3109939911660640430, record26.sym__0___45_2175199227983174320, record26.sym__0__2274992661292194562, record26.sym__0___45_52536403880094569, record26.sym__0__8474116574285927276, record26.sym__0__1835503384076924528, record26.sym__0__586412267723269786, record26.sym__0__1353367320182642978, record26.sym__0___45_6351222752813626636, record26.sym__0___45_805067702695824989, record26.sym__0__914509637812701046, record26.sym__0__7895450651221174051, record26.sym__0__5942285589324576545, record26.sym__0__3979382234526804898, record26.sym__0___45_6103522369909819246, record26.sym__0__1873148039180761712, record26.sym__0__1430551526674366102, record26.sym__0__1048818672001592248, record26.sym__0__5723353836447658492, record26.sym__0___45_2233273278156881105, record26.sym__0___45_1120880788595637835, record26.sym__0___45_6361490230660137987, record26.sym__0___45_7131249874638266788, record26.sym__0__7265729621635359692, record26.sym__0___45_2986035740159621374, record26.sym__0__5081664509798388941, record26.sym__0___45_8518596434939314413, record26.sym__0__1988221653138390749, record26.sym__0___45_8801377200944175068, record26.sym__0___45_4634183629139578121, record26.sym__0__806472603637564420, record26.sym__0__1725829484083430844, record26.sym__0___45_5279274827282678566, record26.sym__0___45_9129247388617675603, record26.sym__0__1232225844204183080, record26.sym__0__9184663680502119984, record26.sym__0___45_9023997483659527503, record26.sym__0___45_1026604631201554135, record26.sym__0___45_7189754320372197989, record27.sym__0__59163526776084807, record27.sym__0___45_1313357857405786385, record27.sym__0__1337312907475566789, record27.sym__0__8014013609240026595, record27.sym__0___45_4888925151068446247, record27.sym__0__661408193145534136, record27.sym__0___45_7159405632382799505, record27.sym__0___45_7793359246716293237);
  }
  typedef Record29 Codomain;
  typedef Record20 Domain0;
  typedef Record28 Domain1;
 private:
};


class CallableClass51 {
 public:
  Record46 operator()(const Record48& record45) {
    return Record46(vAggrFirst47(record45.sym__0___45_5677596107407519400), vAggrFirst49(record45.sym__0___45_2044948362686327715), vAggrSum50((record45.sym__0__9142595129731966875 - record45.sym__0__2065559644984295980)));
  }
  typedef Record46 Codomain;
  typedef Record48 Domain0;
 private:
  AggrFirst<unsigned> vAggrFirst47;
  AggrFirst<fluidb_string<15>> vAggrFirst49;
  AggrSum<unsigned> vAggrSum50;
};


class CallableClass25 {
 public:
  Record12 operator()(const Record19& record24) {
    return Record12(record24.sym__0___45_9117911789383871612);
  }
  typedef Record12 Codomain;
  typedef Record19 Domain0;
 private:
};


class CallableClass3 {
 public:
  Record1 operator()(const Record2& record0) {
    return Record1(record0.sym__0__3749202613835539516, record0.sym__0__3853910811136206439, record0.sym__0___45_4812439514081860187, record0.sym__0__8141341990593755227, record0.sym__0___45_1677497998823335159, record0.sym__0__7067889907208718136, record0.sym__0__2063264474794950631, record0.sym__0___45_2406203400319404933, record0.sym__0__9081834897704197137, record0.sym__0___45_8323320223000960471, record0.sym__0___45_8331347243081162497, record0.sym__0___45_2390083838583420092, record0.sym__0__2912236000029059069, record0.sym__0__3653370686033553860, record0.sym__0__5936012595412334150, record0.sym__0___45_1816837998167001175, record0.sym__0__7545091206599238681, record0.sym__0___45_1424559208137584517, record0.sym__0__6395144509512964253, record0.sym__0__9182535146594246451, record0.sym__0__280815916194286583, record0.sym__0__2540705042138486592, record0.sym__0__8281520224814360410, record0.sym__0__3059107448055216658, record0.sym__0__5947624015539765847, record0.sym__0___45_9066590480537882041, record0.sym__0___45_5447174107187519735, record0.sym__0___45_3420603495949690014, record0.sym__0___45_9004707282254064716, record0.sym__0___45_4063231403699784718, record0.sym__0___45_1843583846408941393, record0.sym__0__3878271002552174104, record0.sym__0__6118668371652612367, record0.sym__0___45_2229254424656099401, record0.sym__0___45_7776418238460988847, record0.sym__0__4886447806562354754, record0.sym__0___45_4567805851496469981, record0.sym__0___45_7971780566155543493, record0.sym__0__1382282970499677142, record0.sym__0__5011297957218063582, record0.sym__0___45_3550325263493409460);
  }
  typedef Record1 Codomain;
  typedef Record2 Domain0;
 private:
};


class CallableClass23 {
 public:
  Record12 operator()(const Record10& record22) {
    return Record12(record22.sym__0__2289386367904588797);
  }
  typedef Record12 Codomain;
  typedef Record10 Domain0;
 private:
};


class CallableClass53 {
 public:
  Record52 operator()(const Record48& record45) {
    return Record52(record45.sym__0___45_5677596107407519400, record45.sym__0___45_2044948362686327715);
  }
  typedef Record52 Codomain;
  typedef Record48 Domain0;
 private:
};


class CallableClass16 {
 public:
  Record12 operator()(const Record9& record15) {
    return Record12(record15.sym__0___45_7332894783442362324);
  }
  typedef Record12 Codomain;
  typedef Record9 Domain0;
 private:
};


class CallableClass34 {
 public:
  Record12 operator()(const Record28& record33) {
    return Record12(record33.sym__0__59163526776084807);
  }
  typedef Record12 Codomain;
  typedef Record28 Domain0;
 private:
};


class CallableClass21 {
 public:
  Record20 operator()(const Record10& record17, const Record19& record18) {
    return Record20(record18.sym__0___45_9117911789383871612, record18.sym__0___45_1547112764757372609, record18.sym__0___45_8663957751614366179, record18.sym__0__1466641425010216931, record18.sym__0__3672857626658041553, record18.sym__0___45_3362440237381592032, record18.sym__0___45_6631364176934158657, record17.sym__0__5341165382232817970, record17.sym__0__5806605655987033032, record17.sym__0___45_6623407408063066704, record17.sym__0___45_1670026162273154778, record17.sym__0__2289386367904588797, record17.sym__0__8025829587274267860, record17.sym__0__454237065112775549, record17.sym__0__608217599158647375, record17.sym__0__4347069016709593136, record17.sym__0__4553650632168714688, record17.sym__0__586349573025064242, record17.sym__0__144523031940788660, record17.sym__0__2942207309637238010, record17.sym__0__1782085603058736686, record17.sym__0__3001704397998344329, record17.sym__0___45_2662583778072919661, record17.sym__0__8853539013824041307, record17.sym__0___45_3961143035674407474, record17.sym__0___45_6251899802584687138, record17.sym__0__7895704682370371792, record17.sym__0___45_4486276699369081973, record17.sym__0__1119005997298974989, record17.sym__0__3623076037790620667, record17.sym__0___45_369211045765545994, record17.sym__0___45_2252349090140989903, record17.sym__0___45_6519715028980934506, record17.sym__0__6988144115678218478, record17.sym__0__1168585672581702408, record17.sym__0___45_1566345155802505557, record17.sym__0___45_3812637469976556790, record17.sym__0___45_2398128448016703502, record17.sym__0__5574729781191990975, record17.sym__0___45_5962954882039921225, record17.sym__0___45_7276734914968453131);
  }
  typedef Record20 Codomain;
  typedef Record10 Domain0;
  typedef Record19 Domain1;
 private:
};


class CallableClass42 {
 public:
  Record12 operator()(const Record4& record41) {
    return Record12(record41.sym__0__7178003535380331304);
  }
  typedef Record12 Codomain;
  typedef Record4 Domain0;
 private:
};


class CallableClass14 {
 public:
  Record12 operator()(const Record8& record13) {
    return Record12(record13.sym__0__2037864888707786451);
  }
  typedef Record12 Codomain;
  typedef Record8 Domain0;
 private:
};


class CallableClass55 {
 public:
  Record52 operator()(const Record46& record54) {
    return Record52(record54.sym__0___45_532509241117904863, record54.sym__0__6879476602096058762);
  }
  typedef Record52 Codomain;
  typedef Record46 Domain0;
 private:
};


class CallableClass5 {
 public:
  Record4 operator()(const Record2& record0) {
    return Record4(record0.sym__0__6529948146205169113, record0.sym__0__6661097005291578729, record0.sym__0___45_7469900952409713322, record0.sym__0___45_8598458868422699732, record0.sym__0___45_6414117357071051226, record0.sym__0__4421059099170388330, record0.sym__0___45_108714048876090312, record0.sym__0__5441078539661244851, record0.sym__0___45_8326498932109471738);
  }
  typedef Record4 Codomain;
  typedef Record2 Domain0;
 private:
};


class CallableClass11 {
 public:
  Record10 operator()(const Record8& record6, const Record9& record7) {
    return Record10(record6.sym__0__2037864888707786451, record6.sym__0__8533656712666151747, record6.sym__0__646314041574508429, record6.sym__0__6064137978327902054, record6.sym__0__3754157776500852496, record6.sym__0__6284345160241949046, record6.sym__0___45_773692805971570325, record6.sym__0___45_8399474032083007524, record6.sym__0___45_2038947427357444789, record6.sym__0__6071994954612827827, record6.sym__0__7742515703067448213, record6.sym__0__5201219213304227654, record6.sym__0___45_5896625796158057241, record6.sym__0___45_1108504872221226081, record6.sym__0__1055103969674359346, record6.sym__0__9115626546918942554, record6.sym__0___45_6850413444013389848, record7.sym__0___45_7574074018531922998, record7.sym__0__1125464382786937920, record7.sym__0___45_8257174981563598792, record7.sym__0__957746932829998382, record7.sym__0__934137931677987637, record7.sym__0___45_7332894783442362324, record7.sym__0__8974811218372806325, record7.sym__0___45_5217562530132451785, record7.sym__0__7851147553396318904, record7.sym__0___45_4975505511391694456, record7.sym__0___45_7249986409969561654, record7.sym__0__4671626969570181580, record7.sym__0___45_3666121704283105054, record7.sym__0__5495011930072844518, record7.sym__0___45_4423447118092167055, record7.sym__0___45_1608082021099887893, record7.sym__0__1584187396639360899);
  }
  typedef Record10 Codomain;
  typedef Record8 Domain0;
  typedef Record9 Domain1;
 private:
};


class CallableClass32 {
 public:
  Record12 operator()(const Record20& record31) {
    return Record12(record31.sym__0__1353367320182642978);
  }
  typedef Record12 Codomain;
  typedef Record20 Domain0;
 private:
};






int main() {
  // ReverseTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_partkey"))) 
  //               (R0 (E0 (ESym "p_partkey")))))
  std::cout << "ReverseTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_partkey\"))) \n              (R0 (E0 (ESym \"p_partkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkUnJoin<CallableClass3, CallableClass5>(Just("/tmp/fluidb_store/data137.dat"), Nothing(), Just("/tmp/fluidb_store/data138.dat"), Nothing(), Just("/tmp/fluidb_store/data2.dat"));
    operation.run();
    operation.print_output(10);
  }
  // Delete: (Q1 
  //   (QSort [E0 (ESym "d_year"),E1 ENeg (E0 (ESym "revenue"))]) 
  //   (Q1 
  //     (QGroup 
  //       [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //        (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //        (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //        (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //       [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P2 
  //             POr 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI1"))))) 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI5")))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "d_yearmonth"))) 
  //                 (R0 (E0 (EString "Dec1997")))))) 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5"))))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_custkey"))) 
  //                 (R0 (E0 (ESym "c_custkey"))))) 
  //           (Q0 (TSymbol "customer")) 
  //           (J 
  //             (P0 
  //               (R2 REq 
  //                   (R0 (E0 (ESym "lo_orderdate"))) 
  //                   (R0 (E0 (ESym "d_datekey"))))) 
  //             (Q0 (TSymbol "date")) 
  //             (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QSort [E0 (ESym \"d_year\"),E1 ENeg (E0 (ESym \"revenue\"))]) \n  (Q1 \n    (QGroup \n      [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n       (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n       (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n       (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n      [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]) \n    (S \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P2 \n            POr \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI1\"))))) \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI5\")))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"d_yearmonth\"))) \n                (R0 (E0 (EString \"Dec1997\")))))) \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\"))))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_custkey\"))) \n                (R0 (E0 (ESym \"c_custkey\"))))) \n          (Q0 (TSymbol \"customer\")) \n          (J \n            (P0 \n              (R2 REq \n                  (R0 (E0 (ESym \"lo_orderdate\"))) \n                  (R0 (E0 (ESym \"d_datekey\"))))) \n            (Q0 (TSymbol \"date\")) \n            (Q0 (TSymbol \"lineorder\")))) \n        (Q0 (TSymbol \"supplier\"))))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data267.dat");
  // Delete: (Q1 
  //   (QGroup 
  //     [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //      (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //      (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //      (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //     [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]) 
  //   (S 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5")))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997")))))) 
  //       (P2 
  //         POr 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_city"))) 
  //               (R0 (E0 (EString "UNITED KI1"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_city"))) 
  //               (R0 (E0 (EString "UNITED KI5"))))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_suppkey"))) 
  //             (R0 (E0 (ESym "s_suppkey"))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QGroup \n    [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n     (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n     (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n     (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n    [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]) \n  (S \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\")))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\")))))) \n      (P2 \n        POr \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_city\"))) \n              (R0 (E0 (EString \"UNITED KI1\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_city\"))) \n              (R0 (E0 (EString \"UNITED KI5\"))))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_suppkey\"))) \n            (R0 (E0 (ESym \"s_suppkey\"))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))) \n      (Q0 (TSymbol \"supplier\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data266.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data253.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data255.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5"))))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder"))))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (S \n      (P2 \n        PAnd \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\"))))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\"))))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data258.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq (R0 (E0 (ESym "lo_suppkey"))) (R0 (E0 (ESym "s_suppkey"))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "d_yearmonth"))) 
  //               (R0 (E0 (EString "Dec1997"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq (R0 (E0 (ESym \"lo_suppkey\"))) (R0 (E0 (ESym \"s_suppkey\"))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"d_yearmonth\"))) \n              (R0 (E0 (EString \"Dec1997\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data254.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_orderdate"))) 
  //               (R0 (E0 (ESym "d_datekey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_orderdate\"))) \n              (R0 (E0 (ESym \"d_datekey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass14, CallableClass16, CallableClass11>(Just<const std::string>("/tmp/fluidb_store/data149.dat"), Just<const std::string>("/tmp/fluidb_store/data148.dat"), Just<const std::string>("/tmp/fluidb_store/data150.dat"), "/tmp/fluidb_store/data1.dat", "/tmp/fluidb_store/data0.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P0 
  //       (R2 RLike 
  //           (R0 (E0 (ESym "d_yearmonth"))) 
  //           (R0 (E0 (EString "Dec1997"))))) 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_orderdate"))) 
  //             (R0 (E0 (ESym "d_datekey"))))) 
  //       (Q0 (TSymbol "date")) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P0 \n      (R2 RLike \n          (R0 (E0 (ESym \"d_yearmonth\"))) \n          (R0 (E0 (EString \"Dec1997\"))))) \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_orderdate\"))) \n            (R0 (E0 (ESym \"d_datekey\"))))) \n      (Q0 (TSymbol \"date\")) \n      (Q0 (TSymbol \"lineorder\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data237.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       PAnd 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "d_yearmonth"))) 
  //             (R0 (E0 (EString "Dec1997"))))) 
  //       (P2 
  //         POr 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_city"))) 
  //               (R0 (E0 (EString "UNITED KI1"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_city"))) 
  //               (R0 (E0 (EString "UNITED KI5")))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_orderdate"))) 
  //             (R0 (E0 (ESym "d_datekey"))))) 
  //       (Q0 (TSymbol "date")) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      PAnd \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"d_yearmonth\"))) \n            (R0 (E0 (EString \"Dec1997\"))))) \n      (P2 \n        POr \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_city\"))) \n              (R0 (E0 (EString \"UNITED KI1\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_city\"))) \n              (R0 (E0 (EString \"UNITED KI5\")))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_orderdate\"))) \n            (R0 (E0 (ESym \"d_datekey\"))))) \n      (Q0 (TSymbol \"date\")) \n      (Q0 (TSymbol \"lineorder\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data238.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass23, CallableClass25, CallableClass21>(Just<const std::string>("/tmp/fluidb_store/data41.dat"), Just<const std::string>("/tmp/fluidb_store/data268.dat"), Just<const std::string>("/tmp/fluidb_store/data269.dat"), "/tmp/fluidb_store/data149.dat", "/tmp/fluidb_store/data3.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (J 
  //   (P0 
  //     (R2 REq (R0 (E0 (ESym "lo_suppkey"))) (R0 (E0 (ESym "s_suppkey"))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq (R0 (E0 (ESym \"lo_suppkey\"))) (R0 (E0 (ESym \"s_suppkey\"))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data226.dat");
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         POr 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_city"))) 
  //               (R0 (E0 (EString "UNITED KI1"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_city"))) 
  //               (R0 (E0 (EString "UNITED KI5")))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "d_yearmonth"))) 
  //             (R0 (E0 (EString "Dec1997")))))) 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_orderdate"))) 
  //               (R0 (E0 (ESym "d_datekey"))))) 
  //         (Q0 (TSymbol "date")) 
  //         (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P2 \n      PAnd \n      (P2 \n        POr \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_city\"))) \n              (R0 (E0 (EString \"UNITED KI1\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_city\"))) \n              (R0 (E0 (EString \"UNITED KI5\")))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"d_yearmonth\"))) \n            (R0 (E0 (EString \"Dec1997\")))))) \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_orderdate\"))) \n              (R0 (E0 (ESym \"d_datekey\"))))) \n        (Q0 (TSymbol \"date\")) \n        (Q0 (TSymbol \"lineorder\")))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data235.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass32, CallableClass34, CallableClass30>(Just<const std::string>("/tmp/fluidb_store/data159.dat"), Just<const std::string>("/tmp/fluidb_store/data272.dat"), Just<const std::string>("/tmp/fluidb_store/data273.dat"), "/tmp/fluidb_store/data41.dat", "/tmp/fluidb-data/customer.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey")))))) 
  //   (Q0 (TSymbol "date")) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\")))))) \n  (Q0 (TSymbol \"date\")) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data148.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey")))))) 
  //   (Q0 (TSymbol "date")) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\")))))) \n  (Q0 (TSymbol \"date\")) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data150.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_orderdate"))) 
  //           (R0 (E0 (ESym "d_datekey"))))) 
  //     (Q0 (TSymbol "date")) 
  //     (Q0 (TSymbol "lineorder"))) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_orderdate\"))) \n          (R0 (E0 (ESym \"d_datekey\"))))) \n    (Q0 (TSymbol \"date\")) \n    (Q0 (TSymbol \"lineorder\"))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data268.dat");
  std::cout << "Delete: (Q0 (TSymbol \"supplier\"))" << std::endl;
  deleteFile("/tmp/fluidb_store/data3.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq 
  //         (R0 (E0 (ESym "lo_orderdate"))) 
  //         (R0 (E0 (ESym "d_datekey"))))) 
  //   (Q0 (TSymbol "date")) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq \n        (R0 (E0 (ESym \"lo_orderdate\"))) \n        (R0 (E0 (ESym \"d_datekey\"))))) \n  (Q0 (TSymbol \"date\")) \n  (Q0 (TSymbol \"lineorder\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data149.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_partkey"))) 
  //               (R0 (E0 (ESym "p_partkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_partkey\"))) \n              (R0 (E0 (ESym \"p_partkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass40, CallableClass42, CallableClass38>(Just<const std::string>("/tmp/fluidb_store/data286.dat"), Just<const std::string>("/tmp/fluidb_store/data285.dat"), Just<const std::string>("/tmp/fluidb_store/data287.dat"), "/tmp/fluidb_store/data159.dat", "/tmp/fluidb_store/data2.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P2 
  //           PAnd 
  //           (P2 
  //             PAnd 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_region"))) 
  //                   (R0 (E0 (EString "AMERICA"))))) 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "s_region"))) 
  //                   (R0 (E0 (EString "AMERICA")))))) 
  //           (P2 
  //             POr 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "p_mfgr"))) 
  //                   (R0 (E0 (EString "MFGR#1"))))) 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "p_mfgr"))) 
  //                   (R0 (E0 (EString "MFGR#2")))))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P2 \n          PAnd \n          (P2 \n            PAnd \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_region\"))) \n                  (R0 (E0 (EString \"AMERICA\"))))) \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"s_region\"))) \n                  (R0 (E0 (EString \"AMERICA\")))))) \n          (P2 \n            POr \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"p_mfgr\"))) \n                  (R0 (E0 (EString \"MFGR#1\"))))) \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"p_mfgr\"))) \n                  (R0 (E0 (EString \"MFGR#2\")))))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass44>(Just<const std::string>("/tmp/fluidb_store/data290.dat"), Just<const std::string>("/tmp/fluidb_store/data291.dat"), "/tmp/fluidb_store/data286.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QGroup 
  //         [
  //          (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //          (ESym "c_nation",E0 (NAggr AggrFirst (E0 (ESym "c_nation")))),
  //          (
  //            ESym "profit",
  //            E0 
  //               (NAggr 
  //                 AggrSum 
  //                 (E2 ESub 
  //                     (E0 (ESym "lo_revenue")) 
  //                     (E0 (ESym "lo_supplycost"))))
  //           )
  //         ] 
  //         [E0 (ESym "d_year"),E0 (ESym "c_nation")]
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QGroup \n        [\n         (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n         (ESym \"c_nation\",E0 (NAggr AggrFirst (E0 (ESym \"c_nation\")))),\n         (\n           ESym \"profit\",\n           E0 \n              (NAggr \n                AggrSum \n                (E2 ESub \n                    (E0 (ESym \"lo_revenue\")) \n                    (E0 (ESym \"lo_supplycost\"))))\n          )\n        ] \n        [E0 (ESym \"d_year\"),E0 (ESym \"c_nation\")]\n    ]))" << std::endl;
  {
    auto operation = mkAggregation<CallableClass51, CallableClass53>(Just<const std::string>("/tmp/fluidb_store/data321.dat"), Just<const std::string>("/tmp/fluidb_store/data290.dat"), "/tmp/fluidb_store/data290.dat");
    operation.run();
    operation.print_output(10);
  }
  std::cout << "ForwardTrigger: (Just (Right [QSort [E0 (ESym \"d_year\"),E0 (ESym \"c_nation\")]]))" << std::endl;
  {
    auto operation = mkSort<CallableClass55>(Just<const std::string>("/tmp/fluidb_store/data322.dat"), Just<const std::string>("/tmp/fluidb_store/data321.dat"), "/tmp/fluidb_store/data321.dat");
    operation.run();
    operation.print_output(10);
  }
  report_counters();
  return 0;
}
