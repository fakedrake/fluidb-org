#include <array>

#include <string>

#include <codegen.hh>
class Record1 {
 public:
  Record1(unsigned __sym__0___45_532509241117904863, fluidb_string<15> __sym__0__6879476602096058762, unsigned __sym__0__6336215024333455337) : sym__0___45_532509241117904863(__sym__0___45_532509241117904863), sym__0__6879476602096058762(__sym__0__6879476602096058762), sym__0__6336215024333455337(__sym__0__6336215024333455337)
  {
  }
  Record1() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_532509241117904863 << " | " << arrToString(sym__0__6879476602096058762) << " | " << sym__0__6336215024333455337;
    return o.str();
  }
  bool operator <(const Record1& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 < sym__0___45_532509241117904863 && (otherRec.sym__0__6879476602096058762 < sym__0__6879476602096058762 && otherRec.sym__0__6336215024333455337 < sym__0__6336215024333455337));
  }
  bool operator ==(const Record1& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 == sym__0___45_532509241117904863 && (otherRec.sym__0__6879476602096058762 == sym__0__6879476602096058762 && otherRec.sym__0__6336215024333455337 == sym__0__6336215024333455337));
  }
  bool operator !=(const Record1& otherRec) const{
    return (otherRec.sym__0___45_532509241117904863 != sym__0___45_532509241117904863 || (otherRec.sym__0__6879476602096058762 != sym__0__6879476602096058762 || otherRec.sym__0__6336215024333455337 != sym__0__6336215024333455337));
  }
  unsigned sym__0___45_532509241117904863;
  fluidb_string<15> sym__0__6879476602096058762;
  unsigned sym__0__6336215024333455337;
 private:
};


class Record3 {
 public:
  Record3(unsigned __sym__0__751349491586783291, fluidb_string<18> __sym__0__354510891937955499, fluidb_string<9> __sym__0__8685870419913255269, fluidb_string<9> __sym__0___45_1685896364158718066, unsigned __sym__0___45_5677596107407519400, unsigned __sym__0__861815074445021598, fluidb_string<7> __sym__0___45_3872891870093673981, unsigned __sym__0___45_6241898377327069772, unsigned __sym__0__642504737957706403, unsigned __sym__0___45_1374976708771691557, unsigned __sym__0__2339057656064903933, unsigned __sym__0__89048769271346350, fluidb_string<15> __sym__0__6426708041019551759, fluidb_string<2> __sym__0__7008835179244010327, fluidb_string<2> __sym__0___45_4323628884972846406, fluidb_string<2> __sym__0__7828159490610995250, fluidb_string<2> __sym__0__2257718864796675488, unsigned __sym__0__730109080165272259, fluidb_string<18> __sym__0___45_8476449300885475093, fluidb_string<40> __sym__0___45_991149214691090239, fluidb_string<11> __sym__0___45_2212122284055066105, fluidb_string<15> __sym__0___45_2044948362686327715, fluidb_string<13> __sym__0__3321043677072918300, fluidb_string<15> __sym__0___45_226399795464070293, fluidb_string<21> __sym__0__7848733459393176335, unsigned __sym__0___45_4488020782418924777, int __sym__0___45_6919306960004101059, unsigned __sym__0__6018430784935315013, unsigned __sym__0___45_140673424384154541, unsigned __sym__0___45_6038639548629345048, unsigned __sym__0__1559790869847058897, fluidb_string<21> __sym__0___45_4352805721407037080, unsigned __sym__0__4062351712071543146, fluidb_string<10> __sym__0___45_6018880488104713787, unsigned __sym__0___45_6835853099986992139, double __sym__0___45_8089668391442329833, unsigned __sym__0___45_8717135147929398223, double __sym__0___45_7475819144393673057, unsigned __sym__0__9142595129731966875, unsigned __sym__0__2065559644984295980, double __sym__0__2460723449183532278, fluidb_string<13> __sym__0__470592171585028734, unsigned __sym__0__4356580487975201936, fluidb_string<25> __sym__0___45_9184441323043515765, fluidb_string<40> __sym__0__6618707433631942345, fluidb_string<16> __sym__0___45_6275907539891917001, fluidb_string<16> __sym__0___45_2055641227140571803, fluidb_string<13> __sym__0__2004584544714042516, fluidb_string<15> __sym__0__4525776177764059147, unsigned __sym__0__8256595161360863541, fluidb_string<55> __sym__0__2419198459165298437, fluidb_string<25> __sym__0___45_5966236615078693830, fluidb_string<7> __sym__0___45_1194673352705657408, fluidb_string<10> __sym__0__1650700319641029258, fluidb_string<11> __sym__0___45_5413060736990914554, fluidb_string<25> __sym__0__5395318601550732180, unsigned __sym__0___45_4041750310509064417, fluidb_string<10> __sym__0___45_6998494795726951254) : sym__0__751349491586783291(__sym__0__751349491586783291), sym__0__354510891937955499(__sym__0__354510891937955499), sym__0__8685870419913255269(__sym__0__8685870419913255269), sym__0___45_1685896364158718066(__sym__0___45_1685896364158718066), sym__0___45_5677596107407519400(__sym__0___45_5677596107407519400), sym__0__861815074445021598(__sym__0__861815074445021598), sym__0___45_3872891870093673981(__sym__0___45_3872891870093673981), sym__0___45_6241898377327069772(__sym__0___45_6241898377327069772), sym__0__642504737957706403(__sym__0__642504737957706403), sym__0___45_1374976708771691557(__sym__0___45_1374976708771691557), sym__0__2339057656064903933(__sym__0__2339057656064903933), sym__0__89048769271346350(__sym__0__89048769271346350), sym__0__6426708041019551759(__sym__0__6426708041019551759), sym__0__7008835179244010327(__sym__0__7008835179244010327), sym__0___45_4323628884972846406(__sym__0___45_4323628884972846406), sym__0__7828159490610995250(__sym__0__7828159490610995250), sym__0__2257718864796675488(__sym__0__2257718864796675488), sym__0__730109080165272259(__sym__0__730109080165272259), sym__0___45_8476449300885475093(__sym__0___45_8476449300885475093), sym__0___45_991149214691090239(__sym__0___45_991149214691090239), sym__0___45_2212122284055066105(__sym__0___45_2212122284055066105), sym__0___45_2044948362686327715(__sym__0___45_2044948362686327715), sym__0__3321043677072918300(__sym__0__3321043677072918300), sym__0___45_226399795464070293(__sym__0___45_226399795464070293), sym__0__7848733459393176335(__sym__0__7848733459393176335), sym__0___45_4488020782418924777(__sym__0___45_4488020782418924777), sym__0___45_6919306960004101059(__sym__0___45_6919306960004101059), sym__0__6018430784935315013(__sym__0__6018430784935315013), sym__0___45_140673424384154541(__sym__0___45_140673424384154541), sym__0___45_6038639548629345048(__sym__0___45_6038639548629345048), sym__0__1559790869847058897(__sym__0__1559790869847058897), sym__0___45_4352805721407037080(__sym__0___45_4352805721407037080), sym__0__4062351712071543146(__sym__0__4062351712071543146), sym__0___45_6018880488104713787(__sym__0___45_6018880488104713787), sym__0___45_6835853099986992139(__sym__0___45_6835853099986992139), sym__0___45_8089668391442329833(__sym__0___45_8089668391442329833), sym__0___45_8717135147929398223(__sym__0___45_8717135147929398223), sym__0___45_7475819144393673057(__sym__0___45_7475819144393673057), sym__0__9142595129731966875(__sym__0__9142595129731966875), sym__0__2065559644984295980(__sym__0__2065559644984295980), sym__0__2460723449183532278(__sym__0__2460723449183532278), sym__0__470592171585028734(__sym__0__470592171585028734), sym__0__4356580487975201936(__sym__0__4356580487975201936), sym__0___45_9184441323043515765(__sym__0___45_9184441323043515765), sym__0__6618707433631942345(__sym__0__6618707433631942345), sym__0___45_6275907539891917001(__sym__0___45_6275907539891917001), sym__0___45_2055641227140571803(__sym__0___45_2055641227140571803), sym__0__2004584544714042516(__sym__0__2004584544714042516), sym__0__4525776177764059147(__sym__0__4525776177764059147), sym__0__8256595161360863541(__sym__0__8256595161360863541), sym__0__2419198459165298437(__sym__0__2419198459165298437), sym__0___45_5966236615078693830(__sym__0___45_5966236615078693830), sym__0___45_1194673352705657408(__sym__0___45_1194673352705657408), sym__0__1650700319641029258(__sym__0__1650700319641029258), sym__0___45_5413060736990914554(__sym__0___45_5413060736990914554), sym__0__5395318601550732180(__sym__0__5395318601550732180), sym__0___45_4041750310509064417(__sym__0___45_4041750310509064417), sym__0___45_6998494795726951254(__sym__0___45_6998494795726951254)
  {
  }
  Record3() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__751349491586783291 << " | " << arrToString(sym__0__354510891937955499) << " | " << arrToString(sym__0__8685870419913255269) << " | " << arrToString(sym__0___45_1685896364158718066) << " | " << sym__0___45_5677596107407519400 << " | " << sym__0__861815074445021598 << " | " << arrToString(sym__0___45_3872891870093673981) << " | " << sym__0___45_6241898377327069772 << " | " << sym__0__642504737957706403 << " | " << sym__0___45_1374976708771691557 << " | " << sym__0__2339057656064903933 << " | " << sym__0__89048769271346350 << " | " << arrToString(sym__0__6426708041019551759) << " | " << arrToString(sym__0__7008835179244010327) << " | " << arrToString(sym__0___45_4323628884972846406) << " | " << arrToString(sym__0__7828159490610995250) << " | " << arrToString(sym__0__2257718864796675488) << " | " << sym__0__730109080165272259 << " | " << arrToString(sym__0___45_8476449300885475093) << " | " << arrToString(sym__0___45_991149214691090239) << " | " << arrToString(sym__0___45_2212122284055066105) << " | " << arrToString(sym__0___45_2044948362686327715) << " | " << arrToString(sym__0__3321043677072918300) << " | " << arrToString(sym__0___45_226399795464070293) << " | " << arrToString(sym__0__7848733459393176335) << " | " << sym__0___45_4488020782418924777 << " | " << sym__0___45_6919306960004101059 << " | " << sym__0__6018430784935315013 << " | " << sym__0___45_140673424384154541 << " | " << sym__0___45_6038639548629345048 << " | " << sym__0__1559790869847058897 << " | " << arrToString(sym__0___45_4352805721407037080) << " | " << sym__0__4062351712071543146 << " | " << arrToString(sym__0___45_6018880488104713787) << " | " << sym__0___45_6835853099986992139 << " | " << sym__0___45_8089668391442329833 << " | " << sym__0___45_8717135147929398223 << " | " << sym__0___45_7475819144393673057 << " | " << sym__0__9142595129731966875 << " | " << sym__0__2065559644984295980 << " | " << sym__0__2460723449183532278 << " | " << arrToString(sym__0__470592171585028734) << " | " << sym__0__4356580487975201936 << " | " << arrToString(sym__0___45_9184441323043515765) << " | " << arrToString(sym__0__6618707433631942345) << " | " << arrToString(sym__0___45_6275907539891917001) << " | " << arrToString(sym__0___45_2055641227140571803) << " | " << arrToString(sym__0__2004584544714042516) << " | " << arrToString(sym__0__4525776177764059147) << " | " << sym__0__8256595161360863541 << " | " << arrToString(sym__0__2419198459165298437) << " | " << arrToString(sym__0___45_5966236615078693830) << " | " << arrToString(sym__0___45_1194673352705657408) << " | " << arrToString(sym__0__1650700319641029258) << " | " << arrToString(sym__0___45_5413060736990914554) << " | " << arrToString(sym__0__5395318601550732180) << " | " << sym__0___45_4041750310509064417 << " | " << arrToString(sym__0___45_6998494795726951254);
    return o.str();
  }
  bool operator <(const Record3& otherRec) const{
    return (otherRec.sym__0__751349491586783291 < sym__0__751349491586783291 && (otherRec.sym__0__354510891937955499 < sym__0__354510891937955499 && (otherRec.sym__0__8685870419913255269 < sym__0__8685870419913255269 && (otherRec.sym__0___45_1685896364158718066 < sym__0___45_1685896364158718066 && (otherRec.sym__0___45_5677596107407519400 < sym__0___45_5677596107407519400 && (otherRec.sym__0__861815074445021598 < sym__0__861815074445021598 && (otherRec.sym__0___45_3872891870093673981 < sym__0___45_3872891870093673981 && (otherRec.sym__0___45_6241898377327069772 < sym__0___45_6241898377327069772 && (otherRec.sym__0__642504737957706403 < sym__0__642504737957706403 && (otherRec.sym__0___45_1374976708771691557 < sym__0___45_1374976708771691557 && (otherRec.sym__0__2339057656064903933 < sym__0__2339057656064903933 && (otherRec.sym__0__89048769271346350 < sym__0__89048769271346350 && (otherRec.sym__0__6426708041019551759 < sym__0__6426708041019551759 && (otherRec.sym__0__7008835179244010327 < sym__0__7008835179244010327 && (otherRec.sym__0___45_4323628884972846406 < sym__0___45_4323628884972846406 && (otherRec.sym__0__7828159490610995250 < sym__0__7828159490610995250 && (otherRec.sym__0__2257718864796675488 < sym__0__2257718864796675488 && (otherRec.sym__0__730109080165272259 < sym__0__730109080165272259 && (otherRec.sym__0___45_8476449300885475093 < sym__0___45_8476449300885475093 && (otherRec.sym__0___45_991149214691090239 < sym__0___45_991149214691090239 && (otherRec.sym__0___45_2212122284055066105 < sym__0___45_2212122284055066105 && (otherRec.sym__0___45_2044948362686327715 < sym__0___45_2044948362686327715 && (otherRec.sym__0__3321043677072918300 < sym__0__3321043677072918300 && (otherRec.sym__0___45_226399795464070293 < sym__0___45_226399795464070293 && (otherRec.sym__0__7848733459393176335 < sym__0__7848733459393176335 && (otherRec.sym__0___45_4488020782418924777 < sym__0___45_4488020782418924777 && (otherRec.sym__0___45_6919306960004101059 < sym__0___45_6919306960004101059 && (otherRec.sym__0__6018430784935315013 < sym__0__6018430784935315013 && (otherRec.sym__0___45_140673424384154541 < sym__0___45_140673424384154541 && (otherRec.sym__0___45_6038639548629345048 < sym__0___45_6038639548629345048 && (otherRec.sym__0__1559790869847058897 < sym__0__1559790869847058897 && (otherRec.sym__0___45_4352805721407037080 < sym__0___45_4352805721407037080 && (otherRec.sym__0__4062351712071543146 < sym__0__4062351712071543146 && (otherRec.sym__0___45_6018880488104713787 < sym__0___45_6018880488104713787 && (otherRec.sym__0___45_6835853099986992139 < sym__0___45_6835853099986992139 && (otherRec.sym__0___45_8089668391442329833 < sym__0___45_8089668391442329833 && (otherRec.sym__0___45_8717135147929398223 < sym__0___45_8717135147929398223 && (otherRec.sym__0___45_7475819144393673057 < sym__0___45_7475819144393673057 && (otherRec.sym__0__9142595129731966875 < sym__0__9142595129731966875 && (otherRec.sym__0__2065559644984295980 < sym__0__2065559644984295980 && (otherRec.sym__0__2460723449183532278 < sym__0__2460723449183532278 && (otherRec.sym__0__470592171585028734 < sym__0__470592171585028734 && (otherRec.sym__0__4356580487975201936 < sym__0__4356580487975201936 && (otherRec.sym__0___45_9184441323043515765 < sym__0___45_9184441323043515765 && (otherRec.sym__0__6618707433631942345 < sym__0__6618707433631942345 && (otherRec.sym__0___45_6275907539891917001 < sym__0___45_6275907539891917001 && (otherRec.sym__0___45_2055641227140571803 < sym__0___45_2055641227140571803 && (otherRec.sym__0__2004584544714042516 < sym__0__2004584544714042516 && (otherRec.sym__0__4525776177764059147 < sym__0__4525776177764059147 && (otherRec.sym__0__8256595161360863541 < sym__0__8256595161360863541 && (otherRec.sym__0__2419198459165298437 < sym__0__2419198459165298437 && (otherRec.sym__0___45_5966236615078693830 < sym__0___45_5966236615078693830 && (otherRec.sym__0___45_1194673352705657408 < sym__0___45_1194673352705657408 && (otherRec.sym__0__1650700319641029258 < sym__0__1650700319641029258 && (otherRec.sym__0___45_5413060736990914554 < sym__0___45_5413060736990914554 && (otherRec.sym__0__5395318601550732180 < sym__0__5395318601550732180 && (otherRec.sym__0___45_4041750310509064417 < sym__0___45_4041750310509064417 && otherRec.sym__0___45_6998494795726951254 < sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record3& otherRec) const{
    return (otherRec.sym__0__751349491586783291 == sym__0__751349491586783291 && (otherRec.sym__0__354510891937955499 == sym__0__354510891937955499 && (otherRec.sym__0__8685870419913255269 == sym__0__8685870419913255269 && (otherRec.sym__0___45_1685896364158718066 == sym__0___45_1685896364158718066 && (otherRec.sym__0___45_5677596107407519400 == sym__0___45_5677596107407519400 && (otherRec.sym__0__861815074445021598 == sym__0__861815074445021598 && (otherRec.sym__0___45_3872891870093673981 == sym__0___45_3872891870093673981 && (otherRec.sym__0___45_6241898377327069772 == sym__0___45_6241898377327069772 && (otherRec.sym__0__642504737957706403 == sym__0__642504737957706403 && (otherRec.sym__0___45_1374976708771691557 == sym__0___45_1374976708771691557 && (otherRec.sym__0__2339057656064903933 == sym__0__2339057656064903933 && (otherRec.sym__0__89048769271346350 == sym__0__89048769271346350 && (otherRec.sym__0__6426708041019551759 == sym__0__6426708041019551759 && (otherRec.sym__0__7008835179244010327 == sym__0__7008835179244010327 && (otherRec.sym__0___45_4323628884972846406 == sym__0___45_4323628884972846406 && (otherRec.sym__0__7828159490610995250 == sym__0__7828159490610995250 && (otherRec.sym__0__2257718864796675488 == sym__0__2257718864796675488 && (otherRec.sym__0__730109080165272259 == sym__0__730109080165272259 && (otherRec.sym__0___45_8476449300885475093 == sym__0___45_8476449300885475093 && (otherRec.sym__0___45_991149214691090239 == sym__0___45_991149214691090239 && (otherRec.sym__0___45_2212122284055066105 == sym__0___45_2212122284055066105 && (otherRec.sym__0___45_2044948362686327715 == sym__0___45_2044948362686327715 && (otherRec.sym__0__3321043677072918300 == sym__0__3321043677072918300 && (otherRec.sym__0___45_226399795464070293 == sym__0___45_226399795464070293 && (otherRec.sym__0__7848733459393176335 == sym__0__7848733459393176335 && (otherRec.sym__0___45_4488020782418924777 == sym__0___45_4488020782418924777 && (otherRec.sym__0___45_6919306960004101059 == sym__0___45_6919306960004101059 && (otherRec.sym__0__6018430784935315013 == sym__0__6018430784935315013 && (otherRec.sym__0___45_140673424384154541 == sym__0___45_140673424384154541 && (otherRec.sym__0___45_6038639548629345048 == sym__0___45_6038639548629345048 && (otherRec.sym__0__1559790869847058897 == sym__0__1559790869847058897 && (otherRec.sym__0___45_4352805721407037080 == sym__0___45_4352805721407037080 && (otherRec.sym__0__4062351712071543146 == sym__0__4062351712071543146 && (otherRec.sym__0___45_6018880488104713787 == sym__0___45_6018880488104713787 && (otherRec.sym__0___45_6835853099986992139 == sym__0___45_6835853099986992139 && (otherRec.sym__0___45_8089668391442329833 == sym__0___45_8089668391442329833 && (otherRec.sym__0___45_8717135147929398223 == sym__0___45_8717135147929398223 && (otherRec.sym__0___45_7475819144393673057 == sym__0___45_7475819144393673057 && (otherRec.sym__0__9142595129731966875 == sym__0__9142595129731966875 && (otherRec.sym__0__2065559644984295980 == sym__0__2065559644984295980 && (otherRec.sym__0__2460723449183532278 == sym__0__2460723449183532278 && (otherRec.sym__0__470592171585028734 == sym__0__470592171585028734 && (otherRec.sym__0__4356580487975201936 == sym__0__4356580487975201936 && (otherRec.sym__0___45_9184441323043515765 == sym__0___45_9184441323043515765 && (otherRec.sym__0__6618707433631942345 == sym__0__6618707433631942345 && (otherRec.sym__0___45_6275907539891917001 == sym__0___45_6275907539891917001 && (otherRec.sym__0___45_2055641227140571803 == sym__0___45_2055641227140571803 && (otherRec.sym__0__2004584544714042516 == sym__0__2004584544714042516 && (otherRec.sym__0__4525776177764059147 == sym__0__4525776177764059147 && (otherRec.sym__0__8256595161360863541 == sym__0__8256595161360863541 && (otherRec.sym__0__2419198459165298437 == sym__0__2419198459165298437 && (otherRec.sym__0___45_5966236615078693830 == sym__0___45_5966236615078693830 && (otherRec.sym__0___45_1194673352705657408 == sym__0___45_1194673352705657408 && (otherRec.sym__0__1650700319641029258 == sym__0__1650700319641029258 && (otherRec.sym__0___45_5413060736990914554 == sym__0___45_5413060736990914554 && (otherRec.sym__0__5395318601550732180 == sym__0__5395318601550732180 && (otherRec.sym__0___45_4041750310509064417 == sym__0___45_4041750310509064417 && otherRec.sym__0___45_6998494795726951254 == sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record3& otherRec) const{
    return (otherRec.sym__0__751349491586783291 != sym__0__751349491586783291 || (otherRec.sym__0__354510891937955499 != sym__0__354510891937955499 || (otherRec.sym__0__8685870419913255269 != sym__0__8685870419913255269 || (otherRec.sym__0___45_1685896364158718066 != sym__0___45_1685896364158718066 || (otherRec.sym__0___45_5677596107407519400 != sym__0___45_5677596107407519400 || (otherRec.sym__0__861815074445021598 != sym__0__861815074445021598 || (otherRec.sym__0___45_3872891870093673981 != sym__0___45_3872891870093673981 || (otherRec.sym__0___45_6241898377327069772 != sym__0___45_6241898377327069772 || (otherRec.sym__0__642504737957706403 != sym__0__642504737957706403 || (otherRec.sym__0___45_1374976708771691557 != sym__0___45_1374976708771691557 || (otherRec.sym__0__2339057656064903933 != sym__0__2339057656064903933 || (otherRec.sym__0__89048769271346350 != sym__0__89048769271346350 || (otherRec.sym__0__6426708041019551759 != sym__0__6426708041019551759 || (otherRec.sym__0__7008835179244010327 != sym__0__7008835179244010327 || (otherRec.sym__0___45_4323628884972846406 != sym__0___45_4323628884972846406 || (otherRec.sym__0__7828159490610995250 != sym__0__7828159490610995250 || (otherRec.sym__0__2257718864796675488 != sym__0__2257718864796675488 || (otherRec.sym__0__730109080165272259 != sym__0__730109080165272259 || (otherRec.sym__0___45_8476449300885475093 != sym__0___45_8476449300885475093 || (otherRec.sym__0___45_991149214691090239 != sym__0___45_991149214691090239 || (otherRec.sym__0___45_2212122284055066105 != sym__0___45_2212122284055066105 || (otherRec.sym__0___45_2044948362686327715 != sym__0___45_2044948362686327715 || (otherRec.sym__0__3321043677072918300 != sym__0__3321043677072918300 || (otherRec.sym__0___45_226399795464070293 != sym__0___45_226399795464070293 || (otherRec.sym__0__7848733459393176335 != sym__0__7848733459393176335 || (otherRec.sym__0___45_4488020782418924777 != sym__0___45_4488020782418924777 || (otherRec.sym__0___45_6919306960004101059 != sym__0___45_6919306960004101059 || (otherRec.sym__0__6018430784935315013 != sym__0__6018430784935315013 || (otherRec.sym__0___45_140673424384154541 != sym__0___45_140673424384154541 || (otherRec.sym__0___45_6038639548629345048 != sym__0___45_6038639548629345048 || (otherRec.sym__0__1559790869847058897 != sym__0__1559790869847058897 || (otherRec.sym__0___45_4352805721407037080 != sym__0___45_4352805721407037080 || (otherRec.sym__0__4062351712071543146 != sym__0__4062351712071543146 || (otherRec.sym__0___45_6018880488104713787 != sym__0___45_6018880488104713787 || (otherRec.sym__0___45_6835853099986992139 != sym__0___45_6835853099986992139 || (otherRec.sym__0___45_8089668391442329833 != sym__0___45_8089668391442329833 || (otherRec.sym__0___45_8717135147929398223 != sym__0___45_8717135147929398223 || (otherRec.sym__0___45_7475819144393673057 != sym__0___45_7475819144393673057 || (otherRec.sym__0__9142595129731966875 != sym__0__9142595129731966875 || (otherRec.sym__0__2065559644984295980 != sym__0__2065559644984295980 || (otherRec.sym__0__2460723449183532278 != sym__0__2460723449183532278 || (otherRec.sym__0__470592171585028734 != sym__0__470592171585028734 || (otherRec.sym__0__4356580487975201936 != sym__0__4356580487975201936 || (otherRec.sym__0___45_9184441323043515765 != sym__0___45_9184441323043515765 || (otherRec.sym__0__6618707433631942345 != sym__0__6618707433631942345 || (otherRec.sym__0___45_6275907539891917001 != sym__0___45_6275907539891917001 || (otherRec.sym__0___45_2055641227140571803 != sym__0___45_2055641227140571803 || (otherRec.sym__0__2004584544714042516 != sym__0__2004584544714042516 || (otherRec.sym__0__4525776177764059147 != sym__0__4525776177764059147 || (otherRec.sym__0__8256595161360863541 != sym__0__8256595161360863541 || (otherRec.sym__0__2419198459165298437 != sym__0__2419198459165298437 || (otherRec.sym__0___45_5966236615078693830 != sym__0___45_5966236615078693830 || (otherRec.sym__0___45_1194673352705657408 != sym__0___45_1194673352705657408 || (otherRec.sym__0__1650700319641029258 != sym__0__1650700319641029258 || (otherRec.sym__0___45_5413060736990914554 != sym__0___45_5413060736990914554 || (otherRec.sym__0__5395318601550732180 != sym__0__5395318601550732180 || (otherRec.sym__0___45_4041750310509064417 != sym__0___45_4041750310509064417 || otherRec.sym__0___45_6998494795726951254 != sym__0___45_6998494795726951254)))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__751349491586783291;
  fluidb_string<18> sym__0__354510891937955499;
  fluidb_string<9> sym__0__8685870419913255269;
  fluidb_string<9> sym__0___45_1685896364158718066;
  unsigned sym__0___45_5677596107407519400;
  unsigned sym__0__861815074445021598;
  fluidb_string<7> sym__0___45_3872891870093673981;
  unsigned sym__0___45_6241898377327069772;
  unsigned sym__0__642504737957706403;
  unsigned sym__0___45_1374976708771691557;
  unsigned sym__0__2339057656064903933;
  unsigned sym__0__89048769271346350;
  fluidb_string<15> sym__0__6426708041019551759;
  fluidb_string<2> sym__0__7008835179244010327;
  fluidb_string<2> sym__0___45_4323628884972846406;
  fluidb_string<2> sym__0__7828159490610995250;
  fluidb_string<2> sym__0__2257718864796675488;
  unsigned sym__0__730109080165272259;
  fluidb_string<18> sym__0___45_8476449300885475093;
  fluidb_string<40> sym__0___45_991149214691090239;
  fluidb_string<11> sym__0___45_2212122284055066105;
  fluidb_string<15> sym__0___45_2044948362686327715;
  fluidb_string<13> sym__0__3321043677072918300;
  fluidb_string<15> sym__0___45_226399795464070293;
  fluidb_string<21> sym__0__7848733459393176335;
  unsigned sym__0___45_4488020782418924777;
  int sym__0___45_6919306960004101059;
  unsigned sym__0__6018430784935315013;
  unsigned sym__0___45_140673424384154541;
  unsigned sym__0___45_6038639548629345048;
  unsigned sym__0__1559790869847058897;
  fluidb_string<21> sym__0___45_4352805721407037080;
  unsigned sym__0__4062351712071543146;
  fluidb_string<10> sym__0___45_6018880488104713787;
  unsigned sym__0___45_6835853099986992139;
  double sym__0___45_8089668391442329833;
  unsigned sym__0___45_8717135147929398223;
  double sym__0___45_7475819144393673057;
  unsigned sym__0__9142595129731966875;
  unsigned sym__0__2065559644984295980;
  double sym__0__2460723449183532278;
  fluidb_string<13> sym__0__470592171585028734;
  unsigned sym__0__4356580487975201936;
  fluidb_string<25> sym__0___45_9184441323043515765;
  fluidb_string<40> sym__0__6618707433631942345;
  fluidb_string<16> sym__0___45_6275907539891917001;
  fluidb_string<16> sym__0___45_2055641227140571803;
  fluidb_string<13> sym__0__2004584544714042516;
  fluidb_string<15> sym__0__4525776177764059147;
  unsigned sym__0__8256595161360863541;
  fluidb_string<55> sym__0__2419198459165298437;
  fluidb_string<25> sym__0___45_5966236615078693830;
  fluidb_string<7> sym__0___45_1194673352705657408;
  fluidb_string<10> sym__0__1650700319641029258;
  fluidb_string<11> sym__0___45_5413060736990914554;
  fluidb_string<25> sym__0__5395318601550732180;
  unsigned sym__0___45_4041750310509064417;
  fluidb_string<10> sym__0___45_6998494795726951254;
 private:
};


class Record7 {
 public:
  Record7(unsigned __sortElem0, fluidb_string<15> __sortElem1) : sortElem0(__sortElem0), sortElem1(__sortElem1)
  {
  }
  Record7() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0 << " | " << arrToString(sortElem1);
    return o.str();
  }
  bool operator <(const Record7& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && otherRec.sortElem1 < sortElem1);
  }
  bool operator ==(const Record7& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && otherRec.sortElem1 == sortElem1);
  }
  bool operator !=(const Record7& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || otherRec.sortElem1 != sortElem1);
  }
  unsigned sortElem0;
  fluidb_string<15> sortElem1;
 private:
};


class CallableClass6 {
 public:
  Record1 operator()(const Record3& record0) {
    return Record1(vAggrFirst2(record0.sym__0___45_5677596107407519400), vAggrFirst4(record0.sym__0___45_2044948362686327715), vAggrSum5((record0.sym__0__9142595129731966875 - record0.sym__0__2065559644984295980)));
  }
  typedef Record1 Codomain;
  typedef Record3 Domain0;
 private:
  AggrFirst<unsigned> vAggrFirst2;
  AggrFirst<fluidb_string<15>> vAggrFirst4;
  AggrSum<unsigned> vAggrSum5;
};


class CallableClass10 {
 public:
  Record7 operator()(const Record1& record9) {
    return Record7(record9.sym__0___45_532509241117904863, record9.sym__0__6879476602096058762);
  }
  typedef Record7 Codomain;
  typedef Record1 Domain0;
 private:
};


class CallableClass8 {
 public:
  Record7 operator()(const Record3& record0) {
    return Record7(record0.sym__0___45_5677596107407519400, record0.sym__0___45_2044948362686327715);
  }
  typedef Record7 Codomain;
  typedef Record3 Domain0;
 private:
};






int main() {
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QGroup 
  //         [
  //          (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //          (ESym "c_nation",E0 (NAggr AggrFirst (E0 (ESym "c_nation")))),
  //          (
  //            ESym "profit",
  //            E0 
  //               (NAggr 
  //                 AggrSum 
  //                 (E2 ESub 
  //                     (E0 (ESym "lo_revenue")) 
  //                     (E0 (ESym "lo_supplycost"))))
  //           )
  //         ] 
  //         [E0 (ESym "d_year"),E0 (ESym "c_nation")]
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QGroup \n        [\n         (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n         (ESym \"c_nation\",E0 (NAggr AggrFirst (E0 (ESym \"c_nation\")))),\n         (\n           ESym \"profit\",\n           E0 \n              (NAggr \n                AggrSum \n                (E2 ESub \n                    (E0 (ESym \"lo_revenue\")) \n                    (E0 (ESym \"lo_supplycost\"))))\n          )\n        ] \n        [E0 (ESym \"d_year\"),E0 (ESym \"c_nation\")]\n    ]))" << std::endl;
  {
    auto operation = mkAggregation<CallableClass6, CallableClass8>(Just<const std::string>("/tmp/fluidb_store/data311.dat"), Just<const std::string>("/tmp/fluidb_store/data280.dat"), "/tmp/fluidb_store/data280.dat");
    operation.run();
    operation.print_output(10);
  }
  std::cout << "ForwardTrigger: (Just (Right [QSort [E0 (ESym \"d_year\"),E0 (ESym \"c_nation\")]]))" << std::endl;
  {
    auto operation = mkSort<CallableClass10>(Just<const std::string>("/tmp/fluidb_store/data312.dat"), Just<const std::string>("/tmp/fluidb_store/data311.dat"), "/tmp/fluidb_store/data311.dat");
    operation.run();
    operation.print_output(10);
  }
  report_counters();
  return 0;
}
