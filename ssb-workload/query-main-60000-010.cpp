#include <array>

#include <string>

#include <codegen.hh>
class Record5 {
 public:
  Record5(unsigned __sym__0__3403248661340349691, fluidb_string<18> __sym__0__3850222236060155651, fluidb_string<40> __sym__0__3977350276997190885, fluidb_string<11> __sym__0___45_6859642161052908889, fluidb_string<15> __sym__0__6644610896855601817, fluidb_string<13> __sym__0__6265634944113511896, fluidb_string<15> __sym__0___45_1371431997144567421, fluidb_string<21> __sym__0___45_880715020301735505, unsigned __sym__0__7995624710530972915, fluidb_string<18> __sym__0__6195807630124177219, fluidb_string<9> __sym__0___45_2429812741659212415, fluidb_string<9> __sym__0__3204025383091988014, unsigned __sym__0___45_5315606378040067172, unsigned __sym__0___45_5674678265604168610, fluidb_string<7> __sym__0___45_7901043365364018501, unsigned __sym__0__3662230461050853488, unsigned __sym__0___45_7942219912215366309, unsigned __sym__0__4257010425039702547, unsigned __sym__0__4064307497098150713, unsigned __sym__0___45_5255358739022695602, fluidb_string<15> __sym__0__617862561600896687, fluidb_string<2> __sym__0___45_5263756225186459241, fluidb_string<2> __sym__0___45_2410023079747040398, fluidb_string<2> __sym__0___45_3111414259439921974, fluidb_string<2> __sym__0__1643321609568346180, unsigned __sym__0__1293451704385543127, int __sym__0___45_4609582958643610887, unsigned __sym__0___45_2494553570011815839, unsigned __sym__0___45_9059865464435031445, unsigned __sym__0__3418937241583397644, unsigned __sym__0___45_243435756704872939, fluidb_string<21> __sym__0___45_9087532836105098356, unsigned __sym__0___45_6055506455423744638, fluidb_string<10> __sym__0__5695825867951754721, unsigned __sym__0___45_2029576362025629135, double __sym__0___45_1448210651911159849, unsigned __sym__0__6973066605232388341, double __sym__0___45_2495954511780470945, unsigned __sym__0__6609108937894625363, unsigned __sym__0__7746920907002661576, double __sym__0__5772181554311918390, fluidb_string<13> __sym__0___45_3041639650578609474) : sym__0__3403248661340349691(__sym__0__3403248661340349691), sym__0__3850222236060155651(__sym__0__3850222236060155651), sym__0__3977350276997190885(__sym__0__3977350276997190885), sym__0___45_6859642161052908889(__sym__0___45_6859642161052908889), sym__0__6644610896855601817(__sym__0__6644610896855601817), sym__0__6265634944113511896(__sym__0__6265634944113511896), sym__0___45_1371431997144567421(__sym__0___45_1371431997144567421), sym__0___45_880715020301735505(__sym__0___45_880715020301735505), sym__0__7995624710530972915(__sym__0__7995624710530972915), sym__0__6195807630124177219(__sym__0__6195807630124177219), sym__0___45_2429812741659212415(__sym__0___45_2429812741659212415), sym__0__3204025383091988014(__sym__0__3204025383091988014), sym__0___45_5315606378040067172(__sym__0___45_5315606378040067172), sym__0___45_5674678265604168610(__sym__0___45_5674678265604168610), sym__0___45_7901043365364018501(__sym__0___45_7901043365364018501), sym__0__3662230461050853488(__sym__0__3662230461050853488), sym__0___45_7942219912215366309(__sym__0___45_7942219912215366309), sym__0__4257010425039702547(__sym__0__4257010425039702547), sym__0__4064307497098150713(__sym__0__4064307497098150713), sym__0___45_5255358739022695602(__sym__0___45_5255358739022695602), sym__0__617862561600896687(__sym__0__617862561600896687), sym__0___45_5263756225186459241(__sym__0___45_5263756225186459241), sym__0___45_2410023079747040398(__sym__0___45_2410023079747040398), sym__0___45_3111414259439921974(__sym__0___45_3111414259439921974), sym__0__1643321609568346180(__sym__0__1643321609568346180), sym__0__1293451704385543127(__sym__0__1293451704385543127), sym__0___45_4609582958643610887(__sym__0___45_4609582958643610887), sym__0___45_2494553570011815839(__sym__0___45_2494553570011815839), sym__0___45_9059865464435031445(__sym__0___45_9059865464435031445), sym__0__3418937241583397644(__sym__0__3418937241583397644), sym__0___45_243435756704872939(__sym__0___45_243435756704872939), sym__0___45_9087532836105098356(__sym__0___45_9087532836105098356), sym__0___45_6055506455423744638(__sym__0___45_6055506455423744638), sym__0__5695825867951754721(__sym__0__5695825867951754721), sym__0___45_2029576362025629135(__sym__0___45_2029576362025629135), sym__0___45_1448210651911159849(__sym__0___45_1448210651911159849), sym__0__6973066605232388341(__sym__0__6973066605232388341), sym__0___45_2495954511780470945(__sym__0___45_2495954511780470945), sym__0__6609108937894625363(__sym__0__6609108937894625363), sym__0__7746920907002661576(__sym__0__7746920907002661576), sym__0__5772181554311918390(__sym__0__5772181554311918390), sym__0___45_3041639650578609474(__sym__0___45_3041639650578609474)
  {
  }
  Record5() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__3403248661340349691 << " | " << arrToString(sym__0__3850222236060155651) << " | " << arrToString(sym__0__3977350276997190885) << " | " << arrToString(sym__0___45_6859642161052908889) << " | " << arrToString(sym__0__6644610896855601817) << " | " << arrToString(sym__0__6265634944113511896) << " | " << arrToString(sym__0___45_1371431997144567421) << " | " << arrToString(sym__0___45_880715020301735505) << " | " << sym__0__7995624710530972915 << " | " << arrToString(sym__0__6195807630124177219) << " | " << arrToString(sym__0___45_2429812741659212415) << " | " << arrToString(sym__0__3204025383091988014) << " | " << sym__0___45_5315606378040067172 << " | " << sym__0___45_5674678265604168610 << " | " << arrToString(sym__0___45_7901043365364018501) << " | " << sym__0__3662230461050853488 << " | " << sym__0___45_7942219912215366309 << " | " << sym__0__4257010425039702547 << " | " << sym__0__4064307497098150713 << " | " << sym__0___45_5255358739022695602 << " | " << arrToString(sym__0__617862561600896687) << " | " << arrToString(sym__0___45_5263756225186459241) << " | " << arrToString(sym__0___45_2410023079747040398) << " | " << arrToString(sym__0___45_3111414259439921974) << " | " << arrToString(sym__0__1643321609568346180) << " | " << sym__0__1293451704385543127 << " | " << sym__0___45_4609582958643610887 << " | " << sym__0___45_2494553570011815839 << " | " << sym__0___45_9059865464435031445 << " | " << sym__0__3418937241583397644 << " | " << sym__0___45_243435756704872939 << " | " << arrToString(sym__0___45_9087532836105098356) << " | " << sym__0___45_6055506455423744638 << " | " << arrToString(sym__0__5695825867951754721) << " | " << sym__0___45_2029576362025629135 << " | " << sym__0___45_1448210651911159849 << " | " << sym__0__6973066605232388341 << " | " << sym__0___45_2495954511780470945 << " | " << sym__0__6609108937894625363 << " | " << sym__0__7746920907002661576 << " | " << sym__0__5772181554311918390 << " | " << arrToString(sym__0___45_3041639650578609474);
    return o.str();
  }
  bool operator <(const Record5& otherRec) const{
    return (otherRec.sym__0__3403248661340349691 < sym__0__3403248661340349691 && (otherRec.sym__0__3850222236060155651 < sym__0__3850222236060155651 && (otherRec.sym__0__3977350276997190885 < sym__0__3977350276997190885 && (otherRec.sym__0___45_6859642161052908889 < sym__0___45_6859642161052908889 && (otherRec.sym__0__6644610896855601817 < sym__0__6644610896855601817 && (otherRec.sym__0__6265634944113511896 < sym__0__6265634944113511896 && (otherRec.sym__0___45_1371431997144567421 < sym__0___45_1371431997144567421 && (otherRec.sym__0___45_880715020301735505 < sym__0___45_880715020301735505 && (otherRec.sym__0__7995624710530972915 < sym__0__7995624710530972915 && (otherRec.sym__0__6195807630124177219 < sym__0__6195807630124177219 && (otherRec.sym__0___45_2429812741659212415 < sym__0___45_2429812741659212415 && (otherRec.sym__0__3204025383091988014 < sym__0__3204025383091988014 && (otherRec.sym__0___45_5315606378040067172 < sym__0___45_5315606378040067172 && (otherRec.sym__0___45_5674678265604168610 < sym__0___45_5674678265604168610 && (otherRec.sym__0___45_7901043365364018501 < sym__0___45_7901043365364018501 && (otherRec.sym__0__3662230461050853488 < sym__0__3662230461050853488 && (otherRec.sym__0___45_7942219912215366309 < sym__0___45_7942219912215366309 && (otherRec.sym__0__4257010425039702547 < sym__0__4257010425039702547 && (otherRec.sym__0__4064307497098150713 < sym__0__4064307497098150713 && (otherRec.sym__0___45_5255358739022695602 < sym__0___45_5255358739022695602 && (otherRec.sym__0__617862561600896687 < sym__0__617862561600896687 && (otherRec.sym__0___45_5263756225186459241 < sym__0___45_5263756225186459241 && (otherRec.sym__0___45_2410023079747040398 < sym__0___45_2410023079747040398 && (otherRec.sym__0___45_3111414259439921974 < sym__0___45_3111414259439921974 && (otherRec.sym__0__1643321609568346180 < sym__0__1643321609568346180 && (otherRec.sym__0__1293451704385543127 < sym__0__1293451704385543127 && (otherRec.sym__0___45_4609582958643610887 < sym__0___45_4609582958643610887 && (otherRec.sym__0___45_2494553570011815839 < sym__0___45_2494553570011815839 && (otherRec.sym__0___45_9059865464435031445 < sym__0___45_9059865464435031445 && (otherRec.sym__0__3418937241583397644 < sym__0__3418937241583397644 && (otherRec.sym__0___45_243435756704872939 < sym__0___45_243435756704872939 && (otherRec.sym__0___45_9087532836105098356 < sym__0___45_9087532836105098356 && (otherRec.sym__0___45_6055506455423744638 < sym__0___45_6055506455423744638 && (otherRec.sym__0__5695825867951754721 < sym__0__5695825867951754721 && (otherRec.sym__0___45_2029576362025629135 < sym__0___45_2029576362025629135 && (otherRec.sym__0___45_1448210651911159849 < sym__0___45_1448210651911159849 && (otherRec.sym__0__6973066605232388341 < sym__0__6973066605232388341 && (otherRec.sym__0___45_2495954511780470945 < sym__0___45_2495954511780470945 && (otherRec.sym__0__6609108937894625363 < sym__0__6609108937894625363 && (otherRec.sym__0__7746920907002661576 < sym__0__7746920907002661576 && (otherRec.sym__0__5772181554311918390 < sym__0__5772181554311918390 && otherRec.sym__0___45_3041639650578609474 < sym__0___45_3041639650578609474)))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record5& otherRec) const{
    return (otherRec.sym__0__3403248661340349691 == sym__0__3403248661340349691 && (otherRec.sym__0__3850222236060155651 == sym__0__3850222236060155651 && (otherRec.sym__0__3977350276997190885 == sym__0__3977350276997190885 && (otherRec.sym__0___45_6859642161052908889 == sym__0___45_6859642161052908889 && (otherRec.sym__0__6644610896855601817 == sym__0__6644610896855601817 && (otherRec.sym__0__6265634944113511896 == sym__0__6265634944113511896 && (otherRec.sym__0___45_1371431997144567421 == sym__0___45_1371431997144567421 && (otherRec.sym__0___45_880715020301735505 == sym__0___45_880715020301735505 && (otherRec.sym__0__7995624710530972915 == sym__0__7995624710530972915 && (otherRec.sym__0__6195807630124177219 == sym__0__6195807630124177219 && (otherRec.sym__0___45_2429812741659212415 == sym__0___45_2429812741659212415 && (otherRec.sym__0__3204025383091988014 == sym__0__3204025383091988014 && (otherRec.sym__0___45_5315606378040067172 == sym__0___45_5315606378040067172 && (otherRec.sym__0___45_5674678265604168610 == sym__0___45_5674678265604168610 && (otherRec.sym__0___45_7901043365364018501 == sym__0___45_7901043365364018501 && (otherRec.sym__0__3662230461050853488 == sym__0__3662230461050853488 && (otherRec.sym__0___45_7942219912215366309 == sym__0___45_7942219912215366309 && (otherRec.sym__0__4257010425039702547 == sym__0__4257010425039702547 && (otherRec.sym__0__4064307497098150713 == sym__0__4064307497098150713 && (otherRec.sym__0___45_5255358739022695602 == sym__0___45_5255358739022695602 && (otherRec.sym__0__617862561600896687 == sym__0__617862561600896687 && (otherRec.sym__0___45_5263756225186459241 == sym__0___45_5263756225186459241 && (otherRec.sym__0___45_2410023079747040398 == sym__0___45_2410023079747040398 && (otherRec.sym__0___45_3111414259439921974 == sym__0___45_3111414259439921974 && (otherRec.sym__0__1643321609568346180 == sym__0__1643321609568346180 && (otherRec.sym__0__1293451704385543127 == sym__0__1293451704385543127 && (otherRec.sym__0___45_4609582958643610887 == sym__0___45_4609582958643610887 && (otherRec.sym__0___45_2494553570011815839 == sym__0___45_2494553570011815839 && (otherRec.sym__0___45_9059865464435031445 == sym__0___45_9059865464435031445 && (otherRec.sym__0__3418937241583397644 == sym__0__3418937241583397644 && (otherRec.sym__0___45_243435756704872939 == sym__0___45_243435756704872939 && (otherRec.sym__0___45_9087532836105098356 == sym__0___45_9087532836105098356 && (otherRec.sym__0___45_6055506455423744638 == sym__0___45_6055506455423744638 && (otherRec.sym__0__5695825867951754721 == sym__0__5695825867951754721 && (otherRec.sym__0___45_2029576362025629135 == sym__0___45_2029576362025629135 && (otherRec.sym__0___45_1448210651911159849 == sym__0___45_1448210651911159849 && (otherRec.sym__0__6973066605232388341 == sym__0__6973066605232388341 && (otherRec.sym__0___45_2495954511780470945 == sym__0___45_2495954511780470945 && (otherRec.sym__0__6609108937894625363 == sym__0__6609108937894625363 && (otherRec.sym__0__7746920907002661576 == sym__0__7746920907002661576 && (otherRec.sym__0__5772181554311918390 == sym__0__5772181554311918390 && otherRec.sym__0___45_3041639650578609474 == sym__0___45_3041639650578609474)))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record5& otherRec) const{
    return (otherRec.sym__0__3403248661340349691 != sym__0__3403248661340349691 || (otherRec.sym__0__3850222236060155651 != sym__0__3850222236060155651 || (otherRec.sym__0__3977350276997190885 != sym__0__3977350276997190885 || (otherRec.sym__0___45_6859642161052908889 != sym__0___45_6859642161052908889 || (otherRec.sym__0__6644610896855601817 != sym__0__6644610896855601817 || (otherRec.sym__0__6265634944113511896 != sym__0__6265634944113511896 || (otherRec.sym__0___45_1371431997144567421 != sym__0___45_1371431997144567421 || (otherRec.sym__0___45_880715020301735505 != sym__0___45_880715020301735505 || (otherRec.sym__0__7995624710530972915 != sym__0__7995624710530972915 || (otherRec.sym__0__6195807630124177219 != sym__0__6195807630124177219 || (otherRec.sym__0___45_2429812741659212415 != sym__0___45_2429812741659212415 || (otherRec.sym__0__3204025383091988014 != sym__0__3204025383091988014 || (otherRec.sym__0___45_5315606378040067172 != sym__0___45_5315606378040067172 || (otherRec.sym__0___45_5674678265604168610 != sym__0___45_5674678265604168610 || (otherRec.sym__0___45_7901043365364018501 != sym__0___45_7901043365364018501 || (otherRec.sym__0__3662230461050853488 != sym__0__3662230461050853488 || (otherRec.sym__0___45_7942219912215366309 != sym__0___45_7942219912215366309 || (otherRec.sym__0__4257010425039702547 != sym__0__4257010425039702547 || (otherRec.sym__0__4064307497098150713 != sym__0__4064307497098150713 || (otherRec.sym__0___45_5255358739022695602 != sym__0___45_5255358739022695602 || (otherRec.sym__0__617862561600896687 != sym__0__617862561600896687 || (otherRec.sym__0___45_5263756225186459241 != sym__0___45_5263756225186459241 || (otherRec.sym__0___45_2410023079747040398 != sym__0___45_2410023079747040398 || (otherRec.sym__0___45_3111414259439921974 != sym__0___45_3111414259439921974 || (otherRec.sym__0__1643321609568346180 != sym__0__1643321609568346180 || (otherRec.sym__0__1293451704385543127 != sym__0__1293451704385543127 || (otherRec.sym__0___45_4609582958643610887 != sym__0___45_4609582958643610887 || (otherRec.sym__0___45_2494553570011815839 != sym__0___45_2494553570011815839 || (otherRec.sym__0___45_9059865464435031445 != sym__0___45_9059865464435031445 || (otherRec.sym__0__3418937241583397644 != sym__0__3418937241583397644 || (otherRec.sym__0___45_243435756704872939 != sym__0___45_243435756704872939 || (otherRec.sym__0___45_9087532836105098356 != sym__0___45_9087532836105098356 || (otherRec.sym__0___45_6055506455423744638 != sym__0___45_6055506455423744638 || (otherRec.sym__0__5695825867951754721 != sym__0__5695825867951754721 || (otherRec.sym__0___45_2029576362025629135 != sym__0___45_2029576362025629135 || (otherRec.sym__0___45_1448210651911159849 != sym__0___45_1448210651911159849 || (otherRec.sym__0__6973066605232388341 != sym__0__6973066605232388341 || (otherRec.sym__0___45_2495954511780470945 != sym__0___45_2495954511780470945 || (otherRec.sym__0__6609108937894625363 != sym__0__6609108937894625363 || (otherRec.sym__0__7746920907002661576 != sym__0__7746920907002661576 || (otherRec.sym__0__5772181554311918390 != sym__0__5772181554311918390 || otherRec.sym__0___45_3041639650578609474 != sym__0___45_3041639650578609474)))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__3403248661340349691;
  fluidb_string<18> sym__0__3850222236060155651;
  fluidb_string<40> sym__0__3977350276997190885;
  fluidb_string<11> sym__0___45_6859642161052908889;
  fluidb_string<15> sym__0__6644610896855601817;
  fluidb_string<13> sym__0__6265634944113511896;
  fluidb_string<15> sym__0___45_1371431997144567421;
  fluidb_string<21> sym__0___45_880715020301735505;
  unsigned sym__0__7995624710530972915;
  fluidb_string<18> sym__0__6195807630124177219;
  fluidb_string<9> sym__0___45_2429812741659212415;
  fluidb_string<9> sym__0__3204025383091988014;
  unsigned sym__0___45_5315606378040067172;
  unsigned sym__0___45_5674678265604168610;
  fluidb_string<7> sym__0___45_7901043365364018501;
  unsigned sym__0__3662230461050853488;
  unsigned sym__0___45_7942219912215366309;
  unsigned sym__0__4257010425039702547;
  unsigned sym__0__4064307497098150713;
  unsigned sym__0___45_5255358739022695602;
  fluidb_string<15> sym__0__617862561600896687;
  fluidb_string<2> sym__0___45_5263756225186459241;
  fluidb_string<2> sym__0___45_2410023079747040398;
  fluidb_string<2> sym__0___45_3111414259439921974;
  fluidb_string<2> sym__0__1643321609568346180;
  unsigned sym__0__1293451704385543127;
  int sym__0___45_4609582958643610887;
  unsigned sym__0___45_2494553570011815839;
  unsigned sym__0___45_9059865464435031445;
  unsigned sym__0__3418937241583397644;
  unsigned sym__0___45_243435756704872939;
  fluidb_string<21> sym__0___45_9087532836105098356;
  unsigned sym__0___45_6055506455423744638;
  fluidb_string<10> sym__0__5695825867951754721;
  unsigned sym__0___45_2029576362025629135;
  double sym__0___45_1448210651911159849;
  unsigned sym__0__6973066605232388341;
  double sym__0___45_2495954511780470945;
  unsigned sym__0__6609108937894625363;
  unsigned sym__0__7746920907002661576;
  double sym__0__5772181554311918390;
  fluidb_string<13> sym__0___45_3041639650578609474;
 private:
};


class Record27 {
 public:
  Record27(unsigned __sortElem0, unsigned __sortElem1) : sortElem0(__sortElem0), sortElem1(__sortElem1)
  {
  }
  Record27() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0 << " | " << sortElem1;
    return o.str();
  }
  bool operator <(const Record27& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && otherRec.sortElem1 < sortElem1);
  }
  bool operator ==(const Record27& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && otherRec.sortElem1 == sortElem1);
  }
  bool operator !=(const Record27& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || otherRec.sortElem1 != sortElem1);
  }
  unsigned sortElem0;
  unsigned sortElem1;
 private:
};


class Record9 {
 public:
  Record9(unsigned __sortElem0) : sortElem0(__sortElem0)
  {
  }
  Record9() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sortElem0;
    return o.str();
  }
  bool operator <(const Record9& otherRec) const{
    return otherRec.sortElem0 < sortElem0;
  }
  bool operator ==(const Record9& otherRec) const{
    return otherRec.sortElem0 == sortElem0;
  }
  bool operator !=(const Record9& otherRec) const{
    return otherRec.sortElem0 != sortElem0;
  }
  unsigned sortElem0;
 private:
};


class Record19 {
 public:
  Record19(unsigned __sym__0___45_7598124729681409484, fluidb_string<18> __sym__0___45_6275087891601043380, fluidb_string<40> __sym__0__4314826987601357414, fluidb_string<11> __sym__0___45_559827363703454640, fluidb_string<15> __sym__0___45_7373215701745101718, fluidb_string<13> __sym__0___45_558465814984613097, fluidb_string<15> __sym__0___45_2923739264729622324, fluidb_string<21> __sym__0__6742315409954192616, unsigned __sym__0__5806512644287066780, fluidb_string<18> __sym__0___45_1075623252194402676, fluidb_string<9> __sym__0__1318757177840667394, fluidb_string<9> __sym__0___45_1077445974220605987, unsigned __sym__0___45_4186919936531085605, unsigned __sym__0__8923568548338736173, fluidb_string<7> __sym__0__9092600113099988980, unsigned __sym__0__6491208688756492831, unsigned __sym__0___45_1392082682984030572, unsigned __sym__0__4079042978325159356, unsigned __sym__0___45_8740031086835334902, unsigned __sym__0__7160637419916814077, fluidb_string<15> __sym__0__6771428984043356648, fluidb_string<2> __sym__0___45_2925961550438625120, fluidb_string<2> __sym__0___45_5167274928602864399, fluidb_string<2> __sym__0___45_1196774764746194727, fluidb_string<2> __sym__0__2350012532823100403, unsigned __sym__0___45_6131451972505023264, int __sym__0__991154100797386954, unsigned __sym__0__8646118378949802466, unsigned __sym__0___45_6790625202795336188, unsigned __sym__0__3529872977186491051, unsigned __sym__0__4603393127449354742, fluidb_string<21> __sym__0__8626210361282297643, unsigned __sym__0___45_6066645379240687263, fluidb_string<10> __sym__0___45_3161866226707105950, unsigned __sym__0___45_4768716247113050606, double __sym__0___45_8475820954227687200, unsigned __sym__0__7627836797074738390, double __sym__0__7140269753477798136, unsigned __sym__0___45_3655337267794821636, unsigned __sym__0___45_1056966419661133721, double __sym__0___45_8703794242078256459, fluidb_string<13> __sym__0__883728790171705997, unsigned __sym__0___45_96225719667877789, fluidb_string<25> __sym__0__6947163674604440172, fluidb_string<40> __sym__0__1952885841380518654, fluidb_string<16> __sym__0__7423004607806069504, fluidb_string<16> __sym__0__652266665826131714, fluidb_string<13> __sym__0__8085482155815911167, fluidb_string<15> __sym__0__7812946840234747372) : sym__0___45_7598124729681409484(__sym__0___45_7598124729681409484), sym__0___45_6275087891601043380(__sym__0___45_6275087891601043380), sym__0__4314826987601357414(__sym__0__4314826987601357414), sym__0___45_559827363703454640(__sym__0___45_559827363703454640), sym__0___45_7373215701745101718(__sym__0___45_7373215701745101718), sym__0___45_558465814984613097(__sym__0___45_558465814984613097), sym__0___45_2923739264729622324(__sym__0___45_2923739264729622324), sym__0__6742315409954192616(__sym__0__6742315409954192616), sym__0__5806512644287066780(__sym__0__5806512644287066780), sym__0___45_1075623252194402676(__sym__0___45_1075623252194402676), sym__0__1318757177840667394(__sym__0__1318757177840667394), sym__0___45_1077445974220605987(__sym__0___45_1077445974220605987), sym__0___45_4186919936531085605(__sym__0___45_4186919936531085605), sym__0__8923568548338736173(__sym__0__8923568548338736173), sym__0__9092600113099988980(__sym__0__9092600113099988980), sym__0__6491208688756492831(__sym__0__6491208688756492831), sym__0___45_1392082682984030572(__sym__0___45_1392082682984030572), sym__0__4079042978325159356(__sym__0__4079042978325159356), sym__0___45_8740031086835334902(__sym__0___45_8740031086835334902), sym__0__7160637419916814077(__sym__0__7160637419916814077), sym__0__6771428984043356648(__sym__0__6771428984043356648), sym__0___45_2925961550438625120(__sym__0___45_2925961550438625120), sym__0___45_5167274928602864399(__sym__0___45_5167274928602864399), sym__0___45_1196774764746194727(__sym__0___45_1196774764746194727), sym__0__2350012532823100403(__sym__0__2350012532823100403), sym__0___45_6131451972505023264(__sym__0___45_6131451972505023264), sym__0__991154100797386954(__sym__0__991154100797386954), sym__0__8646118378949802466(__sym__0__8646118378949802466), sym__0___45_6790625202795336188(__sym__0___45_6790625202795336188), sym__0__3529872977186491051(__sym__0__3529872977186491051), sym__0__4603393127449354742(__sym__0__4603393127449354742), sym__0__8626210361282297643(__sym__0__8626210361282297643), sym__0___45_6066645379240687263(__sym__0___45_6066645379240687263), sym__0___45_3161866226707105950(__sym__0___45_3161866226707105950), sym__0___45_4768716247113050606(__sym__0___45_4768716247113050606), sym__0___45_8475820954227687200(__sym__0___45_8475820954227687200), sym__0__7627836797074738390(__sym__0__7627836797074738390), sym__0__7140269753477798136(__sym__0__7140269753477798136), sym__0___45_3655337267794821636(__sym__0___45_3655337267794821636), sym__0___45_1056966419661133721(__sym__0___45_1056966419661133721), sym__0___45_8703794242078256459(__sym__0___45_8703794242078256459), sym__0__883728790171705997(__sym__0__883728790171705997), sym__0___45_96225719667877789(__sym__0___45_96225719667877789), sym__0__6947163674604440172(__sym__0__6947163674604440172), sym__0__1952885841380518654(__sym__0__1952885841380518654), sym__0__7423004607806069504(__sym__0__7423004607806069504), sym__0__652266665826131714(__sym__0__652266665826131714), sym__0__8085482155815911167(__sym__0__8085482155815911167), sym__0__7812946840234747372(__sym__0__7812946840234747372)
  {
  }
  Record19() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_7598124729681409484 << " | " << arrToString(sym__0___45_6275087891601043380) << " | " << arrToString(sym__0__4314826987601357414) << " | " << arrToString(sym__0___45_559827363703454640) << " | " << arrToString(sym__0___45_7373215701745101718) << " | " << arrToString(sym__0___45_558465814984613097) << " | " << arrToString(sym__0___45_2923739264729622324) << " | " << arrToString(sym__0__6742315409954192616) << " | " << sym__0__5806512644287066780 << " | " << arrToString(sym__0___45_1075623252194402676) << " | " << arrToString(sym__0__1318757177840667394) << " | " << arrToString(sym__0___45_1077445974220605987) << " | " << sym__0___45_4186919936531085605 << " | " << sym__0__8923568548338736173 << " | " << arrToString(sym__0__9092600113099988980) << " | " << sym__0__6491208688756492831 << " | " << sym__0___45_1392082682984030572 << " | " << sym__0__4079042978325159356 << " | " << sym__0___45_8740031086835334902 << " | " << sym__0__7160637419916814077 << " | " << arrToString(sym__0__6771428984043356648) << " | " << arrToString(sym__0___45_2925961550438625120) << " | " << arrToString(sym__0___45_5167274928602864399) << " | " << arrToString(sym__0___45_1196774764746194727) << " | " << arrToString(sym__0__2350012532823100403) << " | " << sym__0___45_6131451972505023264 << " | " << sym__0__991154100797386954 << " | " << sym__0__8646118378949802466 << " | " << sym__0___45_6790625202795336188 << " | " << sym__0__3529872977186491051 << " | " << sym__0__4603393127449354742 << " | " << arrToString(sym__0__8626210361282297643) << " | " << sym__0___45_6066645379240687263 << " | " << arrToString(sym__0___45_3161866226707105950) << " | " << sym__0___45_4768716247113050606 << " | " << sym__0___45_8475820954227687200 << " | " << sym__0__7627836797074738390 << " | " << sym__0__7140269753477798136 << " | " << sym__0___45_3655337267794821636 << " | " << sym__0___45_1056966419661133721 << " | " << sym__0___45_8703794242078256459 << " | " << arrToString(sym__0__883728790171705997) << " | " << sym__0___45_96225719667877789 << " | " << arrToString(sym__0__6947163674604440172) << " | " << arrToString(sym__0__1952885841380518654) << " | " << arrToString(sym__0__7423004607806069504) << " | " << arrToString(sym__0__652266665826131714) << " | " << arrToString(sym__0__8085482155815911167) << " | " << arrToString(sym__0__7812946840234747372);
    return o.str();
  }
  bool operator <(const Record19& otherRec) const{
    return (otherRec.sym__0___45_7598124729681409484 < sym__0___45_7598124729681409484 && (otherRec.sym__0___45_6275087891601043380 < sym__0___45_6275087891601043380 && (otherRec.sym__0__4314826987601357414 < sym__0__4314826987601357414 && (otherRec.sym__0___45_559827363703454640 < sym__0___45_559827363703454640 && (otherRec.sym__0___45_7373215701745101718 < sym__0___45_7373215701745101718 && (otherRec.sym__0___45_558465814984613097 < sym__0___45_558465814984613097 && (otherRec.sym__0___45_2923739264729622324 < sym__0___45_2923739264729622324 && (otherRec.sym__0__6742315409954192616 < sym__0__6742315409954192616 && (otherRec.sym__0__5806512644287066780 < sym__0__5806512644287066780 && (otherRec.sym__0___45_1075623252194402676 < sym__0___45_1075623252194402676 && (otherRec.sym__0__1318757177840667394 < sym__0__1318757177840667394 && (otherRec.sym__0___45_1077445974220605987 < sym__0___45_1077445974220605987 && (otherRec.sym__0___45_4186919936531085605 < sym__0___45_4186919936531085605 && (otherRec.sym__0__8923568548338736173 < sym__0__8923568548338736173 && (otherRec.sym__0__9092600113099988980 < sym__0__9092600113099988980 && (otherRec.sym__0__6491208688756492831 < sym__0__6491208688756492831 && (otherRec.sym__0___45_1392082682984030572 < sym__0___45_1392082682984030572 && (otherRec.sym__0__4079042978325159356 < sym__0__4079042978325159356 && (otherRec.sym__0___45_8740031086835334902 < sym__0___45_8740031086835334902 && (otherRec.sym__0__7160637419916814077 < sym__0__7160637419916814077 && (otherRec.sym__0__6771428984043356648 < sym__0__6771428984043356648 && (otherRec.sym__0___45_2925961550438625120 < sym__0___45_2925961550438625120 && (otherRec.sym__0___45_5167274928602864399 < sym__0___45_5167274928602864399 && (otherRec.sym__0___45_1196774764746194727 < sym__0___45_1196774764746194727 && (otherRec.sym__0__2350012532823100403 < sym__0__2350012532823100403 && (otherRec.sym__0___45_6131451972505023264 < sym__0___45_6131451972505023264 && (otherRec.sym__0__991154100797386954 < sym__0__991154100797386954 && (otherRec.sym__0__8646118378949802466 < sym__0__8646118378949802466 && (otherRec.sym__0___45_6790625202795336188 < sym__0___45_6790625202795336188 && (otherRec.sym__0__3529872977186491051 < sym__0__3529872977186491051 && (otherRec.sym__0__4603393127449354742 < sym__0__4603393127449354742 && (otherRec.sym__0__8626210361282297643 < sym__0__8626210361282297643 && (otherRec.sym__0___45_6066645379240687263 < sym__0___45_6066645379240687263 && (otherRec.sym__0___45_3161866226707105950 < sym__0___45_3161866226707105950 && (otherRec.sym__0___45_4768716247113050606 < sym__0___45_4768716247113050606 && (otherRec.sym__0___45_8475820954227687200 < sym__0___45_8475820954227687200 && (otherRec.sym__0__7627836797074738390 < sym__0__7627836797074738390 && (otherRec.sym__0__7140269753477798136 < sym__0__7140269753477798136 && (otherRec.sym__0___45_3655337267794821636 < sym__0___45_3655337267794821636 && (otherRec.sym__0___45_1056966419661133721 < sym__0___45_1056966419661133721 && (otherRec.sym__0___45_8703794242078256459 < sym__0___45_8703794242078256459 && (otherRec.sym__0__883728790171705997 < sym__0__883728790171705997 && (otherRec.sym__0___45_96225719667877789 < sym__0___45_96225719667877789 && (otherRec.sym__0__6947163674604440172 < sym__0__6947163674604440172 && (otherRec.sym__0__1952885841380518654 < sym__0__1952885841380518654 && (otherRec.sym__0__7423004607806069504 < sym__0__7423004607806069504 && (otherRec.sym__0__652266665826131714 < sym__0__652266665826131714 && (otherRec.sym__0__8085482155815911167 < sym__0__8085482155815911167 && otherRec.sym__0__7812946840234747372 < sym__0__7812946840234747372))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record19& otherRec) const{
    return (otherRec.sym__0___45_7598124729681409484 == sym__0___45_7598124729681409484 && (otherRec.sym__0___45_6275087891601043380 == sym__0___45_6275087891601043380 && (otherRec.sym__0__4314826987601357414 == sym__0__4314826987601357414 && (otherRec.sym__0___45_559827363703454640 == sym__0___45_559827363703454640 && (otherRec.sym__0___45_7373215701745101718 == sym__0___45_7373215701745101718 && (otherRec.sym__0___45_558465814984613097 == sym__0___45_558465814984613097 && (otherRec.sym__0___45_2923739264729622324 == sym__0___45_2923739264729622324 && (otherRec.sym__0__6742315409954192616 == sym__0__6742315409954192616 && (otherRec.sym__0__5806512644287066780 == sym__0__5806512644287066780 && (otherRec.sym__0___45_1075623252194402676 == sym__0___45_1075623252194402676 && (otherRec.sym__0__1318757177840667394 == sym__0__1318757177840667394 && (otherRec.sym__0___45_1077445974220605987 == sym__0___45_1077445974220605987 && (otherRec.sym__0___45_4186919936531085605 == sym__0___45_4186919936531085605 && (otherRec.sym__0__8923568548338736173 == sym__0__8923568548338736173 && (otherRec.sym__0__9092600113099988980 == sym__0__9092600113099988980 && (otherRec.sym__0__6491208688756492831 == sym__0__6491208688756492831 && (otherRec.sym__0___45_1392082682984030572 == sym__0___45_1392082682984030572 && (otherRec.sym__0__4079042978325159356 == sym__0__4079042978325159356 && (otherRec.sym__0___45_8740031086835334902 == sym__0___45_8740031086835334902 && (otherRec.sym__0__7160637419916814077 == sym__0__7160637419916814077 && (otherRec.sym__0__6771428984043356648 == sym__0__6771428984043356648 && (otherRec.sym__0___45_2925961550438625120 == sym__0___45_2925961550438625120 && (otherRec.sym__0___45_5167274928602864399 == sym__0___45_5167274928602864399 && (otherRec.sym__0___45_1196774764746194727 == sym__0___45_1196774764746194727 && (otherRec.sym__0__2350012532823100403 == sym__0__2350012532823100403 && (otherRec.sym__0___45_6131451972505023264 == sym__0___45_6131451972505023264 && (otherRec.sym__0__991154100797386954 == sym__0__991154100797386954 && (otherRec.sym__0__8646118378949802466 == sym__0__8646118378949802466 && (otherRec.sym__0___45_6790625202795336188 == sym__0___45_6790625202795336188 && (otherRec.sym__0__3529872977186491051 == sym__0__3529872977186491051 && (otherRec.sym__0__4603393127449354742 == sym__0__4603393127449354742 && (otherRec.sym__0__8626210361282297643 == sym__0__8626210361282297643 && (otherRec.sym__0___45_6066645379240687263 == sym__0___45_6066645379240687263 && (otherRec.sym__0___45_3161866226707105950 == sym__0___45_3161866226707105950 && (otherRec.sym__0___45_4768716247113050606 == sym__0___45_4768716247113050606 && (otherRec.sym__0___45_8475820954227687200 == sym__0___45_8475820954227687200 && (otherRec.sym__0__7627836797074738390 == sym__0__7627836797074738390 && (otherRec.sym__0__7140269753477798136 == sym__0__7140269753477798136 && (otherRec.sym__0___45_3655337267794821636 == sym__0___45_3655337267794821636 && (otherRec.sym__0___45_1056966419661133721 == sym__0___45_1056966419661133721 && (otherRec.sym__0___45_8703794242078256459 == sym__0___45_8703794242078256459 && (otherRec.sym__0__883728790171705997 == sym__0__883728790171705997 && (otherRec.sym__0___45_96225719667877789 == sym__0___45_96225719667877789 && (otherRec.sym__0__6947163674604440172 == sym__0__6947163674604440172 && (otherRec.sym__0__1952885841380518654 == sym__0__1952885841380518654 && (otherRec.sym__0__7423004607806069504 == sym__0__7423004607806069504 && (otherRec.sym__0__652266665826131714 == sym__0__652266665826131714 && (otherRec.sym__0__8085482155815911167 == sym__0__8085482155815911167 && otherRec.sym__0__7812946840234747372 == sym__0__7812946840234747372))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record19& otherRec) const{
    return (otherRec.sym__0___45_7598124729681409484 != sym__0___45_7598124729681409484 || (otherRec.sym__0___45_6275087891601043380 != sym__0___45_6275087891601043380 || (otherRec.sym__0__4314826987601357414 != sym__0__4314826987601357414 || (otherRec.sym__0___45_559827363703454640 != sym__0___45_559827363703454640 || (otherRec.sym__0___45_7373215701745101718 != sym__0___45_7373215701745101718 || (otherRec.sym__0___45_558465814984613097 != sym__0___45_558465814984613097 || (otherRec.sym__0___45_2923739264729622324 != sym__0___45_2923739264729622324 || (otherRec.sym__0__6742315409954192616 != sym__0__6742315409954192616 || (otherRec.sym__0__5806512644287066780 != sym__0__5806512644287066780 || (otherRec.sym__0___45_1075623252194402676 != sym__0___45_1075623252194402676 || (otherRec.sym__0__1318757177840667394 != sym__0__1318757177840667394 || (otherRec.sym__0___45_1077445974220605987 != sym__0___45_1077445974220605987 || (otherRec.sym__0___45_4186919936531085605 != sym__0___45_4186919936531085605 || (otherRec.sym__0__8923568548338736173 != sym__0__8923568548338736173 || (otherRec.sym__0__9092600113099988980 != sym__0__9092600113099988980 || (otherRec.sym__0__6491208688756492831 != sym__0__6491208688756492831 || (otherRec.sym__0___45_1392082682984030572 != sym__0___45_1392082682984030572 || (otherRec.sym__0__4079042978325159356 != sym__0__4079042978325159356 || (otherRec.sym__0___45_8740031086835334902 != sym__0___45_8740031086835334902 || (otherRec.sym__0__7160637419916814077 != sym__0__7160637419916814077 || (otherRec.sym__0__6771428984043356648 != sym__0__6771428984043356648 || (otherRec.sym__0___45_2925961550438625120 != sym__0___45_2925961550438625120 || (otherRec.sym__0___45_5167274928602864399 != sym__0___45_5167274928602864399 || (otherRec.sym__0___45_1196774764746194727 != sym__0___45_1196774764746194727 || (otherRec.sym__0__2350012532823100403 != sym__0__2350012532823100403 || (otherRec.sym__0___45_6131451972505023264 != sym__0___45_6131451972505023264 || (otherRec.sym__0__991154100797386954 != sym__0__991154100797386954 || (otherRec.sym__0__8646118378949802466 != sym__0__8646118378949802466 || (otherRec.sym__0___45_6790625202795336188 != sym__0___45_6790625202795336188 || (otherRec.sym__0__3529872977186491051 != sym__0__3529872977186491051 || (otherRec.sym__0__4603393127449354742 != sym__0__4603393127449354742 || (otherRec.sym__0__8626210361282297643 != sym__0__8626210361282297643 || (otherRec.sym__0___45_6066645379240687263 != sym__0___45_6066645379240687263 || (otherRec.sym__0___45_3161866226707105950 != sym__0___45_3161866226707105950 || (otherRec.sym__0___45_4768716247113050606 != sym__0___45_4768716247113050606 || (otherRec.sym__0___45_8475820954227687200 != sym__0___45_8475820954227687200 || (otherRec.sym__0__7627836797074738390 != sym__0__7627836797074738390 || (otherRec.sym__0__7140269753477798136 != sym__0__7140269753477798136 || (otherRec.sym__0___45_3655337267794821636 != sym__0___45_3655337267794821636 || (otherRec.sym__0___45_1056966419661133721 != sym__0___45_1056966419661133721 || (otherRec.sym__0___45_8703794242078256459 != sym__0___45_8703794242078256459 || (otherRec.sym__0__883728790171705997 != sym__0__883728790171705997 || (otherRec.sym__0___45_96225719667877789 != sym__0___45_96225719667877789 || (otherRec.sym__0__6947163674604440172 != sym__0__6947163674604440172 || (otherRec.sym__0__1952885841380518654 != sym__0__1952885841380518654 || (otherRec.sym__0__7423004607806069504 != sym__0__7423004607806069504 || (otherRec.sym__0__652266665826131714 != sym__0__652266665826131714 || (otherRec.sym__0__8085482155815911167 != sym__0__8085482155815911167 || otherRec.sym__0__7812946840234747372 != sym__0__7812946840234747372))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0___45_7598124729681409484;
  fluidb_string<18> sym__0___45_6275087891601043380;
  fluidb_string<40> sym__0__4314826987601357414;
  fluidb_string<11> sym__0___45_559827363703454640;
  fluidb_string<15> sym__0___45_7373215701745101718;
  fluidb_string<13> sym__0___45_558465814984613097;
  fluidb_string<15> sym__0___45_2923739264729622324;
  fluidb_string<21> sym__0__6742315409954192616;
  unsigned sym__0__5806512644287066780;
  fluidb_string<18> sym__0___45_1075623252194402676;
  fluidb_string<9> sym__0__1318757177840667394;
  fluidb_string<9> sym__0___45_1077445974220605987;
  unsigned sym__0___45_4186919936531085605;
  unsigned sym__0__8923568548338736173;
  fluidb_string<7> sym__0__9092600113099988980;
  unsigned sym__0__6491208688756492831;
  unsigned sym__0___45_1392082682984030572;
  unsigned sym__0__4079042978325159356;
  unsigned sym__0___45_8740031086835334902;
  unsigned sym__0__7160637419916814077;
  fluidb_string<15> sym__0__6771428984043356648;
  fluidb_string<2> sym__0___45_2925961550438625120;
  fluidb_string<2> sym__0___45_5167274928602864399;
  fluidb_string<2> sym__0___45_1196774764746194727;
  fluidb_string<2> sym__0__2350012532823100403;
  unsigned sym__0___45_6131451972505023264;
  int sym__0__991154100797386954;
  unsigned sym__0__8646118378949802466;
  unsigned sym__0___45_6790625202795336188;
  unsigned sym__0__3529872977186491051;
  unsigned sym__0__4603393127449354742;
  fluidb_string<21> sym__0__8626210361282297643;
  unsigned sym__0___45_6066645379240687263;
  fluidb_string<10> sym__0___45_3161866226707105950;
  unsigned sym__0___45_4768716247113050606;
  double sym__0___45_8475820954227687200;
  unsigned sym__0__7627836797074738390;
  double sym__0__7140269753477798136;
  unsigned sym__0___45_3655337267794821636;
  unsigned sym__0___45_1056966419661133721;
  double sym__0___45_8703794242078256459;
  fluidb_string<13> sym__0__883728790171705997;
  unsigned sym__0___45_96225719667877789;
  fluidb_string<25> sym__0__6947163674604440172;
  fluidb_string<40> sym__0__1952885841380518654;
  fluidb_string<16> sym__0__7423004607806069504;
  fluidb_string<16> sym__0__652266665826131714;
  fluidb_string<13> sym__0__8085482155815911167;
  fluidb_string<15> sym__0__7812946840234747372;
 private:
};


class Record7 {
 public:
  Record7(unsigned __sym__0__6788816903655988913, fluidb_string<18> __sym__0___45_1347440667519359799, fluidb_string<40> __sym__0___45_4542379246732314449, fluidb_string<11> __sym__0___45_8819033268425913563, fluidb_string<15> __sym__0__2845435830448850187, fluidb_string<13> __sym__0__2283134718654851022, fluidb_string<15> __sym__0___45_4371919582748517815, fluidb_string<21> __sym__0__5363677931239515133, unsigned __sym__0___45_3951772641114777319, fluidb_string<18> __sym__0__2487757823460599049, fluidb_string<9> __sym__0__8207680460842400163, fluidb_string<9> __sym__0__5106867389967728072, unsigned __sym__0__4537256206012270394, unsigned __sym__0___45_7492773436797212328, fluidb_string<7> __sym__0__8930798155190264433, unsigned __sym__0___45_7841514043100819754, unsigned __sym__0__3424679867595597073, unsigned __sym__0__2508689542106898233, unsigned __sym__0__653800586811768747, unsigned __sym__0___45_3636220220917582872, fluidb_string<15> __sym__0__1376418398435325181, fluidb_string<2> __sym__0__5400460126833575861, fluidb_string<2> __sym__0___45_7337675022008572556, fluidb_string<2> __sym__0___45_3020700151630970532, fluidb_string<2> __sym__0___45_4613837501652689582, unsigned __sym__0___45_2232865500123347723, int __sym__0__3632615727897813355, unsigned __sym__0__4164382203488992131, unsigned __sym__0___45_4555125911490645375, unsigned __sym__0__7181346608473676810, unsigned __sym__0__1900482538596630079, fluidb_string<21> __sym__0___45_7412103558781043318, unsigned __sym__0___45_4898806069191313436, fluidb_string<10> __sym__0___45_8718516711131880445, unsigned __sym__0___45_4606156038441876301, double __sym__0___45_4208524183868122891, unsigned __sym__0__5342690107208435743, double __sym__0___45_8865157480059498547, unsigned __sym__0___45_3757507420872392583, unsigned __sym__0___45_3051093161121097122, double __sym__0___45_5623713975455060064, fluidb_string<13> __sym__0__2412567162023865016, unsigned __sym__0___45_8896996987027280958, fluidb_string<25> __sym__0___45_2738273092843270679, fluidb_string<40> __sym__0___45_4219571276328813817, fluidb_string<16> __sym__0__4216868589223431701, fluidb_string<16> __sym__0___45_1785298300423205469, fluidb_string<13> __sym__0___45_3017761345955782474, fluidb_string<15> __sym__0__1815749432774723689) : sym__0__6788816903655988913(__sym__0__6788816903655988913), sym__0___45_1347440667519359799(__sym__0___45_1347440667519359799), sym__0___45_4542379246732314449(__sym__0___45_4542379246732314449), sym__0___45_8819033268425913563(__sym__0___45_8819033268425913563), sym__0__2845435830448850187(__sym__0__2845435830448850187), sym__0__2283134718654851022(__sym__0__2283134718654851022), sym__0___45_4371919582748517815(__sym__0___45_4371919582748517815), sym__0__5363677931239515133(__sym__0__5363677931239515133), sym__0___45_3951772641114777319(__sym__0___45_3951772641114777319), sym__0__2487757823460599049(__sym__0__2487757823460599049), sym__0__8207680460842400163(__sym__0__8207680460842400163), sym__0__5106867389967728072(__sym__0__5106867389967728072), sym__0__4537256206012270394(__sym__0__4537256206012270394), sym__0___45_7492773436797212328(__sym__0___45_7492773436797212328), sym__0__8930798155190264433(__sym__0__8930798155190264433), sym__0___45_7841514043100819754(__sym__0___45_7841514043100819754), sym__0__3424679867595597073(__sym__0__3424679867595597073), sym__0__2508689542106898233(__sym__0__2508689542106898233), sym__0__653800586811768747(__sym__0__653800586811768747), sym__0___45_3636220220917582872(__sym__0___45_3636220220917582872), sym__0__1376418398435325181(__sym__0__1376418398435325181), sym__0__5400460126833575861(__sym__0__5400460126833575861), sym__0___45_7337675022008572556(__sym__0___45_7337675022008572556), sym__0___45_3020700151630970532(__sym__0___45_3020700151630970532), sym__0___45_4613837501652689582(__sym__0___45_4613837501652689582), sym__0___45_2232865500123347723(__sym__0___45_2232865500123347723), sym__0__3632615727897813355(__sym__0__3632615727897813355), sym__0__4164382203488992131(__sym__0__4164382203488992131), sym__0___45_4555125911490645375(__sym__0___45_4555125911490645375), sym__0__7181346608473676810(__sym__0__7181346608473676810), sym__0__1900482538596630079(__sym__0__1900482538596630079), sym__0___45_7412103558781043318(__sym__0___45_7412103558781043318), sym__0___45_4898806069191313436(__sym__0___45_4898806069191313436), sym__0___45_8718516711131880445(__sym__0___45_8718516711131880445), sym__0___45_4606156038441876301(__sym__0___45_4606156038441876301), sym__0___45_4208524183868122891(__sym__0___45_4208524183868122891), sym__0__5342690107208435743(__sym__0__5342690107208435743), sym__0___45_8865157480059498547(__sym__0___45_8865157480059498547), sym__0___45_3757507420872392583(__sym__0___45_3757507420872392583), sym__0___45_3051093161121097122(__sym__0___45_3051093161121097122), sym__0___45_5623713975455060064(__sym__0___45_5623713975455060064), sym__0__2412567162023865016(__sym__0__2412567162023865016), sym__0___45_8896996987027280958(__sym__0___45_8896996987027280958), sym__0___45_2738273092843270679(__sym__0___45_2738273092843270679), sym__0___45_4219571276328813817(__sym__0___45_4219571276328813817), sym__0__4216868589223431701(__sym__0__4216868589223431701), sym__0___45_1785298300423205469(__sym__0___45_1785298300423205469), sym__0___45_3017761345955782474(__sym__0___45_3017761345955782474), sym__0__1815749432774723689(__sym__0__1815749432774723689)
  {
  }
  Record7() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__6788816903655988913 << " | " << arrToString(sym__0___45_1347440667519359799) << " | " << arrToString(sym__0___45_4542379246732314449) << " | " << arrToString(sym__0___45_8819033268425913563) << " | " << arrToString(sym__0__2845435830448850187) << " | " << arrToString(sym__0__2283134718654851022) << " | " << arrToString(sym__0___45_4371919582748517815) << " | " << arrToString(sym__0__5363677931239515133) << " | " << sym__0___45_3951772641114777319 << " | " << arrToString(sym__0__2487757823460599049) << " | " << arrToString(sym__0__8207680460842400163) << " | " << arrToString(sym__0__5106867389967728072) << " | " << sym__0__4537256206012270394 << " | " << sym__0___45_7492773436797212328 << " | " << arrToString(sym__0__8930798155190264433) << " | " << sym__0___45_7841514043100819754 << " | " << sym__0__3424679867595597073 << " | " << sym__0__2508689542106898233 << " | " << sym__0__653800586811768747 << " | " << sym__0___45_3636220220917582872 << " | " << arrToString(sym__0__1376418398435325181) << " | " << arrToString(sym__0__5400460126833575861) << " | " << arrToString(sym__0___45_7337675022008572556) << " | " << arrToString(sym__0___45_3020700151630970532) << " | " << arrToString(sym__0___45_4613837501652689582) << " | " << sym__0___45_2232865500123347723 << " | " << sym__0__3632615727897813355 << " | " << sym__0__4164382203488992131 << " | " << sym__0___45_4555125911490645375 << " | " << sym__0__7181346608473676810 << " | " << sym__0__1900482538596630079 << " | " << arrToString(sym__0___45_7412103558781043318) << " | " << sym__0___45_4898806069191313436 << " | " << arrToString(sym__0___45_8718516711131880445) << " | " << sym__0___45_4606156038441876301 << " | " << sym__0___45_4208524183868122891 << " | " << sym__0__5342690107208435743 << " | " << sym__0___45_8865157480059498547 << " | " << sym__0___45_3757507420872392583 << " | " << sym__0___45_3051093161121097122 << " | " << sym__0___45_5623713975455060064 << " | " << arrToString(sym__0__2412567162023865016) << " | " << sym__0___45_8896996987027280958 << " | " << arrToString(sym__0___45_2738273092843270679) << " | " << arrToString(sym__0___45_4219571276328813817) << " | " << arrToString(sym__0__4216868589223431701) << " | " << arrToString(sym__0___45_1785298300423205469) << " | " << arrToString(sym__0___45_3017761345955782474) << " | " << arrToString(sym__0__1815749432774723689);
    return o.str();
  }
  bool operator <(const Record7& otherRec) const{
    return (otherRec.sym__0__6788816903655988913 < sym__0__6788816903655988913 && (otherRec.sym__0___45_1347440667519359799 < sym__0___45_1347440667519359799 && (otherRec.sym__0___45_4542379246732314449 < sym__0___45_4542379246732314449 && (otherRec.sym__0___45_8819033268425913563 < sym__0___45_8819033268425913563 && (otherRec.sym__0__2845435830448850187 < sym__0__2845435830448850187 && (otherRec.sym__0__2283134718654851022 < sym__0__2283134718654851022 && (otherRec.sym__0___45_4371919582748517815 < sym__0___45_4371919582748517815 && (otherRec.sym__0__5363677931239515133 < sym__0__5363677931239515133 && (otherRec.sym__0___45_3951772641114777319 < sym__0___45_3951772641114777319 && (otherRec.sym__0__2487757823460599049 < sym__0__2487757823460599049 && (otherRec.sym__0__8207680460842400163 < sym__0__8207680460842400163 && (otherRec.sym__0__5106867389967728072 < sym__0__5106867389967728072 && (otherRec.sym__0__4537256206012270394 < sym__0__4537256206012270394 && (otherRec.sym__0___45_7492773436797212328 < sym__0___45_7492773436797212328 && (otherRec.sym__0__8930798155190264433 < sym__0__8930798155190264433 && (otherRec.sym__0___45_7841514043100819754 < sym__0___45_7841514043100819754 && (otherRec.sym__0__3424679867595597073 < sym__0__3424679867595597073 && (otherRec.sym__0__2508689542106898233 < sym__0__2508689542106898233 && (otherRec.sym__0__653800586811768747 < sym__0__653800586811768747 && (otherRec.sym__0___45_3636220220917582872 < sym__0___45_3636220220917582872 && (otherRec.sym__0__1376418398435325181 < sym__0__1376418398435325181 && (otherRec.sym__0__5400460126833575861 < sym__0__5400460126833575861 && (otherRec.sym__0___45_7337675022008572556 < sym__0___45_7337675022008572556 && (otherRec.sym__0___45_3020700151630970532 < sym__0___45_3020700151630970532 && (otherRec.sym__0___45_4613837501652689582 < sym__0___45_4613837501652689582 && (otherRec.sym__0___45_2232865500123347723 < sym__0___45_2232865500123347723 && (otherRec.sym__0__3632615727897813355 < sym__0__3632615727897813355 && (otherRec.sym__0__4164382203488992131 < sym__0__4164382203488992131 && (otherRec.sym__0___45_4555125911490645375 < sym__0___45_4555125911490645375 && (otherRec.sym__0__7181346608473676810 < sym__0__7181346608473676810 && (otherRec.sym__0__1900482538596630079 < sym__0__1900482538596630079 && (otherRec.sym__0___45_7412103558781043318 < sym__0___45_7412103558781043318 && (otherRec.sym__0___45_4898806069191313436 < sym__0___45_4898806069191313436 && (otherRec.sym__0___45_8718516711131880445 < sym__0___45_8718516711131880445 && (otherRec.sym__0___45_4606156038441876301 < sym__0___45_4606156038441876301 && (otherRec.sym__0___45_4208524183868122891 < sym__0___45_4208524183868122891 && (otherRec.sym__0__5342690107208435743 < sym__0__5342690107208435743 && (otherRec.sym__0___45_8865157480059498547 < sym__0___45_8865157480059498547 && (otherRec.sym__0___45_3757507420872392583 < sym__0___45_3757507420872392583 && (otherRec.sym__0___45_3051093161121097122 < sym__0___45_3051093161121097122 && (otherRec.sym__0___45_5623713975455060064 < sym__0___45_5623713975455060064 && (otherRec.sym__0__2412567162023865016 < sym__0__2412567162023865016 && (otherRec.sym__0___45_8896996987027280958 < sym__0___45_8896996987027280958 && (otherRec.sym__0___45_2738273092843270679 < sym__0___45_2738273092843270679 && (otherRec.sym__0___45_4219571276328813817 < sym__0___45_4219571276328813817 && (otherRec.sym__0__4216868589223431701 < sym__0__4216868589223431701 && (otherRec.sym__0___45_1785298300423205469 < sym__0___45_1785298300423205469 && (otherRec.sym__0___45_3017761345955782474 < sym__0___45_3017761345955782474 && otherRec.sym__0__1815749432774723689 < sym__0__1815749432774723689))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record7& otherRec) const{
    return (otherRec.sym__0__6788816903655988913 == sym__0__6788816903655988913 && (otherRec.sym__0___45_1347440667519359799 == sym__0___45_1347440667519359799 && (otherRec.sym__0___45_4542379246732314449 == sym__0___45_4542379246732314449 && (otherRec.sym__0___45_8819033268425913563 == sym__0___45_8819033268425913563 && (otherRec.sym__0__2845435830448850187 == sym__0__2845435830448850187 && (otherRec.sym__0__2283134718654851022 == sym__0__2283134718654851022 && (otherRec.sym__0___45_4371919582748517815 == sym__0___45_4371919582748517815 && (otherRec.sym__0__5363677931239515133 == sym__0__5363677931239515133 && (otherRec.sym__0___45_3951772641114777319 == sym__0___45_3951772641114777319 && (otherRec.sym__0__2487757823460599049 == sym__0__2487757823460599049 && (otherRec.sym__0__8207680460842400163 == sym__0__8207680460842400163 && (otherRec.sym__0__5106867389967728072 == sym__0__5106867389967728072 && (otherRec.sym__0__4537256206012270394 == sym__0__4537256206012270394 && (otherRec.sym__0___45_7492773436797212328 == sym__0___45_7492773436797212328 && (otherRec.sym__0__8930798155190264433 == sym__0__8930798155190264433 && (otherRec.sym__0___45_7841514043100819754 == sym__0___45_7841514043100819754 && (otherRec.sym__0__3424679867595597073 == sym__0__3424679867595597073 && (otherRec.sym__0__2508689542106898233 == sym__0__2508689542106898233 && (otherRec.sym__0__653800586811768747 == sym__0__653800586811768747 && (otherRec.sym__0___45_3636220220917582872 == sym__0___45_3636220220917582872 && (otherRec.sym__0__1376418398435325181 == sym__0__1376418398435325181 && (otherRec.sym__0__5400460126833575861 == sym__0__5400460126833575861 && (otherRec.sym__0___45_7337675022008572556 == sym__0___45_7337675022008572556 && (otherRec.sym__0___45_3020700151630970532 == sym__0___45_3020700151630970532 && (otherRec.sym__0___45_4613837501652689582 == sym__0___45_4613837501652689582 && (otherRec.sym__0___45_2232865500123347723 == sym__0___45_2232865500123347723 && (otherRec.sym__0__3632615727897813355 == sym__0__3632615727897813355 && (otherRec.sym__0__4164382203488992131 == sym__0__4164382203488992131 && (otherRec.sym__0___45_4555125911490645375 == sym__0___45_4555125911490645375 && (otherRec.sym__0__7181346608473676810 == sym__0__7181346608473676810 && (otherRec.sym__0__1900482538596630079 == sym__0__1900482538596630079 && (otherRec.sym__0___45_7412103558781043318 == sym__0___45_7412103558781043318 && (otherRec.sym__0___45_4898806069191313436 == sym__0___45_4898806069191313436 && (otherRec.sym__0___45_8718516711131880445 == sym__0___45_8718516711131880445 && (otherRec.sym__0___45_4606156038441876301 == sym__0___45_4606156038441876301 && (otherRec.sym__0___45_4208524183868122891 == sym__0___45_4208524183868122891 && (otherRec.sym__0__5342690107208435743 == sym__0__5342690107208435743 && (otherRec.sym__0___45_8865157480059498547 == sym__0___45_8865157480059498547 && (otherRec.sym__0___45_3757507420872392583 == sym__0___45_3757507420872392583 && (otherRec.sym__0___45_3051093161121097122 == sym__0___45_3051093161121097122 && (otherRec.sym__0___45_5623713975455060064 == sym__0___45_5623713975455060064 && (otherRec.sym__0__2412567162023865016 == sym__0__2412567162023865016 && (otherRec.sym__0___45_8896996987027280958 == sym__0___45_8896996987027280958 && (otherRec.sym__0___45_2738273092843270679 == sym__0___45_2738273092843270679 && (otherRec.sym__0___45_4219571276328813817 == sym__0___45_4219571276328813817 && (otherRec.sym__0__4216868589223431701 == sym__0__4216868589223431701 && (otherRec.sym__0___45_1785298300423205469 == sym__0___45_1785298300423205469 && (otherRec.sym__0___45_3017761345955782474 == sym__0___45_3017761345955782474 && otherRec.sym__0__1815749432774723689 == sym__0__1815749432774723689))))))))))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record7& otherRec) const{
    return (otherRec.sym__0__6788816903655988913 != sym__0__6788816903655988913 || (otherRec.sym__0___45_1347440667519359799 != sym__0___45_1347440667519359799 || (otherRec.sym__0___45_4542379246732314449 != sym__0___45_4542379246732314449 || (otherRec.sym__0___45_8819033268425913563 != sym__0___45_8819033268425913563 || (otherRec.sym__0__2845435830448850187 != sym__0__2845435830448850187 || (otherRec.sym__0__2283134718654851022 != sym__0__2283134718654851022 || (otherRec.sym__0___45_4371919582748517815 != sym__0___45_4371919582748517815 || (otherRec.sym__0__5363677931239515133 != sym__0__5363677931239515133 || (otherRec.sym__0___45_3951772641114777319 != sym__0___45_3951772641114777319 || (otherRec.sym__0__2487757823460599049 != sym__0__2487757823460599049 || (otherRec.sym__0__8207680460842400163 != sym__0__8207680460842400163 || (otherRec.sym__0__5106867389967728072 != sym__0__5106867389967728072 || (otherRec.sym__0__4537256206012270394 != sym__0__4537256206012270394 || (otherRec.sym__0___45_7492773436797212328 != sym__0___45_7492773436797212328 || (otherRec.sym__0__8930798155190264433 != sym__0__8930798155190264433 || (otherRec.sym__0___45_7841514043100819754 != sym__0___45_7841514043100819754 || (otherRec.sym__0__3424679867595597073 != sym__0__3424679867595597073 || (otherRec.sym__0__2508689542106898233 != sym__0__2508689542106898233 || (otherRec.sym__0__653800586811768747 != sym__0__653800586811768747 || (otherRec.sym__0___45_3636220220917582872 != sym__0___45_3636220220917582872 || (otherRec.sym__0__1376418398435325181 != sym__0__1376418398435325181 || (otherRec.sym__0__5400460126833575861 != sym__0__5400460126833575861 || (otherRec.sym__0___45_7337675022008572556 != sym__0___45_7337675022008572556 || (otherRec.sym__0___45_3020700151630970532 != sym__0___45_3020700151630970532 || (otherRec.sym__0___45_4613837501652689582 != sym__0___45_4613837501652689582 || (otherRec.sym__0___45_2232865500123347723 != sym__0___45_2232865500123347723 || (otherRec.sym__0__3632615727897813355 != sym__0__3632615727897813355 || (otherRec.sym__0__4164382203488992131 != sym__0__4164382203488992131 || (otherRec.sym__0___45_4555125911490645375 != sym__0___45_4555125911490645375 || (otherRec.sym__0__7181346608473676810 != sym__0__7181346608473676810 || (otherRec.sym__0__1900482538596630079 != sym__0__1900482538596630079 || (otherRec.sym__0___45_7412103558781043318 != sym__0___45_7412103558781043318 || (otherRec.sym__0___45_4898806069191313436 != sym__0___45_4898806069191313436 || (otherRec.sym__0___45_8718516711131880445 != sym__0___45_8718516711131880445 || (otherRec.sym__0___45_4606156038441876301 != sym__0___45_4606156038441876301 || (otherRec.sym__0___45_4208524183868122891 != sym__0___45_4208524183868122891 || (otherRec.sym__0__5342690107208435743 != sym__0__5342690107208435743 || (otherRec.sym__0___45_8865157480059498547 != sym__0___45_8865157480059498547 || (otherRec.sym__0___45_3757507420872392583 != sym__0___45_3757507420872392583 || (otherRec.sym__0___45_3051093161121097122 != sym__0___45_3051093161121097122 || (otherRec.sym__0___45_5623713975455060064 != sym__0___45_5623713975455060064 || (otherRec.sym__0__2412567162023865016 != sym__0__2412567162023865016 || (otherRec.sym__0___45_8896996987027280958 != sym__0___45_8896996987027280958 || (otherRec.sym__0___45_2738273092843270679 != sym__0___45_2738273092843270679 || (otherRec.sym__0___45_4219571276328813817 != sym__0___45_4219571276328813817 || (otherRec.sym__0__4216868589223431701 != sym__0__4216868589223431701 || (otherRec.sym__0___45_1785298300423205469 != sym__0___45_1785298300423205469 || (otherRec.sym__0___45_3017761345955782474 != sym__0___45_3017761345955782474 || otherRec.sym__0__1815749432774723689 != sym__0__1815749432774723689))))))))))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__6788816903655988913;
  fluidb_string<18> sym__0___45_1347440667519359799;
  fluidb_string<40> sym__0___45_4542379246732314449;
  fluidb_string<11> sym__0___45_8819033268425913563;
  fluidb_string<15> sym__0__2845435830448850187;
  fluidb_string<13> sym__0__2283134718654851022;
  fluidb_string<15> sym__0___45_4371919582748517815;
  fluidb_string<21> sym__0__5363677931239515133;
  unsigned sym__0___45_3951772641114777319;
  fluidb_string<18> sym__0__2487757823460599049;
  fluidb_string<9> sym__0__8207680460842400163;
  fluidb_string<9> sym__0__5106867389967728072;
  unsigned sym__0__4537256206012270394;
  unsigned sym__0___45_7492773436797212328;
  fluidb_string<7> sym__0__8930798155190264433;
  unsigned sym__0___45_7841514043100819754;
  unsigned sym__0__3424679867595597073;
  unsigned sym__0__2508689542106898233;
  unsigned sym__0__653800586811768747;
  unsigned sym__0___45_3636220220917582872;
  fluidb_string<15> sym__0__1376418398435325181;
  fluidb_string<2> sym__0__5400460126833575861;
  fluidb_string<2> sym__0___45_7337675022008572556;
  fluidb_string<2> sym__0___45_3020700151630970532;
  fluidb_string<2> sym__0___45_4613837501652689582;
  unsigned sym__0___45_2232865500123347723;
  int sym__0__3632615727897813355;
  unsigned sym__0__4164382203488992131;
  unsigned sym__0___45_4555125911490645375;
  unsigned sym__0__7181346608473676810;
  unsigned sym__0__1900482538596630079;
  fluidb_string<21> sym__0___45_7412103558781043318;
  unsigned sym__0___45_4898806069191313436;
  fluidb_string<10> sym__0___45_8718516711131880445;
  unsigned sym__0___45_4606156038441876301;
  double sym__0___45_4208524183868122891;
  unsigned sym__0__5342690107208435743;
  double sym__0___45_8865157480059498547;
  unsigned sym__0___45_3757507420872392583;
  unsigned sym__0___45_3051093161121097122;
  double sym__0___45_5623713975455060064;
  fluidb_string<13> sym__0__2412567162023865016;
  unsigned sym__0___45_8896996987027280958;
  fluidb_string<25> sym__0___45_2738273092843270679;
  fluidb_string<40> sym__0___45_4219571276328813817;
  fluidb_string<16> sym__0__4216868589223431701;
  fluidb_string<16> sym__0___45_1785298300423205469;
  fluidb_string<13> sym__0___45_3017761345955782474;
  fluidb_string<15> sym__0__1815749432774723689;
 private:
};


class Record17 {
 public:
  Record17(fluidb_string<11> __sym__0___45_4197530418113816388, fluidb_string<16> __sym__0___45_8900315107970365684, unsigned __sym__0__439601008034082421, unsigned __sym__0__6124260730402362477) : sym__0___45_4197530418113816388(__sym__0___45_4197530418113816388), sym__0___45_8900315107970365684(__sym__0___45_8900315107970365684), sym__0__439601008034082421(__sym__0__439601008034082421), sym__0__6124260730402362477(__sym__0__6124260730402362477)
  {
  }
  Record17() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << arrToString(sym__0___45_4197530418113816388) << " | " << arrToString(sym__0___45_8900315107970365684) << " | " << sym__0__439601008034082421 << " | " << sym__0__6124260730402362477;
    return o.str();
  }
  bool operator <(const Record17& otherRec) const{
    return (otherRec.sym__0___45_4197530418113816388 < sym__0___45_4197530418113816388 && (otherRec.sym__0___45_8900315107970365684 < sym__0___45_8900315107970365684 && (otherRec.sym__0__439601008034082421 < sym__0__439601008034082421 && otherRec.sym__0__6124260730402362477 < sym__0__6124260730402362477)));
  }
  bool operator ==(const Record17& otherRec) const{
    return (otherRec.sym__0___45_4197530418113816388 == sym__0___45_4197530418113816388 && (otherRec.sym__0___45_8900315107970365684 == sym__0___45_8900315107970365684 && (otherRec.sym__0__439601008034082421 == sym__0__439601008034082421 && otherRec.sym__0__6124260730402362477 == sym__0__6124260730402362477)));
  }
  bool operator !=(const Record17& otherRec) const{
    return (otherRec.sym__0___45_4197530418113816388 != sym__0___45_4197530418113816388 || (otherRec.sym__0___45_8900315107970365684 != sym__0___45_8900315107970365684 || (otherRec.sym__0__439601008034082421 != sym__0__439601008034082421 || otherRec.sym__0__6124260730402362477 != sym__0__6124260730402362477)));
  }
  fluidb_string<11> sym__0___45_4197530418113816388;
  fluidb_string<16> sym__0___45_8900315107970365684;
  unsigned sym__0__439601008034082421;
  unsigned sym__0__6124260730402362477;
 private:
};


class Record1 {
 public:
  Record1(unsigned __sym__0__5373426235047388566, fluidb_string<18> __sym__0__2677149988632781646, fluidb_string<40> __sym__0__3230501947603702676, fluidb_string<11> __sym__0___45_7504312298840290590, fluidb_string<15> __sym__0__142765961647840520, fluidb_string<13> __sym__0___45_890986601021018327, fluidb_string<15> __sym__0__1448529583206195662, fluidb_string<21> __sym__0__2570343804236594778, unsigned __sym__0__1359507712116914494, fluidb_string<18> __sym__0__6011849395894522126, fluidb_string<9> __sym__0___45_7468776379460950944, fluidb_string<9> __sym__0___45_8794687169050633757, unsigned __sym__0___45_6203473563316140867, unsigned __sym__0___45_677371798856704365, fluidb_string<7> __sym__0__915473005346690518, unsigned __sym__0__6004818342855880465, unsigned __sym__0___45_7479113260177362442, unsigned __sym__0___45_7892661382758597666, unsigned __sym__0___45_5779290218296092888, unsigned __sym__0__39182466228154115, fluidb_string<15> __sym__0___45_6428352846240480422, fluidb_string<2> __sym__0__5771061490590798674, fluidb_string<2> __sym__0__5176922323272081847, fluidb_string<2> __sym__0__3439791191136335327, fluidb_string<2> __sym__0__9000735294801606101, unsigned __sym__0___45_4937244029492686830, int __sym__0___45_4662405569626189464, unsigned __sym__0__5296351127385819968, unsigned __sym__0__3188754882683964806, unsigned __sym__0__4353034828577292717, unsigned __sym__0___45_7269132014943876604, fluidb_string<21> __sym__0__2678892183314537005, unsigned __sym__0__4170008532883495879, fluidb_string<10> __sym__0___45_4375206156149434176, unsigned __sym__0__697181792988283792, double __sym__0__2425070607436168210, unsigned __sym__0___45_8099035356149320476, double __sym__0___45_1189046714177700278, unsigned __sym__0___45_7692406820437109602, unsigned __sym__0__4206086254272971481, double __sym__0___45_2483348542730046437, fluidb_string<13> __sym__0___45_762363192294171021) : sym__0__5373426235047388566(__sym__0__5373426235047388566), sym__0__2677149988632781646(__sym__0__2677149988632781646), sym__0__3230501947603702676(__sym__0__3230501947603702676), sym__0___45_7504312298840290590(__sym__0___45_7504312298840290590), sym__0__142765961647840520(__sym__0__142765961647840520), sym__0___45_890986601021018327(__sym__0___45_890986601021018327), sym__0__1448529583206195662(__sym__0__1448529583206195662), sym__0__2570343804236594778(__sym__0__2570343804236594778), sym__0__1359507712116914494(__sym__0__1359507712116914494), sym__0__6011849395894522126(__sym__0__6011849395894522126), sym__0___45_7468776379460950944(__sym__0___45_7468776379460950944), sym__0___45_8794687169050633757(__sym__0___45_8794687169050633757), sym__0___45_6203473563316140867(__sym__0___45_6203473563316140867), sym__0___45_677371798856704365(__sym__0___45_677371798856704365), sym__0__915473005346690518(__sym__0__915473005346690518), sym__0__6004818342855880465(__sym__0__6004818342855880465), sym__0___45_7479113260177362442(__sym__0___45_7479113260177362442), sym__0___45_7892661382758597666(__sym__0___45_7892661382758597666), sym__0___45_5779290218296092888(__sym__0___45_5779290218296092888), sym__0__39182466228154115(__sym__0__39182466228154115), sym__0___45_6428352846240480422(__sym__0___45_6428352846240480422), sym__0__5771061490590798674(__sym__0__5771061490590798674), sym__0__5176922323272081847(__sym__0__5176922323272081847), sym__0__3439791191136335327(__sym__0__3439791191136335327), sym__0__9000735294801606101(__sym__0__9000735294801606101), sym__0___45_4937244029492686830(__sym__0___45_4937244029492686830), sym__0___45_4662405569626189464(__sym__0___45_4662405569626189464), sym__0__5296351127385819968(__sym__0__5296351127385819968), sym__0__3188754882683964806(__sym__0__3188754882683964806), sym__0__4353034828577292717(__sym__0__4353034828577292717), sym__0___45_7269132014943876604(__sym__0___45_7269132014943876604), sym__0__2678892183314537005(__sym__0__2678892183314537005), sym__0__4170008532883495879(__sym__0__4170008532883495879), sym__0___45_4375206156149434176(__sym__0___45_4375206156149434176), sym__0__697181792988283792(__sym__0__697181792988283792), sym__0__2425070607436168210(__sym__0__2425070607436168210), sym__0___45_8099035356149320476(__sym__0___45_8099035356149320476), sym__0___45_1189046714177700278(__sym__0___45_1189046714177700278), sym__0___45_7692406820437109602(__sym__0___45_7692406820437109602), sym__0__4206086254272971481(__sym__0__4206086254272971481), sym__0___45_2483348542730046437(__sym__0___45_2483348542730046437), sym__0___45_762363192294171021(__sym__0___45_762363192294171021)
  {
  }
  Record1() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0__5373426235047388566 << " | " << arrToString(sym__0__2677149988632781646) << " | " << arrToString(sym__0__3230501947603702676) << " | " << arrToString(sym__0___45_7504312298840290590) << " | " << arrToString(sym__0__142765961647840520) << " | " << arrToString(sym__0___45_890986601021018327) << " | " << arrToString(sym__0__1448529583206195662) << " | " << arrToString(sym__0__2570343804236594778) << " | " << sym__0__1359507712116914494 << " | " << arrToString(sym__0__6011849395894522126) << " | " << arrToString(sym__0___45_7468776379460950944) << " | " << arrToString(sym__0___45_8794687169050633757) << " | " << sym__0___45_6203473563316140867 << " | " << sym__0___45_677371798856704365 << " | " << arrToString(sym__0__915473005346690518) << " | " << sym__0__6004818342855880465 << " | " << sym__0___45_7479113260177362442 << " | " << sym__0___45_7892661382758597666 << " | " << sym__0___45_5779290218296092888 << " | " << sym__0__39182466228154115 << " | " << arrToString(sym__0___45_6428352846240480422) << " | " << arrToString(sym__0__5771061490590798674) << " | " << arrToString(sym__0__5176922323272081847) << " | " << arrToString(sym__0__3439791191136335327) << " | " << arrToString(sym__0__9000735294801606101) << " | " << sym__0___45_4937244029492686830 << " | " << sym__0___45_4662405569626189464 << " | " << sym__0__5296351127385819968 << " | " << sym__0__3188754882683964806 << " | " << sym__0__4353034828577292717 << " | " << sym__0___45_7269132014943876604 << " | " << arrToString(sym__0__2678892183314537005) << " | " << sym__0__4170008532883495879 << " | " << arrToString(sym__0___45_4375206156149434176) << " | " << sym__0__697181792988283792 << " | " << sym__0__2425070607436168210 << " | " << sym__0___45_8099035356149320476 << " | " << sym__0___45_1189046714177700278 << " | " << sym__0___45_7692406820437109602 << " | " << sym__0__4206086254272971481 << " | " << sym__0___45_2483348542730046437 << " | " << arrToString(sym__0___45_762363192294171021);
    return o.str();
  }
  bool operator <(const Record1& otherRec) const{
    return (otherRec.sym__0__5373426235047388566 < sym__0__5373426235047388566 && (otherRec.sym__0__2677149988632781646 < sym__0__2677149988632781646 && (otherRec.sym__0__3230501947603702676 < sym__0__3230501947603702676 && (otherRec.sym__0___45_7504312298840290590 < sym__0___45_7504312298840290590 && (otherRec.sym__0__142765961647840520 < sym__0__142765961647840520 && (otherRec.sym__0___45_890986601021018327 < sym__0___45_890986601021018327 && (otherRec.sym__0__1448529583206195662 < sym__0__1448529583206195662 && (otherRec.sym__0__2570343804236594778 < sym__0__2570343804236594778 && (otherRec.sym__0__1359507712116914494 < sym__0__1359507712116914494 && (otherRec.sym__0__6011849395894522126 < sym__0__6011849395894522126 && (otherRec.sym__0___45_7468776379460950944 < sym__0___45_7468776379460950944 && (otherRec.sym__0___45_8794687169050633757 < sym__0___45_8794687169050633757 && (otherRec.sym__0___45_6203473563316140867 < sym__0___45_6203473563316140867 && (otherRec.sym__0___45_677371798856704365 < sym__0___45_677371798856704365 && (otherRec.sym__0__915473005346690518 < sym__0__915473005346690518 && (otherRec.sym__0__6004818342855880465 < sym__0__6004818342855880465 && (otherRec.sym__0___45_7479113260177362442 < sym__0___45_7479113260177362442 && (otherRec.sym__0___45_7892661382758597666 < sym__0___45_7892661382758597666 && (otherRec.sym__0___45_5779290218296092888 < sym__0___45_5779290218296092888 && (otherRec.sym__0__39182466228154115 < sym__0__39182466228154115 && (otherRec.sym__0___45_6428352846240480422 < sym__0___45_6428352846240480422 && (otherRec.sym__0__5771061490590798674 < sym__0__5771061490590798674 && (otherRec.sym__0__5176922323272081847 < sym__0__5176922323272081847 && (otherRec.sym__0__3439791191136335327 < sym__0__3439791191136335327 && (otherRec.sym__0__9000735294801606101 < sym__0__9000735294801606101 && (otherRec.sym__0___45_4937244029492686830 < sym__0___45_4937244029492686830 && (otherRec.sym__0___45_4662405569626189464 < sym__0___45_4662405569626189464 && (otherRec.sym__0__5296351127385819968 < sym__0__5296351127385819968 && (otherRec.sym__0__3188754882683964806 < sym__0__3188754882683964806 && (otherRec.sym__0__4353034828577292717 < sym__0__4353034828577292717 && (otherRec.sym__0___45_7269132014943876604 < sym__0___45_7269132014943876604 && (otherRec.sym__0__2678892183314537005 < sym__0__2678892183314537005 && (otherRec.sym__0__4170008532883495879 < sym__0__4170008532883495879 && (otherRec.sym__0___45_4375206156149434176 < sym__0___45_4375206156149434176 && (otherRec.sym__0__697181792988283792 < sym__0__697181792988283792 && (otherRec.sym__0__2425070607436168210 < sym__0__2425070607436168210 && (otherRec.sym__0___45_8099035356149320476 < sym__0___45_8099035356149320476 && (otherRec.sym__0___45_1189046714177700278 < sym__0___45_1189046714177700278 && (otherRec.sym__0___45_7692406820437109602 < sym__0___45_7692406820437109602 && (otherRec.sym__0__4206086254272971481 < sym__0__4206086254272971481 && (otherRec.sym__0___45_2483348542730046437 < sym__0___45_2483348542730046437 && otherRec.sym__0___45_762363192294171021 < sym__0___45_762363192294171021)))))))))))))))))))))))))))))))))))))))));
  }
  bool operator ==(const Record1& otherRec) const{
    return (otherRec.sym__0__5373426235047388566 == sym__0__5373426235047388566 && (otherRec.sym__0__2677149988632781646 == sym__0__2677149988632781646 && (otherRec.sym__0__3230501947603702676 == sym__0__3230501947603702676 && (otherRec.sym__0___45_7504312298840290590 == sym__0___45_7504312298840290590 && (otherRec.sym__0__142765961647840520 == sym__0__142765961647840520 && (otherRec.sym__0___45_890986601021018327 == sym__0___45_890986601021018327 && (otherRec.sym__0__1448529583206195662 == sym__0__1448529583206195662 && (otherRec.sym__0__2570343804236594778 == sym__0__2570343804236594778 && (otherRec.sym__0__1359507712116914494 == sym__0__1359507712116914494 && (otherRec.sym__0__6011849395894522126 == sym__0__6011849395894522126 && (otherRec.sym__0___45_7468776379460950944 == sym__0___45_7468776379460950944 && (otherRec.sym__0___45_8794687169050633757 == sym__0___45_8794687169050633757 && (otherRec.sym__0___45_6203473563316140867 == sym__0___45_6203473563316140867 && (otherRec.sym__0___45_677371798856704365 == sym__0___45_677371798856704365 && (otherRec.sym__0__915473005346690518 == sym__0__915473005346690518 && (otherRec.sym__0__6004818342855880465 == sym__0__6004818342855880465 && (otherRec.sym__0___45_7479113260177362442 == sym__0___45_7479113260177362442 && (otherRec.sym__0___45_7892661382758597666 == sym__0___45_7892661382758597666 && (otherRec.sym__0___45_5779290218296092888 == sym__0___45_5779290218296092888 && (otherRec.sym__0__39182466228154115 == sym__0__39182466228154115 && (otherRec.sym__0___45_6428352846240480422 == sym__0___45_6428352846240480422 && (otherRec.sym__0__5771061490590798674 == sym__0__5771061490590798674 && (otherRec.sym__0__5176922323272081847 == sym__0__5176922323272081847 && (otherRec.sym__0__3439791191136335327 == sym__0__3439791191136335327 && (otherRec.sym__0__9000735294801606101 == sym__0__9000735294801606101 && (otherRec.sym__0___45_4937244029492686830 == sym__0___45_4937244029492686830 && (otherRec.sym__0___45_4662405569626189464 == sym__0___45_4662405569626189464 && (otherRec.sym__0__5296351127385819968 == sym__0__5296351127385819968 && (otherRec.sym__0__3188754882683964806 == sym__0__3188754882683964806 && (otherRec.sym__0__4353034828577292717 == sym__0__4353034828577292717 && (otherRec.sym__0___45_7269132014943876604 == sym__0___45_7269132014943876604 && (otherRec.sym__0__2678892183314537005 == sym__0__2678892183314537005 && (otherRec.sym__0__4170008532883495879 == sym__0__4170008532883495879 && (otherRec.sym__0___45_4375206156149434176 == sym__0___45_4375206156149434176 && (otherRec.sym__0__697181792988283792 == sym__0__697181792988283792 && (otherRec.sym__0__2425070607436168210 == sym__0__2425070607436168210 && (otherRec.sym__0___45_8099035356149320476 == sym__0___45_8099035356149320476 && (otherRec.sym__0___45_1189046714177700278 == sym__0___45_1189046714177700278 && (otherRec.sym__0___45_7692406820437109602 == sym__0___45_7692406820437109602 && (otherRec.sym__0__4206086254272971481 == sym__0__4206086254272971481 && (otherRec.sym__0___45_2483348542730046437 == sym__0___45_2483348542730046437 && otherRec.sym__0___45_762363192294171021 == sym__0___45_762363192294171021)))))))))))))))))))))))))))))))))))))))));
  }
  bool operator !=(const Record1& otherRec) const{
    return (otherRec.sym__0__5373426235047388566 != sym__0__5373426235047388566 || (otherRec.sym__0__2677149988632781646 != sym__0__2677149988632781646 || (otherRec.sym__0__3230501947603702676 != sym__0__3230501947603702676 || (otherRec.sym__0___45_7504312298840290590 != sym__0___45_7504312298840290590 || (otherRec.sym__0__142765961647840520 != sym__0__142765961647840520 || (otherRec.sym__0___45_890986601021018327 != sym__0___45_890986601021018327 || (otherRec.sym__0__1448529583206195662 != sym__0__1448529583206195662 || (otherRec.sym__0__2570343804236594778 != sym__0__2570343804236594778 || (otherRec.sym__0__1359507712116914494 != sym__0__1359507712116914494 || (otherRec.sym__0__6011849395894522126 != sym__0__6011849395894522126 || (otherRec.sym__0___45_7468776379460950944 != sym__0___45_7468776379460950944 || (otherRec.sym__0___45_8794687169050633757 != sym__0___45_8794687169050633757 || (otherRec.sym__0___45_6203473563316140867 != sym__0___45_6203473563316140867 || (otherRec.sym__0___45_677371798856704365 != sym__0___45_677371798856704365 || (otherRec.sym__0__915473005346690518 != sym__0__915473005346690518 || (otherRec.sym__0__6004818342855880465 != sym__0__6004818342855880465 || (otherRec.sym__0___45_7479113260177362442 != sym__0___45_7479113260177362442 || (otherRec.sym__0___45_7892661382758597666 != sym__0___45_7892661382758597666 || (otherRec.sym__0___45_5779290218296092888 != sym__0___45_5779290218296092888 || (otherRec.sym__0__39182466228154115 != sym__0__39182466228154115 || (otherRec.sym__0___45_6428352846240480422 != sym__0___45_6428352846240480422 || (otherRec.sym__0__5771061490590798674 != sym__0__5771061490590798674 || (otherRec.sym__0__5176922323272081847 != sym__0__5176922323272081847 || (otherRec.sym__0__3439791191136335327 != sym__0__3439791191136335327 || (otherRec.sym__0__9000735294801606101 != sym__0__9000735294801606101 || (otherRec.sym__0___45_4937244029492686830 != sym__0___45_4937244029492686830 || (otherRec.sym__0___45_4662405569626189464 != sym__0___45_4662405569626189464 || (otherRec.sym__0__5296351127385819968 != sym__0__5296351127385819968 || (otherRec.sym__0__3188754882683964806 != sym__0__3188754882683964806 || (otherRec.sym__0__4353034828577292717 != sym__0__4353034828577292717 || (otherRec.sym__0___45_7269132014943876604 != sym__0___45_7269132014943876604 || (otherRec.sym__0__2678892183314537005 != sym__0__2678892183314537005 || (otherRec.sym__0__4170008532883495879 != sym__0__4170008532883495879 || (otherRec.sym__0___45_4375206156149434176 != sym__0___45_4375206156149434176 || (otherRec.sym__0__697181792988283792 != sym__0__697181792988283792 || (otherRec.sym__0__2425070607436168210 != sym__0__2425070607436168210 || (otherRec.sym__0___45_8099035356149320476 != sym__0___45_8099035356149320476 || (otherRec.sym__0___45_1189046714177700278 != sym__0___45_1189046714177700278 || (otherRec.sym__0___45_7692406820437109602 != sym__0___45_7692406820437109602 || (otherRec.sym__0__4206086254272971481 != sym__0__4206086254272971481 || (otherRec.sym__0___45_2483348542730046437 != sym__0___45_2483348542730046437 || otherRec.sym__0___45_762363192294171021 != sym__0___45_762363192294171021)))))))))))))))))))))))))))))))))))))))));
  }
  unsigned sym__0__5373426235047388566;
  fluidb_string<18> sym__0__2677149988632781646;
  fluidb_string<40> sym__0__3230501947603702676;
  fluidb_string<11> sym__0___45_7504312298840290590;
  fluidb_string<15> sym__0__142765961647840520;
  fluidb_string<13> sym__0___45_890986601021018327;
  fluidb_string<15> sym__0__1448529583206195662;
  fluidb_string<21> sym__0__2570343804236594778;
  unsigned sym__0__1359507712116914494;
  fluidb_string<18> sym__0__6011849395894522126;
  fluidb_string<9> sym__0___45_7468776379460950944;
  fluidb_string<9> sym__0___45_8794687169050633757;
  unsigned sym__0___45_6203473563316140867;
  unsigned sym__0___45_677371798856704365;
  fluidb_string<7> sym__0__915473005346690518;
  unsigned sym__0__6004818342855880465;
  unsigned sym__0___45_7479113260177362442;
  unsigned sym__0___45_7892661382758597666;
  unsigned sym__0___45_5779290218296092888;
  unsigned sym__0__39182466228154115;
  fluidb_string<15> sym__0___45_6428352846240480422;
  fluidb_string<2> sym__0__5771061490590798674;
  fluidb_string<2> sym__0__5176922323272081847;
  fluidb_string<2> sym__0__3439791191136335327;
  fluidb_string<2> sym__0__9000735294801606101;
  unsigned sym__0___45_4937244029492686830;
  int sym__0___45_4662405569626189464;
  unsigned sym__0__5296351127385819968;
  unsigned sym__0__3188754882683964806;
  unsigned sym__0__4353034828577292717;
  unsigned sym__0___45_7269132014943876604;
  fluidb_string<21> sym__0__2678892183314537005;
  unsigned sym__0__4170008532883495879;
  fluidb_string<10> sym__0___45_4375206156149434176;
  unsigned sym__0__697181792988283792;
  double sym__0__2425070607436168210;
  unsigned sym__0___45_8099035356149320476;
  double sym__0___45_1189046714177700278;
  unsigned sym__0___45_7692406820437109602;
  unsigned sym__0__4206086254272971481;
  double sym__0___45_2483348542730046437;
  fluidb_string<13> sym__0___45_762363192294171021;
 private:
};


class Record24 {
 public:
  Record24(fluidb_string<11> __sortElem0, fluidb_string<16> __sortElem1, unsigned __sortElem2) : sortElem0(__sortElem0), sortElem1(__sortElem1), sortElem2(__sortElem2)
  {
  }
  Record24() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << arrToString(sortElem0) << " | " << arrToString(sortElem1) << " | " << sortElem2;
    return o.str();
  }
  bool operator <(const Record24& otherRec) const{
    return (otherRec.sortElem0 < sortElem0 && (otherRec.sortElem1 < sortElem1 && otherRec.sortElem2 < sortElem2));
  }
  bool operator ==(const Record24& otherRec) const{
    return (otherRec.sortElem0 == sortElem0 && (otherRec.sortElem1 == sortElem1 && otherRec.sortElem2 == sortElem2));
  }
  bool operator !=(const Record24& otherRec) const{
    return (otherRec.sortElem0 != sortElem0 || (otherRec.sortElem1 != sortElem1 || otherRec.sortElem2 != sortElem2));
  }
  fluidb_string<11> sortElem0;
  fluidb_string<16> sortElem1;
  unsigned sortElem2;
 private:
};


class Record6 {
 public:
  Record6(unsigned __sym__0___45_9117911789383871612, fluidb_string<25> __sym__0___45_1547112764757372609, fluidb_string<40> __sym__0___45_8663957751614366179, fluidb_string<16> __sym__0__1466641425010216931, fluidb_string<16> __sym__0__3672857626658041553, fluidb_string<13> __sym__0___45_3362440237381592032, fluidb_string<15> __sym__0___45_6631364176934158657) : sym__0___45_9117911789383871612(__sym__0___45_9117911789383871612), sym__0___45_1547112764757372609(__sym__0___45_1547112764757372609), sym__0___45_8663957751614366179(__sym__0___45_8663957751614366179), sym__0__1466641425010216931(__sym__0__1466641425010216931), sym__0__3672857626658041553(__sym__0__3672857626658041553), sym__0___45_3362440237381592032(__sym__0___45_3362440237381592032), sym__0___45_6631364176934158657(__sym__0___45_6631364176934158657)
  {
  }
  Record6() 
  {
  }
  std::string show() const{
    std::stringstream o;
    o << sym__0___45_9117911789383871612 << " | " << arrToString(sym__0___45_1547112764757372609) << " | " << arrToString(sym__0___45_8663957751614366179) << " | " << arrToString(sym__0__1466641425010216931) << " | " << arrToString(sym__0__3672857626658041553) << " | " << arrToString(sym__0___45_3362440237381592032) << " | " << arrToString(sym__0___45_6631364176934158657);
    return o.str();
  }
  bool operator <(const Record6& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 < sym__0___45_9117911789383871612 && (otherRec.sym__0___45_1547112764757372609 < sym__0___45_1547112764757372609 && (otherRec.sym__0___45_8663957751614366179 < sym__0___45_8663957751614366179 && (otherRec.sym__0__1466641425010216931 < sym__0__1466641425010216931 && (otherRec.sym__0__3672857626658041553 < sym__0__3672857626658041553 && (otherRec.sym__0___45_3362440237381592032 < sym__0___45_3362440237381592032 && otherRec.sym__0___45_6631364176934158657 < sym__0___45_6631364176934158657))))));
  }
  bool operator ==(const Record6& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 == sym__0___45_9117911789383871612 && (otherRec.sym__0___45_1547112764757372609 == sym__0___45_1547112764757372609 && (otherRec.sym__0___45_8663957751614366179 == sym__0___45_8663957751614366179 && (otherRec.sym__0__1466641425010216931 == sym__0__1466641425010216931 && (otherRec.sym__0__3672857626658041553 == sym__0__3672857626658041553 && (otherRec.sym__0___45_3362440237381592032 == sym__0___45_3362440237381592032 && otherRec.sym__0___45_6631364176934158657 == sym__0___45_6631364176934158657))))));
  }
  bool operator !=(const Record6& otherRec) const{
    return (otherRec.sym__0___45_9117911789383871612 != sym__0___45_9117911789383871612 || (otherRec.sym__0___45_1547112764757372609 != sym__0___45_1547112764757372609 || (otherRec.sym__0___45_8663957751614366179 != sym__0___45_8663957751614366179 || (otherRec.sym__0__1466641425010216931 != sym__0__1466641425010216931 || (otherRec.sym__0__3672857626658041553 != sym__0__3672857626658041553 || (otherRec.sym__0___45_3362440237381592032 != sym__0___45_3362440237381592032 || otherRec.sym__0___45_6631364176934158657 != sym__0___45_6631364176934158657))))));
  }
  unsigned sym__0___45_9117911789383871612;
  fluidb_string<25> sym__0___45_1547112764757372609;
  fluidb_string<40> sym__0___45_8663957751614366179;
  fluidb_string<16> sym__0__1466641425010216931;
  fluidb_string<16> sym__0__3672857626658041553;
  fluidb_string<13> sym__0___45_3362440237381592032;
  fluidb_string<15> sym__0___45_6631364176934158657;
 private:
};


class CallableClass15 {
 public:
  bool operator()(const Record7& record14) {
    return (like(record14.sym__0__4216868589223431701, "UNITED KI1") || like(record14.sym__0__4216868589223431701, "UNITED KI5"));
  }
  typedef bool Codomain;
  typedef Record7 Domain0;
 private:
};


class CallableClass2 {
 public:
  bool operator()(const Record1& record0) {
    return (like(record0.sym__0__915473005346690518, "Dec1997") && (like(record0.sym__0___45_7504312298840290590, "UNITED KI1") || like(record0.sym__0___45_7504312298840290590, "UNITED KI5")));
  }
  typedef bool Codomain;
  typedef Record1 Domain0;
 private:
};


class CallableClass8 {
 public:
  Record7 operator()(const Record5& record3, const Record6& record4) {
    return Record7(record3.sym__0__3403248661340349691, record3.sym__0__3850222236060155651, record3.sym__0__3977350276997190885, record3.sym__0___45_6859642161052908889, record3.sym__0__6644610896855601817, record3.sym__0__6265634944113511896, record3.sym__0___45_1371431997144567421, record3.sym__0___45_880715020301735505, record3.sym__0__7995624710530972915, record3.sym__0__6195807630124177219, record3.sym__0___45_2429812741659212415, record3.sym__0__3204025383091988014, record3.sym__0___45_5315606378040067172, record3.sym__0___45_5674678265604168610, record3.sym__0___45_7901043365364018501, record3.sym__0__3662230461050853488, record3.sym__0___45_7942219912215366309, record3.sym__0__4257010425039702547, record3.sym__0__4064307497098150713, record3.sym__0___45_5255358739022695602, record3.sym__0__617862561600896687, record3.sym__0___45_5263756225186459241, record3.sym__0___45_2410023079747040398, record3.sym__0___45_3111414259439921974, record3.sym__0__1643321609568346180, record3.sym__0__1293451704385543127, record3.sym__0___45_4609582958643610887, record3.sym__0___45_2494553570011815839, record3.sym__0___45_9059865464435031445, record3.sym__0__3418937241583397644, record3.sym__0___45_243435756704872939, record3.sym__0___45_9087532836105098356, record3.sym__0___45_6055506455423744638, record3.sym__0__5695825867951754721, record3.sym__0___45_2029576362025629135, record3.sym__0___45_1448210651911159849, record3.sym__0__6973066605232388341, record3.sym__0___45_2495954511780470945, record3.sym__0__6609108937894625363, record3.sym__0__7746920907002661576, record3.sym__0__5772181554311918390, record3.sym__0___45_3041639650578609474, record4.sym__0___45_9117911789383871612, record4.sym__0___45_1547112764757372609, record4.sym__0___45_8663957751614366179, record4.sym__0__1466641425010216931, record4.sym__0__3672857626658041553, record4.sym__0___45_3362440237381592032, record4.sym__0___45_6631364176934158657);
  }
  typedef Record7 Codomain;
  typedef Record5 Domain0;
  typedef Record6 Domain1;
 private:
};


class CallableClass13 {
 public:
  Record9 operator()(const Record6& record12) {
    return Record9(record12.sym__0___45_9117911789383871612);
  }
  typedef Record9 Codomain;
  typedef Record6 Domain0;
 private:
};


class CallableClass25 {
 public:
  Record24 operator()(const Record19& record16) {
    return Record24(record16.sym__0___45_559827363703454640, record16.sym__0__7423004607806069504, record16.sym__0___45_4186919936531085605);
  }
  typedef Record24 Codomain;
  typedef Record19 Domain0;
 private:
};


class CallableClass28 {
 public:
  Record27 operator()(const Record17& record26) {
    return Record27(record26.sym__0__439601008034082421, (-(record26.sym__0__6124260730402362477)));
  }
  typedef Record27 Codomain;
  typedef Record17 Domain0;
 private:
};


class CallableClass23 {
 public:
  Record17 operator()(const Record19& record16) {
    return Record17(vAggrFirst18(record16.sym__0___45_559827363703454640), vAggrFirst20(record16.sym__0__7423004607806069504), vAggrFirst21(record16.sym__0___45_4186919936531085605), vAggrSum22(record16.sym__0___45_3655337267794821636));
  }
  typedef Record17 Codomain;
  typedef Record19 Domain0;
 private:
  AggrFirst<fluidb_string<11>> vAggrFirst18;
  AggrFirst<fluidb_string<16>> vAggrFirst20;
  AggrFirst<unsigned> vAggrFirst21;
  AggrSum<unsigned> vAggrSum22;
};


class CallableClass11 {
 public:
  Record9 operator()(const Record5& record10) {
    return Record9(record10.sym__0__3418937241583397644);
  }
  typedef Record9 Codomain;
  typedef Record5 Domain0;
 private:
};






int main() {
  // Delete: (Q1 
  //   (QSort [E0 (ESym "d_year"),E1 ENeg (E0 (ESym "revenue"))]) 
  //   (Q1 
  //     (QGroup 
  //       [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //        (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //        (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //        (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //       [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P2 
  //             PAnd 
  //             (P2 
  //               POr 
  //               (P0 
  //                 (R2 RLike 
  //                     (R0 (E0 (ESym "c_city"))) 
  //                     (R0 (E0 (EString "UNITED KI1"))))) 
  //               (P0 
  //                 (R2 RLike 
  //                     (R0 (E0 (ESym "c_city"))) 
  //                     (R0 (E0 (EString "UNITED KI5")))))) 
  //             (P0 
  //               (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992)))))) 
  //           (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5"))))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey"))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_custkey"))) 
  //                 (R0 (E0 (ESym "c_custkey"))))) 
  //           (Q0 (TSymbol "customer")) 
  //           (J 
  //             (P0 
  //               (R2 REq 
  //                   (R0 (E0 (ESym "lo_orderdate"))) 
  //                   (R0 (E0 (ESym "d_datekey"))))) 
  //             (Q0 (TSymbol "date")) 
  //             (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QSort [E0 (ESym \"d_year\"),E1 ENeg (E0 (ESym \"revenue\"))]) \n  (Q1 \n    (QGroup \n      [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n       (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n       (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n       (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n      [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]) \n    (S \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P2 \n            PAnd \n            (P2 \n              POr \n              (P0 \n                (R2 RLike \n                    (R0 (E0 (ESym \"c_city\"))) \n                    (R0 (E0 (EString \"UNITED KI1\"))))) \n              (P0 \n                (R2 RLike \n                    (R0 (E0 (ESym \"c_city\"))) \n                    (R0 (E0 (EString \"UNITED KI5\")))))) \n            (P0 \n              (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992)))))) \n          (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\"))))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\"))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_custkey\"))) \n                (R0 (E0 (ESym \"c_custkey\"))))) \n          (Q0 (TSymbol \"customer\")) \n          (J \n            (P0 \n              (R2 REq \n                  (R0 (E0 (ESym \"lo_orderdate\"))) \n                  (R0 (E0 (ESym \"d_datekey\"))))) \n            (Q0 (TSymbol \"date\")) \n            (Q0 (TSymbol \"lineorder\")))) \n        (Q0 (TSymbol \"supplier\"))))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data224.dat");
  // Delete: (Q1 
  //   (QGroup 
  //     [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //      (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //      (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //      (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //     [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]) 
  //   (S 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P2 
  //           PAnd 
  //           (P2 
  //             POr 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI1"))))) 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI5")))))) 
  //           (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992)))))) 
  //         (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //       (P2 
  //         POr 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_city"))) 
  //               (R0 (E0 (EString "UNITED KI1"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "s_city"))) 
  //               (R0 (E0 (EString "UNITED KI5"))))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_suppkey"))) 
  //             (R0 (E0 (ESym "s_suppkey"))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (Q1 \n  (QGroup \n    [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n     (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n     (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n     (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n    [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]) \n  (S \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P2 \n          PAnd \n          (P2 \n            POr \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI1\"))))) \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI5\")))))) \n          (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992)))))) \n        (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n      (P2 \n        POr \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_city\"))) \n              (R0 (E0 (EString \"UNITED KI1\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"s_city\"))) \n              (R0 (E0 (EString \"UNITED KI5\"))))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_suppkey\"))) \n            (R0 (E0 (ESym \"s_suppkey\"))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))) \n      (Q0 (TSymbol \"supplier\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data223.dat");
  // Delete: (Q2 
  //   (QLeftAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QLeftAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data215.dat");
  // Delete: (Q2 
  //   (QRightAntijoin 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey")))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (Q2 \n  (QRightAntijoin \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\")))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data217.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "s_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (S 
  //       (P2 
  //         PAnd 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "c_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5"))))))) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_custkey"))) 
  //               (R0 (E0 (ESym "c_custkey"))))) 
  //         (Q0 (TSymbol "customer")) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder"))))) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"s_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (S \n      (P2 \n        PAnd \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"c_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\"))))))) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_custkey\"))) \n              (R0 (E0 (ESym \"c_custkey\"))))) \n        (Q0 (TSymbol \"customer\")) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\"))))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data220.dat");
  // Delete: (J 
  //   (P0 
  //     (R2 REq (R0 (E0 (ESym "lo_suppkey"))) (R0 (E0 (ESym "s_suppkey"))))) 
  //   (S 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5")))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (S 
  //         (P2 PAnd 
  //             (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //             (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //         (J 
  //           (P0 
  //             (R2 REq 
  //                 (R0 (E0 (ESym "lo_orderdate"))) 
  //                 (R0 (E0 (ESym "d_datekey"))))) 
  //           (Q0 (TSymbol "date")) 
  //           (Q0 (TSymbol "lineorder")))))) 
  std::cout << "Delete: (J \n  (P0 \n    (R2 REq (R0 (E0 (ESym \"lo_suppkey\"))) (R0 (E0 (ESym \"s_suppkey\"))))) \n  (S \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\")))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (S \n        (P2 PAnd \n            (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n            (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n        (J \n          (P0 \n            (R2 REq \n                (R0 (E0 (ESym \"lo_orderdate\"))) \n                (R0 (E0 (ESym \"d_datekey\"))))) \n          (Q0 (TSymbol \"date\")) \n          (Q0 (TSymbol \"lineorder\")))))) \n  (Q0 (TSymbol \"supplier\")))" << std::endl;
  deleteFile("/tmp/fluidb_store/data216.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P2 
  //           PAnd 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "d_yearmonth"))) 
  //                 (R0 (E0 (EString "Dec1997"))))) 
  //           (P2 
  //             POr 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI1"))))) 
  //             (P0 
  //               (R2 RLike 
  //                   (R0 (E0 (ESym "c_city"))) 
  //                   (R0 (E0 (EString "UNITED KI5")))))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P2 \n          PAnd \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"d_yearmonth\"))) \n                (R0 (E0 (EString \"Dec1997\"))))) \n          (P2 \n            POr \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI1\"))))) \n            (P0 \n              (R2 RLike \n                  (R0 (E0 (ESym \"c_city\"))) \n                  (R0 (E0 (EString \"UNITED KI5\")))))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass2>(Just<const std::string>("/tmp/fluidb_store/data227.dat"), Just<const std::string>("/tmp/fluidb_store/data228.dat"), "/tmp/fluidb_store/data144.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P2 PAnd 
  //         (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //         (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //     (P2 
  //       POr 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI1"))))) 
  //       (P0 
  //         (R2 RLike 
  //             (R0 (E0 (ESym "c_city"))) 
  //             (R0 (E0 (EString "UNITED KI5"))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_orderdate"))) 
  //             (R0 (E0 (ESym "d_datekey"))))) 
  //       (Q0 (TSymbol "date")) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P2 PAnd \n        (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n        (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n    (P2 \n      POr \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI1\"))))) \n      (P0 \n        (R2 RLike \n            (R0 (E0 (ESym \"c_city\"))) \n            (R0 (E0 (EString \"UNITED KI5\"))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_orderdate\"))) \n            (R0 (E0 (ESym \"d_datekey\"))))) \n      (Q0 (TSymbol \"date\")) \n      (Q0 (TSymbol \"lineorder\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data212.dat");
  // Delete: (S 
  //   (P1 
  //     PNot 
  //     (P2 
  //       PAnd 
  //       (P2 PAnd 
  //           (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992))))) 
  //           (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //       (P2 
  //         POr 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_city"))) 
  //               (R0 (E0 (EString "UNITED KI1"))))) 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_city"))) 
  //               (R0 (E0 (EString "UNITED KI5")))))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_custkey"))) 
  //           (R0 (E0 (ESym "c_custkey"))))) 
  //     (Q0 (TSymbol "customer")) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_orderdate"))) 
  //             (R0 (E0 (ESym "d_datekey"))))) 
  //       (Q0 (TSymbol "date")) 
  std::cout << "Delete: (S \n  (P1 \n    PNot \n    (P2 \n      PAnd \n      (P2 PAnd \n          (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992))))) \n          (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n      (P2 \n        POr \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_city\"))) \n              (R0 (E0 (EString \"UNITED KI1\"))))) \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_city\"))) \n              (R0 (E0 (EString \"UNITED KI5\")))))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_custkey\"))) \n          (R0 (E0 (ESym \"c_custkey\"))))) \n    (Q0 (TSymbol \"customer\")) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_orderdate\"))) \n            (R0 (E0 (ESym \"d_datekey\"))))) \n      (Q0 (TSymbol \"date\")) \n      (Q0 (TSymbol \"lineorder\")))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data213.dat");
  // ForwardTrigger: (Just 
  //   (Left 
  //     [
  //      QJoin 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_suppkey"))) 
  //               (R0 (E0 (ESym "s_suppkey")))))
  std::cout << "ForwardTrigger: (Just \n  (Left \n    [\n     QJoin \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_suppkey\"))) \n              (R0 (E0 (ESym \"s_suppkey\")))))\n    ]))" << std::endl;
  {
    auto operation = mkEquiJoin<CallableClass11, CallableClass13, CallableClass8>(Just<const std::string>("/tmp/fluidb_store/data244.dat"), Just<const std::string>("/tmp/fluidb_store/data243.dat"), Just<const std::string>("/tmp/fluidb_store/data245.dat"), "/tmp/fluidb_store/data227.dat", "/run/user/1000/fluidb-data/supplier.dat");
    operation.run();
    operation.print_output(10);
  }
  // Delete: (S 
  //   (P2 
  //     PAnd 
  //     (P2 
  //       PAnd 
  //       (P2 
  //         PAnd 
  //         (P0 
  //           (R2 RLike 
  //               (R0 (E0 (ESym "c_region"))) 
  //               (R0 (E0 (EString "ASIA"))))) 
  //         (P0 (R2 RGe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1992)))))) 
  //       (P0 (R2 RLe (R0 (E0 (ESym "d_year"))) (R0 (E0 (EInt 1997)))))) 
  //     (P0 
  //       (R2 RLike (R0 (E0 (ESym "s_region"))) (R0 (E0 (EString "ASIA")))))) 
  //   (J 
  //     (P0 
  //       (R2 REq 
  //           (R0 (E0 (ESym "lo_suppkey"))) 
  //           (R0 (E0 (ESym "s_suppkey"))))) 
  //     (J 
  //       (P0 
  //         (R2 REq 
  //             (R0 (E0 (ESym "lo_custkey"))) 
  //             (R0 (E0 (ESym "c_custkey"))))) 
  //       (Q0 (TSymbol "customer")) 
  //       (J 
  //         (P0 
  //           (R2 REq 
  //               (R0 (E0 (ESym "lo_orderdate"))) 
  //               (R0 (E0 (ESym "d_datekey"))))) 
  //         (Q0 (TSymbol "date")) 
  //         (Q0 (TSymbol "lineorder")))) 
  std::cout << "Delete: (S \n  (P2 \n    PAnd \n    (P2 \n      PAnd \n      (P2 \n        PAnd \n        (P0 \n          (R2 RLike \n              (R0 (E0 (ESym \"c_region\"))) \n              (R0 (E0 (EString \"ASIA\"))))) \n        (P0 (R2 RGe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1992)))))) \n      (P0 (R2 RLe (R0 (E0 (ESym \"d_year\"))) (R0 (E0 (EInt 1997)))))) \n    (P0 \n      (R2 RLike (R0 (E0 (ESym \"s_region\"))) (R0 (E0 (EString \"ASIA\")))))) \n  (J \n    (P0 \n      (R2 REq \n          (R0 (E0 (ESym \"lo_suppkey\"))) \n          (R0 (E0 (ESym \"s_suppkey\"))))) \n    (J \n      (P0 \n        (R2 REq \n            (R0 (E0 (ESym \"lo_custkey\"))) \n            (R0 (E0 (ESym \"c_custkey\"))))) \n      (Q0 (TSymbol \"customer\")) \n      (J \n        (P0 \n          (R2 REq \n              (R0 (E0 (ESym \"lo_orderdate\"))) \n              (R0 (E0 (ESym \"d_datekey\"))))) \n        (Q0 (TSymbol \"date\")) \n        (Q0 (TSymbol \"lineorder\")))) \n    (Q0 (TSymbol \"supplier\"))))" << std::endl;
  deleteFile("/tmp/fluidb_store/data153.dat");
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QSel 
  //         (P2 
  //           POr 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI1"))))) 
  //           (P0 
  //             (R2 RLike 
  //                 (R0 (E0 (ESym "s_city"))) 
  //                 (R0 (E0 (EString "UNITED KI5"))))))
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QSel \n        (P2 \n          POr \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI1\"))))) \n          (P0 \n            (R2 RLike \n                (R0 (E0 (ESym \"s_city\"))) \n                (R0 (E0 (EString \"UNITED KI5\"))))))\n    ]))" << std::endl;
  {
    auto operation = mkSelect<CallableClass15>(Just<const std::string>("/tmp/fluidb_store/data225.dat"), Just<const std::string>("/tmp/fluidb_store/data248.dat"), "/tmp/fluidb_store/data244.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  //   (Right 
  //     [
  //      QGroup 
  //         [(ESym "c_city",E0 (NAggr AggrFirst (E0 (ESym "c_city")))),
  //          (ESym "s_city",E0 (NAggr AggrFirst (E0 (ESym "s_city")))),
  //          (ESym "d_year",E0 (NAggr AggrFirst (E0 (ESym "d_year")))),
  //          (ESym "revenue",E0 (NAggr AggrSum (E0 (ESym "lo_revenue"))))] 
  //         [E0 (ESym "c_city"),E0 (ESym "s_city"),E0 (ESym "d_year")]
  std::cout << "ForwardTrigger: (Just \n  (Right \n    [\n     QGroup \n        [(ESym \"c_city\",E0 (NAggr AggrFirst (E0 (ESym \"c_city\")))),\n         (ESym \"s_city\",E0 (NAggr AggrFirst (E0 (ESym \"s_city\")))),\n         (ESym \"d_year\",E0 (NAggr AggrFirst (E0 (ESym \"d_year\")))),\n         (ESym \"revenue\",E0 (NAggr AggrSum (E0 (ESym \"lo_revenue\"))))] \n        [E0 (ESym \"c_city\"),E0 (ESym \"s_city\"),E0 (ESym \"d_year\")]\n    ]))" << std::endl;
  {
    auto operation = mkAggregation<CallableClass23, CallableClass25>(Just<const std::string>("/tmp/fluidb_store/data256.dat"), Just<const std::string>("/tmp/fluidb_store/data225.dat"), "/tmp/fluidb_store/data225.dat");
    operation.run();
    operation.print_output(10);
  }
  // ForwardTrigger: (Just 
  std::cout << "ForwardTrigger: (Just \n  (Right [QSort [E0 (ESym \"d_year\"),E1 ENeg (E0 (ESym \"revenue\"))]]))" << std::endl;
  {
    auto operation = mkSort<CallableClass28>(Just<const std::string>("/tmp/fluidb_store/data257.dat"), Just<const std::string>("/tmp/fluidb_store/data256.dat"), "/tmp/fluidb_store/data256.dat");
    operation.run();
    operation.print_output(10);
  }
  report_counters();
  return 0;
}
